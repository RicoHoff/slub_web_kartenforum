var vk2 = (function (exports) {
	'use strict';

	function createCommonjsModule$1(fn) {
	  var module = { exports: {} };
		return fn(module, module.exports), module.exports;
	}

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	/* eslint-disable no-unused-vars */

	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
	  if (val === null || val === undefined) {
	    throw new TypeError('Object.assign cannot be called with null or undefined');
	  }

	  return Object(val);
	}

	function shouldUseNative() {
	  try {
	    if (!Object.assign) {
	      return false;
	    } // Detect buggy property enumeration order in older V8 versions.
	    // https://bugs.chromium.org/p/v8/issues/detail?id=4118


	    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers

	    test1[5] = 'de';

	    if (Object.getOwnPropertyNames(test1)[0] === '5') {
	      return false;
	    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


	    var test2 = {};

	    for (var i = 0; i < 10; i++) {
	      test2['_' + String.fromCharCode(i)] = i;
	    }

	    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
	      return test2[n];
	    });

	    if (order2.join('') !== '0123456789') {
	      return false;
	    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


	    var test3 = {};
	    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
	      test3[letter] = letter;
	    });

	    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
	      return false;
	    }

	    return true;
	  } catch (err) {
	    // We don't expect any of the above to throw, but better to be safe.
	    return false;
	  }
	}

	var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
	  var from;
	  var to = toObject(target);
	  var symbols;

	  for (var s = 1; s < arguments.length; s++) {
	    from = Object(arguments[s]);

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }

	    if (getOwnPropertySymbols) {
	      symbols = getOwnPropertySymbols(from);

	      for (var i = 0; i < symbols.length; i++) {
	        if (propIsEnumerable.call(from, symbols[i])) {
	          to[symbols[i]] = from[symbols[i]];
	        }
	      }
	    }
	  }

	  return to;
	};

	/** @license React v17.0.2
	 * react.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var react_production_min = createCommonjsModule$1(function (module, exports) {

	var n = 60103,
	    p = 60106;

	exports.Fragment = 60107;
	exports.StrictMode = 60108;
	exports.Profiler = 60114;
	var q = 60109,
	    r = 60110,
	    t = 60112;
	exports.Suspense = 60113;
	var u = 60115,
	    v = 60116;

	if ("function" === typeof Symbol && Symbol.for) {
	  var w = Symbol.for;
	  n = w("react.element");
	  p = w("react.portal");
	  exports.Fragment = w("react.fragment");
	  exports.StrictMode = w("react.strict_mode");
	  exports.Profiler = w("react.profiler");
	  q = w("react.provider");
	  r = w("react.context");
	  t = w("react.forward_ref");
	  exports.Suspense = w("react.suspense");
	  u = w("react.memo");
	  v = w("react.lazy");
	}

	var x = "function" === typeof Symbol && Symbol.iterator;

	function y(a) {
	  if (null === a || "object" !== typeof a) return null;
	  a = x && a[x] || a["@@iterator"];
	  return "function" === typeof a ? a : null;
	}

	function z(a) {
	  for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) b += "&args[]=" + encodeURIComponent(arguments[c]);

	  return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
	}

	var A = {
	  isMounted: function () {
	    return !1;
	  },
	  enqueueForceUpdate: function () {},
	  enqueueReplaceState: function () {},
	  enqueueSetState: function () {}
	},
	    B = {};

	function C(a, b, c) {
	  this.props = a;
	  this.context = b;
	  this.refs = B;
	  this.updater = c || A;
	}

	C.prototype.isReactComponent = {};

	C.prototype.setState = function (a, b) {
	  if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error(z(85));
	  this.updater.enqueueSetState(this, a, b, "setState");
	};

	C.prototype.forceUpdate = function (a) {
	  this.updater.enqueueForceUpdate(this, a, "forceUpdate");
	};

	function D() {}

	D.prototype = C.prototype;

	function E(a, b, c) {
	  this.props = a;
	  this.context = b;
	  this.refs = B;
	  this.updater = c || A;
	}

	var F = E.prototype = new D();
	F.constructor = E;
	objectAssign(F, C.prototype);
	F.isPureReactComponent = !0;
	var G = {
	  current: null
	},
	    H = Object.prototype.hasOwnProperty,
	    I = {
	  key: !0,
	  ref: !0,
	  __self: !0,
	  __source: !0
	};

	function J(a, b, c) {
	  var e,
	      d = {},
	      k = null,
	      h = null;
	  if (null != b) for (e in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b) H.call(b, e) && !I.hasOwnProperty(e) && (d[e] = b[e]);
	  var g = arguments.length - 2;
	  if (1 === g) d.children = c;else if (1 < g) {
	    for (var f = Array(g), m = 0; m < g; m++) f[m] = arguments[m + 2];

	    d.children = f;
	  }
	  if (a && a.defaultProps) for (e in g = a.defaultProps, g) void 0 === d[e] && (d[e] = g[e]);
	  return {
	    $$typeof: n,
	    type: a,
	    key: k,
	    ref: h,
	    props: d,
	    _owner: G.current
	  };
	}

	function K(a, b) {
	  return {
	    $$typeof: n,
	    type: a.type,
	    key: b,
	    ref: a.ref,
	    props: a.props,
	    _owner: a._owner
	  };
	}

	function L(a) {
	  return "object" === typeof a && null !== a && a.$$typeof === n;
	}

	function escape(a) {
	  var b = {
	    "=": "=0",
	    ":": "=2"
	  };
	  return "$" + a.replace(/[=:]/g, function (a) {
	    return b[a];
	  });
	}

	var M = /\/+/g;

	function N(a, b) {
	  return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);
	}

	function O(a, b, c, e, d) {
	  var k = typeof a;
	  if ("undefined" === k || "boolean" === k) a = null;
	  var h = !1;
	  if (null === a) h = !0;else switch (k) {
	    case "string":
	    case "number":
	      h = !0;
	      break;

	    case "object":
	      switch (a.$$typeof) {
	        case n:
	        case p:
	          h = !0;
	      }

	  }
	  if (h) return h = a, d = d(h), a = "" === e ? "." + N(h, 0) : e, Array.isArray(d) ? (c = "", null != a && (c = a.replace(M, "$&/") + "/"), O(d, b, c, "", function (a) {
	    return a;
	  })) : null != d && (L(d) && (d = K(d, c + (!d.key || h && h.key === d.key ? "" : ("" + d.key).replace(M, "$&/") + "/") + a)), b.push(d)), 1;
	  h = 0;
	  e = "" === e ? "." : e + ":";
	  if (Array.isArray(a)) for (var g = 0; g < a.length; g++) {
	    k = a[g];
	    var f = e + N(k, g);
	    h += O(k, b, c, f, d);
	  } else if (f = y(a), "function" === typeof f) for (a = f.call(a), g = 0; !(k = a.next()).done;) k = k.value, f = e + N(k, g++), h += O(k, b, c, f, d);else if ("object" === k) throw b = "" + a, Error(z(31, "[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b));
	  return h;
	}

	function P(a, b, c) {
	  if (null == a) return a;
	  var e = [],
	      d = 0;
	  O(a, e, "", "", function (a) {
	    return b.call(c, a, d++);
	  });
	  return e;
	}

	function Q(a) {
	  if (-1 === a._status) {
	    var b = a._result;
	    b = b();
	    a._status = 0;
	    a._result = b;
	    b.then(function (b) {
	      0 === a._status && (b = b.default, a._status = 1, a._result = b);
	    }, function (b) {
	      0 === a._status && (a._status = 2, a._result = b);
	    });
	  }

	  if (1 === a._status) return a._result;
	  throw a._result;
	}

	var R = {
	  current: null
	};

	function S() {
	  var a = R.current;
	  if (null === a) throw Error(z(321));
	  return a;
	}

	var T = {
	  ReactCurrentDispatcher: R,
	  ReactCurrentBatchConfig: {
	    transition: 0
	  },
	  ReactCurrentOwner: G,
	  IsSomeRendererActing: {
	    current: !1
	  },
	  assign: objectAssign
	};
	exports.Children = {
	  map: P,
	  forEach: function (a, b, c) {
	    P(a, function () {
	      b.apply(this, arguments);
	    }, c);
	  },
	  count: function (a) {
	    var b = 0;
	    P(a, function () {
	      b++;
	    });
	    return b;
	  },
	  toArray: function (a) {
	    return P(a, function (a) {
	      return a;
	    }) || [];
	  },
	  only: function (a) {
	    if (!L(a)) throw Error(z(143));
	    return a;
	  }
	};
	exports.Component = C;
	exports.PureComponent = E;
	exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = T;

	exports.cloneElement = function (a, b, c) {
	  if (null === a || void 0 === a) throw Error(z(267, a));
	  var e = objectAssign({}, a.props),
	      d = a.key,
	      k = a.ref,
	      h = a._owner;

	  if (null != b) {
	    void 0 !== b.ref && (k = b.ref, h = G.current);
	    void 0 !== b.key && (d = "" + b.key);
	    if (a.type && a.type.defaultProps) var g = a.type.defaultProps;

	    for (f in b) H.call(b, f) && !I.hasOwnProperty(f) && (e[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
	  }

	  var f = arguments.length - 2;
	  if (1 === f) e.children = c;else if (1 < f) {
	    g = Array(f);

	    for (var m = 0; m < f; m++) g[m] = arguments[m + 2];

	    e.children = g;
	  }
	  return {
	    $$typeof: n,
	    type: a.type,
	    key: d,
	    ref: k,
	    props: e,
	    _owner: h
	  };
	};

	exports.createContext = function (a, b) {
	  void 0 === b && (b = null);
	  a = {
	    $$typeof: r,
	    _calculateChangedBits: b,
	    _currentValue: a,
	    _currentValue2: a,
	    _threadCount: 0,
	    Provider: null,
	    Consumer: null
	  };
	  a.Provider = {
	    $$typeof: q,
	    _context: a
	  };
	  return a.Consumer = a;
	};

	exports.createElement = J;

	exports.createFactory = function (a) {
	  var b = J.bind(null, a);
	  b.type = a;
	  return b;
	};

	exports.createRef = function () {
	  return {
	    current: null
	  };
	};

	exports.forwardRef = function (a) {
	  return {
	    $$typeof: t,
	    render: a
	  };
	};

	exports.isValidElement = L;

	exports.lazy = function (a) {
	  return {
	    $$typeof: v,
	    _payload: {
	      _status: -1,
	      _result: a
	    },
	    _init: Q
	  };
	};

	exports.memo = function (a, b) {
	  return {
	    $$typeof: u,
	    type: a,
	    compare: void 0 === b ? null : b
	  };
	};

	exports.useCallback = function (a, b) {
	  return S().useCallback(a, b);
	};

	exports.useContext = function (a, b) {
	  return S().useContext(a, b);
	};

	exports.useDebugValue = function () {};

	exports.useEffect = function (a, b) {
	  return S().useEffect(a, b);
	};

	exports.useImperativeHandle = function (a, b, c) {
	  return S().useImperativeHandle(a, b, c);
	};

	exports.useLayoutEffect = function (a, b) {
	  return S().useLayoutEffect(a, b);
	};

	exports.useMemo = function (a, b) {
	  return S().useMemo(a, b);
	};

	exports.useReducer = function (a, b, c) {
	  return S().useReducer(a, b, c);
	};

	exports.useRef = function (a) {
	  return S().useRef(a);
	};

	exports.useState = function (a) {
	  return S().useState(a);
	};

	exports.version = "17.0.2";
	});

	var react = createCommonjsModule$1(function (module) {

	{
	  module.exports = react_production_min;
	}
	});

	/** @license React v0.20.2
	 * scheduler.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var scheduler_production_min = createCommonjsModule$1(function (module, exports) {

	var f, g, h, k;

	if ("object" === typeof performance && "function" === typeof performance.now) {
	  var l = performance;

	  exports.unstable_now = function () {
	    return l.now();
	  };
	} else {
	  var p = Date,
	      q = p.now();

	  exports.unstable_now = function () {
	    return p.now() - q;
	  };
	}

	if ("undefined" === typeof window || "function" !== typeof MessageChannel) {
	  var t = null,
	      u = null,
	      w = function () {
	    if (null !== t) try {
	      var a = exports.unstable_now();
	      t(!0, a);
	      t = null;
	    } catch (b) {
	      throw setTimeout(w, 0), b;
	    }
	  };

	  f = function (a) {
	    null !== t ? setTimeout(f, 0, a) : (t = a, setTimeout(w, 0));
	  };

	  g = function (a, b) {
	    u = setTimeout(a, b);
	  };

	  h = function () {
	    clearTimeout(u);
	  };

	  exports.unstable_shouldYield = function () {
	    return !1;
	  };

	  k = exports.unstable_forceFrameRate = function () {};
	} else {
	  var x = window.setTimeout,
	      y = window.clearTimeout;

	  if ("undefined" !== typeof console) {
	    var z = window.cancelAnimationFrame;
	    "function" !== typeof window.requestAnimationFrame && console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
	    "function" !== typeof z && console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
	  }

	  var A = !1,
	      B = null,
	      C = -1,
	      D = 5,
	      E = 0;

	  exports.unstable_shouldYield = function () {
	    return exports.unstable_now() >= E;
	  };

	  k = function () {};

	  exports.unstable_forceFrameRate = function (a) {
	    0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : D = 0 < a ? Math.floor(1E3 / a) : 5;
	  };

	  var F = new MessageChannel(),
	      G = F.port2;

	  F.port1.onmessage = function () {
	    if (null !== B) {
	      var a = exports.unstable_now();
	      E = a + D;

	      try {
	        B(!0, a) ? G.postMessage(null) : (A = !1, B = null);
	      } catch (b) {
	        throw G.postMessage(null), b;
	      }
	    } else A = !1;
	  };

	  f = function (a) {
	    B = a;
	    A || (A = !0, G.postMessage(null));
	  };

	  g = function (a, b) {
	    C = x(function () {
	      a(exports.unstable_now());
	    }, b);
	  };

	  h = function () {
	    y(C);
	    C = -1;
	  };
	}

	function H(a, b) {
	  var c = a.length;
	  a.push(b);

	  a: for (;;) {
	    var d = c - 1 >>> 1,
	        e = a[d];
	    if (void 0 !== e && 0 < I(e, b)) a[d] = b, a[c] = e, c = d;else break a;
	  }
	}

	function J(a) {
	  a = a[0];
	  return void 0 === a ? null : a;
	}

	function K(a) {
	  var b = a[0];

	  if (void 0 !== b) {
	    var c = a.pop();

	    if (c !== b) {
	      a[0] = c;

	      a: for (var d = 0, e = a.length; d < e;) {
	        var m = 2 * (d + 1) - 1,
	            n = a[m],
	            v = m + 1,
	            r = a[v];
	        if (void 0 !== n && 0 > I(n, c)) void 0 !== r && 0 > I(r, n) ? (a[d] = r, a[v] = c, d = v) : (a[d] = n, a[m] = c, d = m);else if (void 0 !== r && 0 > I(r, c)) a[d] = r, a[v] = c, d = v;else break a;
	      }
	    }

	    return b;
	  }

	  return null;
	}

	function I(a, b) {
	  var c = a.sortIndex - b.sortIndex;
	  return 0 !== c ? c : a.id - b.id;
	}

	var L = [],
	    M = [],
	    N = 1,
	    O = null,
	    P = 3,
	    Q = !1,
	    R = !1,
	    S = !1;

	function T(a) {
	  for (var b = J(M); null !== b;) {
	    if (null === b.callback) K(M);else if (b.startTime <= a) K(M), b.sortIndex = b.expirationTime, H(L, b);else break;
	    b = J(M);
	  }
	}

	function U(a) {
	  S = !1;
	  T(a);
	  if (!R) if (null !== J(L)) R = !0, f(V);else {
	    var b = J(M);
	    null !== b && g(U, b.startTime - a);
	  }
	}

	function V(a, b) {
	  R = !1;
	  S && (S = !1, h());
	  Q = !0;
	  var c = P;

	  try {
	    T(b);

	    for (O = J(L); null !== O && (!(O.expirationTime > b) || a && !exports.unstable_shouldYield());) {
	      var d = O.callback;

	      if ("function" === typeof d) {
	        O.callback = null;
	        P = O.priorityLevel;
	        var e = d(O.expirationTime <= b);
	        b = exports.unstable_now();
	        "function" === typeof e ? O.callback = e : O === J(L) && K(L);
	        T(b);
	      } else K(L);

	      O = J(L);
	    }

	    if (null !== O) var m = !0;else {
	      var n = J(M);
	      null !== n && g(U, n.startTime - b);
	      m = !1;
	    }
	    return m;
	  } finally {
	    O = null, P = c, Q = !1;
	  }
	}

	var W = k;
	exports.unstable_IdlePriority = 5;
	exports.unstable_ImmediatePriority = 1;
	exports.unstable_LowPriority = 4;
	exports.unstable_NormalPriority = 3;
	exports.unstable_Profiling = null;
	exports.unstable_UserBlockingPriority = 2;

	exports.unstable_cancelCallback = function (a) {
	  a.callback = null;
	};

	exports.unstable_continueExecution = function () {
	  R || Q || (R = !0, f(V));
	};

	exports.unstable_getCurrentPriorityLevel = function () {
	  return P;
	};

	exports.unstable_getFirstCallbackNode = function () {
	  return J(L);
	};

	exports.unstable_next = function (a) {
	  switch (P) {
	    case 1:
	    case 2:
	    case 3:
	      var b = 3;
	      break;

	    default:
	      b = P;
	  }

	  var c = P;
	  P = b;

	  try {
	    return a();
	  } finally {
	    P = c;
	  }
	};

	exports.unstable_pauseExecution = function () {};

	exports.unstable_requestPaint = W;

	exports.unstable_runWithPriority = function (a, b) {
	  switch (a) {
	    case 1:
	    case 2:
	    case 3:
	    case 4:
	    case 5:
	      break;

	    default:
	      a = 3;
	  }

	  var c = P;
	  P = a;

	  try {
	    return b();
	  } finally {
	    P = c;
	  }
	};

	exports.unstable_scheduleCallback = function (a, b, c) {
	  var d = exports.unstable_now();
	  "object" === typeof c && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;

	  switch (a) {
	    case 1:
	      var e = -1;
	      break;

	    case 2:
	      e = 250;
	      break;

	    case 5:
	      e = 1073741823;
	      break;

	    case 4:
	      e = 1E4;
	      break;

	    default:
	      e = 5E3;
	  }

	  e = c + e;
	  a = {
	    id: N++,
	    callback: b,
	    priorityLevel: a,
	    startTime: c,
	    expirationTime: e,
	    sortIndex: -1
	  };
	  c > d ? (a.sortIndex = c, H(M, a), null === J(L) && a === J(M) && (S ? h() : S = !0, g(U, c - d))) : (a.sortIndex = e, H(L, a), R || Q || (R = !0, f(V)));
	  return a;
	};

	exports.unstable_wrapCallback = function (a) {
	  var b = P;
	  return function () {
	    var c = P;
	    P = b;

	    try {
	      return a.apply(this, arguments);
	    } finally {
	      P = c;
	    }
	  };
	};
	});

	var scheduler = createCommonjsModule$1(function (module) {

	{
	  module.exports = scheduler_production_min;
	}
	});

	/** @license React v17.0.2
	 * react-dom.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */



	function y(a) {
	  for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) b += "&args[]=" + encodeURIComponent(arguments[c]);

	  return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
	}

	if (!react) throw Error(y(227));
	var ba = new Set(),
	    ca = {};

	function da(a, b) {
	  ea(a, b);
	  ea(a + "Capture", b);
	}

	function ea(a, b) {
	  ca[a] = b;

	  for (a = 0; a < b.length; a++) ba.add(b[a]);
	}

	var fa = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement),
	    ha = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,
	    ia = Object.prototype.hasOwnProperty,
	    ja = {},
	    ka = {};

	function la(a) {
	  if (ia.call(ka, a)) return !0;
	  if (ia.call(ja, a)) return !1;
	  if (ha.test(a)) return ka[a] = !0;
	  ja[a] = !0;
	  return !1;
	}

	function ma(a, b, c, d) {
	  if (null !== c && 0 === c.type) return !1;

	  switch (typeof b) {
	    case "function":
	    case "symbol":
	      return !0;

	    case "boolean":
	      if (d) return !1;
	      if (null !== c) return !c.acceptsBooleans;
	      a = a.toLowerCase().slice(0, 5);
	      return "data-" !== a && "aria-" !== a;

	    default:
	      return !1;
	  }
	}

	function na(a, b, c, d) {
	  if (null === b || "undefined" === typeof b || ma(a, b, c, d)) return !0;
	  if (d) return !1;
	  if (null !== c) switch (c.type) {
	    case 3:
	      return !b;

	    case 4:
	      return !1 === b;

	    case 5:
	      return isNaN(b);

	    case 6:
	      return isNaN(b) || 1 > b;
	  }
	  return !1;
	}

	function B(a, b, c, d, e, f, g) {
	  this.acceptsBooleans = 2 === b || 3 === b || 4 === b;
	  this.attributeName = d;
	  this.attributeNamespace = e;
	  this.mustUseProperty = c;
	  this.propertyName = a;
	  this.type = b;
	  this.sanitizeURL = f;
	  this.removeEmptyString = g;
	}

	var D = {};
	"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function (a) {
	  D[a] = new B(a, 0, !1, a, null, !1, !1);
	});
	[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function (a) {
	  var b = a[0];
	  D[b] = new B(b, 1, !1, a[1], null, !1, !1);
	});
	["contentEditable", "draggable", "spellCheck", "value"].forEach(function (a) {
	  D[a] = new B(a, 2, !1, a.toLowerCase(), null, !1, !1);
	});
	["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function (a) {
	  D[a] = new B(a, 2, !1, a, null, !1, !1);
	});
	"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function (a) {
	  D[a] = new B(a, 3, !1, a.toLowerCase(), null, !1, !1);
	});
	["checked", "multiple", "muted", "selected"].forEach(function (a) {
	  D[a] = new B(a, 3, !0, a, null, !1, !1);
	});
	["capture", "download"].forEach(function (a) {
	  D[a] = new B(a, 4, !1, a, null, !1, !1);
	});
	["cols", "rows", "size", "span"].forEach(function (a) {
	  D[a] = new B(a, 6, !1, a, null, !1, !1);
	});
	["rowSpan", "start"].forEach(function (a) {
	  D[a] = new B(a, 5, !1, a.toLowerCase(), null, !1, !1);
	});
	var oa = /[\-:]([a-z])/g;

	function pa(a) {
	  return a[1].toUpperCase();
	}

	"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function (a) {
	  var b = a.replace(oa, pa);
	  D[b] = new B(b, 1, !1, a, null, !1, !1);
	});
	"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function (a) {
	  var b = a.replace(oa, pa);
	  D[b] = new B(b, 1, !1, a, "http://www.w3.org/1999/xlink", !1, !1);
	});
	["xml:base", "xml:lang", "xml:space"].forEach(function (a) {
	  var b = a.replace(oa, pa);
	  D[b] = new B(b, 1, !1, a, "http://www.w3.org/XML/1998/namespace", !1, !1);
	});
	["tabIndex", "crossOrigin"].forEach(function (a) {
	  D[a] = new B(a, 1, !1, a.toLowerCase(), null, !1, !1);
	});
	D.xlinkHref = new B("xlinkHref", 1, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0, !1);
	["src", "href", "action", "formAction"].forEach(function (a) {
	  D[a] = new B(a, 1, !1, a.toLowerCase(), null, !0, !0);
	});

	function qa(a, b, c, d) {
	  var e = D.hasOwnProperty(b) ? D[b] : null;
	  var f = null !== e ? 0 === e.type : d ? !1 : !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1] ? !1 : !0;
	  f || (na(b, c, e, d) && (c = null), d || null === e ? la(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? !1 : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && !0 === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c))));
	}

	var ra = react.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
	    sa = 60103,
	    ta = 60106,
	    ua = 60107,
	    wa = 60108,
	    xa = 60114,
	    ya = 60109,
	    za = 60110,
	    Aa = 60112,
	    Ba = 60113,
	    Ca = 60120,
	    Da = 60115,
	    Ea = 60116,
	    Fa = 60121,
	    Ga = 60128,
	    Ha = 60129,
	    Ia = 60130,
	    Ja = 60131;

	if ("function" === typeof Symbol && Symbol.for) {
	  var E = Symbol.for;
	  sa = E("react.element");
	  ta = E("react.portal");
	  ua = E("react.fragment");
	  wa = E("react.strict_mode");
	  xa = E("react.profiler");
	  ya = E("react.provider");
	  za = E("react.context");
	  Aa = E("react.forward_ref");
	  Ba = E("react.suspense");
	  Ca = E("react.suspense_list");
	  Da = E("react.memo");
	  Ea = E("react.lazy");
	  Fa = E("react.block");
	  E("react.scope");
	  Ga = E("react.opaque.id");
	  Ha = E("react.debug_trace_mode");
	  Ia = E("react.offscreen");
	  Ja = E("react.legacy_hidden");
	}

	var Ka = "function" === typeof Symbol && Symbol.iterator;

	function La(a) {
	  if (null === a || "object" !== typeof a) return null;
	  a = Ka && a[Ka] || a["@@iterator"];
	  return "function" === typeof a ? a : null;
	}

	var Ma;

	function Na(a) {
	  if (void 0 === Ma) try {
	    throw Error();
	  } catch (c) {
	    var b = c.stack.trim().match(/\n( *(at )?)/);
	    Ma = b && b[1] || "";
	  }
	  return "\n" + Ma + a;
	}

	var Oa = !1;

	function Pa(a, b) {
	  if (!a || Oa) return "";
	  Oa = !0;
	  var c = Error.prepareStackTrace;
	  Error.prepareStackTrace = void 0;

	  try {
	    if (b) {
	      if (b = function () {
	        throw Error();
	      }, Object.defineProperty(b.prototype, "props", {
	        set: function () {
	          throw Error();
	        }
	      }), "object" === typeof Reflect && Reflect.construct) {
	        try {
	          Reflect.construct(b, []);
	        } catch (k) {
	          var d = k;
	        }

	        Reflect.construct(a, [], b);
	      } else {
	        try {
	          b.call();
	        } catch (k) {
	          d = k;
	        }

	        a.call(b.prototype);
	      }
	    } else {
	      try {
	        throw Error();
	      } catch (k) {
	        d = k;
	      }

	      a();
	    }
	  } catch (k) {
	    if (k && d && "string" === typeof k.stack) {
	      for (var e = k.stack.split("\n"), f = d.stack.split("\n"), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h];) h--;

	      for (; 1 <= g && 0 <= h; g--, h--) if (e[g] !== f[h]) {
	        if (1 !== g || 1 !== h) {
	          do if (g--, h--, 0 > h || e[g] !== f[h]) return "\n" + e[g].replace(" at new ", " at "); while (1 <= g && 0 <= h);
	        }

	        break;
	      }
	    }
	  } finally {
	    Oa = !1, Error.prepareStackTrace = c;
	  }

	  return (a = a ? a.displayName || a.name : "") ? Na(a) : "";
	}

	function Qa(a) {
	  switch (a.tag) {
	    case 5:
	      return Na(a.type);

	    case 16:
	      return Na("Lazy");

	    case 13:
	      return Na("Suspense");

	    case 19:
	      return Na("SuspenseList");

	    case 0:
	    case 2:
	    case 15:
	      return a = Pa(a.type, !1), a;

	    case 11:
	      return a = Pa(a.type.render, !1), a;

	    case 22:
	      return a = Pa(a.type._render, !1), a;

	    case 1:
	      return a = Pa(a.type, !0), a;

	    default:
	      return "";
	  }
	}

	function Ra(a) {
	  if (null == a) return null;
	  if ("function" === typeof a) return a.displayName || a.name || null;
	  if ("string" === typeof a) return a;

	  switch (a) {
	    case ua:
	      return "Fragment";

	    case ta:
	      return "Portal";

	    case xa:
	      return "Profiler";

	    case wa:
	      return "StrictMode";

	    case Ba:
	      return "Suspense";

	    case Ca:
	      return "SuspenseList";
	  }

	  if ("object" === typeof a) switch (a.$$typeof) {
	    case za:
	      return (a.displayName || "Context") + ".Consumer";

	    case ya:
	      return (a._context.displayName || "Context") + ".Provider";

	    case Aa:
	      var b = a.render;
	      b = b.displayName || b.name || "";
	      return a.displayName || ("" !== b ? "ForwardRef(" + b + ")" : "ForwardRef");

	    case Da:
	      return Ra(a.type);

	    case Fa:
	      return Ra(a._render);

	    case Ea:
	      b = a._payload;
	      a = a._init;

	      try {
	        return Ra(a(b));
	      } catch (c) {}

	  }
	  return null;
	}

	function Sa(a) {
	  switch (typeof a) {
	    case "boolean":
	    case "number":
	    case "object":
	    case "string":
	    case "undefined":
	      return a;

	    default:
	      return "";
	  }
	}

	function Ta(a) {
	  var b = a.type;
	  return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);
	}

	function Ua(a) {
	  var b = Ta(a) ? "checked" : "value",
	      c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b),
	      d = "" + a[b];

	  if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
	    var e = c.get,
	        f = c.set;
	    Object.defineProperty(a, b, {
	      configurable: !0,
	      get: function () {
	        return e.call(this);
	      },
	      set: function (a) {
	        d = "" + a;
	        f.call(this, a);
	      }
	    });
	    Object.defineProperty(a, b, {
	      enumerable: c.enumerable
	    });
	    return {
	      getValue: function () {
	        return d;
	      },
	      setValue: function (a) {
	        d = "" + a;
	      },
	      stopTracking: function () {
	        a._valueTracker = null;
	        delete a[b];
	      }
	    };
	  }
	}

	function Va(a) {
	  a._valueTracker || (a._valueTracker = Ua(a));
	}

	function Wa(a) {
	  if (!a) return !1;
	  var b = a._valueTracker;
	  if (!b) return !0;
	  var c = b.getValue();
	  var d = "";
	  a && (d = Ta(a) ? a.checked ? "true" : "false" : a.value);
	  a = d;
	  return a !== c ? (b.setValue(a), !0) : !1;
	}

	function Xa(a) {
	  a = a || ("undefined" !== typeof document ? document : void 0);
	  if ("undefined" === typeof a) return null;

	  try {
	    return a.activeElement || a.body;
	  } catch (b) {
	    return a.body;
	  }
	}

	function Ya(a, b) {
	  var c = b.checked;
	  return objectAssign({}, b, {
	    defaultChecked: void 0,
	    defaultValue: void 0,
	    value: void 0,
	    checked: null != c ? c : a._wrapperState.initialChecked
	  });
	}

	function Za(a, b) {
	  var c = null == b.defaultValue ? "" : b.defaultValue,
	      d = null != b.checked ? b.checked : b.defaultChecked;
	  c = Sa(null != b.value ? b.value : c);
	  a._wrapperState = {
	    initialChecked: d,
	    initialValue: c,
	    controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value
	  };
	}

	function $a(a, b) {
	  b = b.checked;
	  null != b && qa(a, "checked", b, !1);
	}

	function ab(a, b) {
	  $a(a, b);
	  var c = Sa(b.value),
	      d = b.type;
	  if (null != c) {
	    if ("number" === d) {
	      if (0 === c && "" === a.value || a.value != c) a.value = "" + c;
	    } else a.value !== "" + c && (a.value = "" + c);
	  } else if ("submit" === d || "reset" === d) {
	    a.removeAttribute("value");
	    return;
	  }
	  b.hasOwnProperty("value") ? bb(a, b.type, c) : b.hasOwnProperty("defaultValue") && bb(a, b.type, Sa(b.defaultValue));
	  null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
	}

	function cb(a, b, c) {
	  if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
	    var d = b.type;
	    if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;
	    b = "" + a._wrapperState.initialValue;
	    c || b === a.value || (a.value = b);
	    a.defaultValue = b;
	  }

	  c = a.name;
	  "" !== c && (a.name = "");
	  a.defaultChecked = !!a._wrapperState.initialChecked;
	  "" !== c && (a.name = c);
	}

	function bb(a, b, c) {
	  if ("number" !== b || Xa(a.ownerDocument) !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
	}

	function db(a) {
	  var b = "";
	  react.Children.forEach(a, function (a) {
	    null != a && (b += a);
	  });
	  return b;
	}

	function eb(a, b) {
	  a = objectAssign({
	    children: void 0
	  }, b);
	  if (b = db(b.children)) a.children = b;
	  return a;
	}

	function fb(a, b, c, d) {
	  a = a.options;

	  if (b) {
	    b = {};

	    for (var e = 0; e < c.length; e++) b["$" + c[e]] = !0;

	    for (c = 0; c < a.length; c++) e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);
	  } else {
	    c = "" + Sa(c);
	    b = null;

	    for (e = 0; e < a.length; e++) {
	      if (a[e].value === c) {
	        a[e].selected = !0;
	        d && (a[e].defaultSelected = !0);
	        return;
	      }

	      null !== b || a[e].disabled || (b = a[e]);
	    }

	    null !== b && (b.selected = !0);
	  }
	}

	function gb(a, b) {
	  if (null != b.dangerouslySetInnerHTML) throw Error(y(91));
	  return objectAssign({}, b, {
	    value: void 0,
	    defaultValue: void 0,
	    children: "" + a._wrapperState.initialValue
	  });
	}

	function hb(a, b) {
	  var c = b.value;

	  if (null == c) {
	    c = b.children;
	    b = b.defaultValue;

	    if (null != c) {
	      if (null != b) throw Error(y(92));

	      if (Array.isArray(c)) {
	        if (!(1 >= c.length)) throw Error(y(93));
	        c = c[0];
	      }

	      b = c;
	    }

	    null == b && (b = "");
	    c = b;
	  }

	  a._wrapperState = {
	    initialValue: Sa(c)
	  };
	}

	function ib(a, b) {
	  var c = Sa(b.value),
	      d = Sa(b.defaultValue);
	  null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));
	  null != d && (a.defaultValue = "" + d);
	}

	function jb(a) {
	  var b = a.textContent;
	  b === a._wrapperState.initialValue && "" !== b && null !== b && (a.value = b);
	}

	var kb = {
	  html: "http://www.w3.org/1999/xhtml",
	  mathml: "http://www.w3.org/1998/Math/MathML",
	  svg: "http://www.w3.org/2000/svg"
	};

	function lb(a) {
	  switch (a) {
	    case "svg":
	      return "http://www.w3.org/2000/svg";

	    case "math":
	      return "http://www.w3.org/1998/Math/MathML";

	    default:
	      return "http://www.w3.org/1999/xhtml";
	  }
	}

	function mb(a, b) {
	  return null == a || "http://www.w3.org/1999/xhtml" === a ? lb(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;
	}

	var nb,
	    ob = function (a) {
	  return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function (b, c, d, e) {
	    MSApp.execUnsafeLocalFunction(function () {
	      return a(b, c, d, e);
	    });
	  } : a;
	}(function (a, b) {
	  if (a.namespaceURI !== kb.svg || "innerHTML" in a) a.innerHTML = b;else {
	    nb = nb || document.createElement("div");
	    nb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";

	    for (b = nb.firstChild; a.firstChild;) a.removeChild(a.firstChild);

	    for (; b.firstChild;) a.appendChild(b.firstChild);
	  }
	});

	function pb(a, b) {
	  if (b) {
	    var c = a.firstChild;

	    if (c && c === a.lastChild && 3 === c.nodeType) {
	      c.nodeValue = b;
	      return;
	    }
	  }

	  a.textContent = b;
	}

	var qb = {
	  animationIterationCount: !0,
	  borderImageOutset: !0,
	  borderImageSlice: !0,
	  borderImageWidth: !0,
	  boxFlex: !0,
	  boxFlexGroup: !0,
	  boxOrdinalGroup: !0,
	  columnCount: !0,
	  columns: !0,
	  flex: !0,
	  flexGrow: !0,
	  flexPositive: !0,
	  flexShrink: !0,
	  flexNegative: !0,
	  flexOrder: !0,
	  gridArea: !0,
	  gridRow: !0,
	  gridRowEnd: !0,
	  gridRowSpan: !0,
	  gridRowStart: !0,
	  gridColumn: !0,
	  gridColumnEnd: !0,
	  gridColumnSpan: !0,
	  gridColumnStart: !0,
	  fontWeight: !0,
	  lineClamp: !0,
	  lineHeight: !0,
	  opacity: !0,
	  order: !0,
	  orphans: !0,
	  tabSize: !0,
	  widows: !0,
	  zIndex: !0,
	  zoom: !0,
	  fillOpacity: !0,
	  floodOpacity: !0,
	  stopOpacity: !0,
	  strokeDasharray: !0,
	  strokeDashoffset: !0,
	  strokeMiterlimit: !0,
	  strokeOpacity: !0,
	  strokeWidth: !0
	},
	    rb = ["Webkit", "ms", "Moz", "O"];
	Object.keys(qb).forEach(function (a) {
	  rb.forEach(function (b) {
	    b = b + a.charAt(0).toUpperCase() + a.substring(1);
	    qb[b] = qb[a];
	  });
	});

	function sb(a, b, c) {
	  return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || qb.hasOwnProperty(a) && qb[a] ? ("" + b).trim() : b + "px";
	}

	function tb(a, b) {
	  a = a.style;

	  for (var c in b) if (b.hasOwnProperty(c)) {
	    var d = 0 === c.indexOf("--"),
	        e = sb(c, b[c], d);
	    "float" === c && (c = "cssFloat");
	    d ? a.setProperty(c, e) : a[c] = e;
	  }
	}

	var ub = objectAssign({
	  menuitem: !0
	}, {
	  area: !0,
	  base: !0,
	  br: !0,
	  col: !0,
	  embed: !0,
	  hr: !0,
	  img: !0,
	  input: !0,
	  keygen: !0,
	  link: !0,
	  meta: !0,
	  param: !0,
	  source: !0,
	  track: !0,
	  wbr: !0
	});

	function vb(a, b) {
	  if (b) {
	    if (ub[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error(y(137, a));

	    if (null != b.dangerouslySetInnerHTML) {
	      if (null != b.children) throw Error(y(60));
	      if (!("object" === typeof b.dangerouslySetInnerHTML && "__html" in b.dangerouslySetInnerHTML)) throw Error(y(61));
	    }

	    if (null != b.style && "object" !== typeof b.style) throw Error(y(62));
	  }
	}

	function wb(a, b) {
	  if (-1 === a.indexOf("-")) return "string" === typeof b.is;

	  switch (a) {
	    case "annotation-xml":
	    case "color-profile":
	    case "font-face":
	    case "font-face-src":
	    case "font-face-uri":
	    case "font-face-format":
	    case "font-face-name":
	    case "missing-glyph":
	      return !1;

	    default:
	      return !0;
	  }
	}

	function xb(a) {
	  a = a.target || a.srcElement || window;
	  a.correspondingUseElement && (a = a.correspondingUseElement);
	  return 3 === a.nodeType ? a.parentNode : a;
	}

	var yb = null,
	    zb = null,
	    Ab = null;

	function Bb(a) {
	  if (a = Cb(a)) {
	    if ("function" !== typeof yb) throw Error(y(280));
	    var b = a.stateNode;
	    b && (b = Db(b), yb(a.stateNode, a.type, b));
	  }
	}

	function Eb(a) {
	  zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;
	}

	function Fb() {
	  if (zb) {
	    var a = zb,
	        b = Ab;
	    Ab = zb = null;
	    Bb(a);
	    if (b) for (a = 0; a < b.length; a++) Bb(b[a]);
	  }
	}

	function Gb(a, b) {
	  return a(b);
	}

	function Hb(a, b, c, d, e) {
	  return a(b, c, d, e);
	}

	function Ib() {}

	var Jb = Gb,
	    Kb = !1,
	    Lb = !1;

	function Mb() {
	  if (null !== zb || null !== Ab) Ib(), Fb();
	}

	function Nb(a, b, c) {
	  if (Lb) return a(b, c);
	  Lb = !0;

	  try {
	    return Jb(a, b, c);
	  } finally {
	    Lb = !1, Mb();
	  }
	}

	function Ob(a, b) {
	  var c = a.stateNode;
	  if (null === c) return null;
	  var d = Db(c);
	  if (null === d) return null;
	  c = d[b];

	  a: switch (b) {
	    case "onClick":
	    case "onClickCapture":
	    case "onDoubleClick":
	    case "onDoubleClickCapture":
	    case "onMouseDown":
	    case "onMouseDownCapture":
	    case "onMouseMove":
	    case "onMouseMoveCapture":
	    case "onMouseUp":
	    case "onMouseUpCapture":
	    case "onMouseEnter":
	      (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));
	      a = !d;
	      break a;

	    default:
	      a = !1;
	  }

	  if (a) return null;
	  if (c && "function" !== typeof c) throw Error(y(231, b, typeof c));
	  return c;
	}

	var Pb = !1;
	if (fa) try {
	  var Qb = {};
	  Object.defineProperty(Qb, "passive", {
	    get: function () {
	      Pb = !0;
	    }
	  });
	  window.addEventListener("test", Qb, Qb);
	  window.removeEventListener("test", Qb, Qb);
	} catch (a) {
	  Pb = !1;
	}

	function Rb(a, b, c, d, e, f, g, h, k) {
	  var l = Array.prototype.slice.call(arguments, 3);

	  try {
	    b.apply(c, l);
	  } catch (n) {
	    this.onError(n);
	  }
	}

	var Sb = !1,
	    Tb = null,
	    Ub = !1,
	    Vb = null,
	    Wb = {
	  onError: function (a) {
	    Sb = !0;
	    Tb = a;
	  }
	};

	function Xb(a, b, c, d, e, f, g, h, k) {
	  Sb = !1;
	  Tb = null;
	  Rb.apply(Wb, arguments);
	}

	function Yb(a, b, c, d, e, f, g, h, k) {
	  Xb.apply(this, arguments);

	  if (Sb) {
	    if (Sb) {
	      var l = Tb;
	      Sb = !1;
	      Tb = null;
	    } else throw Error(y(198));

	    Ub || (Ub = !0, Vb = l);
	  }
	}

	function Zb(a) {
	  var b = a,
	      c = a;
	  if (a.alternate) for (; b.return;) b = b.return;else {
	    a = b;

	    do b = a, 0 !== (b.flags & 1026) && (c = b.return), a = b.return; while (a);
	  }
	  return 3 === b.tag ? c : null;
	}

	function $b(a) {
	  if (13 === a.tag) {
	    var b = a.memoizedState;
	    null === b && (a = a.alternate, null !== a && (b = a.memoizedState));
	    if (null !== b) return b.dehydrated;
	  }

	  return null;
	}

	function ac(a) {
	  if (Zb(a) !== a) throw Error(y(188));
	}

	function bc(a) {
	  var b = a.alternate;

	  if (!b) {
	    b = Zb(a);
	    if (null === b) throw Error(y(188));
	    return b !== a ? null : a;
	  }

	  for (var c = a, d = b;;) {
	    var e = c.return;
	    if (null === e) break;
	    var f = e.alternate;

	    if (null === f) {
	      d = e.return;

	      if (null !== d) {
	        c = d;
	        continue;
	      }

	      break;
	    }

	    if (e.child === f.child) {
	      for (f = e.child; f;) {
	        if (f === c) return ac(e), a;
	        if (f === d) return ac(e), b;
	        f = f.sibling;
	      }

	      throw Error(y(188));
	    }

	    if (c.return !== d.return) c = e, d = f;else {
	      for (var g = !1, h = e.child; h;) {
	        if (h === c) {
	          g = !0;
	          c = e;
	          d = f;
	          break;
	        }

	        if (h === d) {
	          g = !0;
	          d = e;
	          c = f;
	          break;
	        }

	        h = h.sibling;
	      }

	      if (!g) {
	        for (h = f.child; h;) {
	          if (h === c) {
	            g = !0;
	            c = f;
	            d = e;
	            break;
	          }

	          if (h === d) {
	            g = !0;
	            d = f;
	            c = e;
	            break;
	          }

	          h = h.sibling;
	        }

	        if (!g) throw Error(y(189));
	      }
	    }
	    if (c.alternate !== d) throw Error(y(190));
	  }

	  if (3 !== c.tag) throw Error(y(188));
	  return c.stateNode.current === c ? a : b;
	}

	function cc(a) {
	  a = bc(a);
	  if (!a) return null;

	  for (var b = a;;) {
	    if (5 === b.tag || 6 === b.tag) return b;
	    if (b.child) b.child.return = b, b = b.child;else {
	      if (b === a) break;

	      for (; !b.sibling;) {
	        if (!b.return || b.return === a) return null;
	        b = b.return;
	      }

	      b.sibling.return = b.return;
	      b = b.sibling;
	    }
	  }

	  return null;
	}

	function dc(a, b) {
	  for (var c = a.alternate; null !== b;) {
	    if (b === a || b === c) return !0;
	    b = b.return;
	  }

	  return !1;
	}

	var ec,
	    fc,
	    gc,
	    hc,
	    ic = !1,
	    jc = [],
	    kc = null,
	    lc = null,
	    mc = null,
	    nc = new Map(),
	    oc = new Map(),
	    pc = [],
	    qc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");

	function rc(a, b, c, d, e) {
	  return {
	    blockedOn: a,
	    domEventName: b,
	    eventSystemFlags: c | 16,
	    nativeEvent: e,
	    targetContainers: [d]
	  };
	}

	function sc(a, b) {
	  switch (a) {
	    case "focusin":
	    case "focusout":
	      kc = null;
	      break;

	    case "dragenter":
	    case "dragleave":
	      lc = null;
	      break;

	    case "mouseover":
	    case "mouseout":
	      mc = null;
	      break;

	    case "pointerover":
	    case "pointerout":
	      nc.delete(b.pointerId);
	      break;

	    case "gotpointercapture":
	    case "lostpointercapture":
	      oc.delete(b.pointerId);
	  }
	}

	function tc(a, b, c, d, e, f) {
	  if (null === a || a.nativeEvent !== f) return a = rc(b, c, d, e, f), null !== b && (b = Cb(b), null !== b && fc(b)), a;
	  a.eventSystemFlags |= d;
	  b = a.targetContainers;
	  null !== e && -1 === b.indexOf(e) && b.push(e);
	  return a;
	}

	function uc(a, b, c, d, e) {
	  switch (b) {
	    case "focusin":
	      return kc = tc(kc, a, b, c, d, e), !0;

	    case "dragenter":
	      return lc = tc(lc, a, b, c, d, e), !0;

	    case "mouseover":
	      return mc = tc(mc, a, b, c, d, e), !0;

	    case "pointerover":
	      var f = e.pointerId;
	      nc.set(f, tc(nc.get(f) || null, a, b, c, d, e));
	      return !0;

	    case "gotpointercapture":
	      return f = e.pointerId, oc.set(f, tc(oc.get(f) || null, a, b, c, d, e)), !0;
	  }

	  return !1;
	}

	function vc(a) {
	  var b = wc(a.target);

	  if (null !== b) {
	    var c = Zb(b);
	    if (null !== c) if (b = c.tag, 13 === b) {
	      if (b = $b(c), null !== b) {
	        a.blockedOn = b;
	        hc(a.lanePriority, function () {
	          scheduler.unstable_runWithPriority(a.priority, function () {
	            gc(c);
	          });
	        });
	        return;
	      }
	    } else if (3 === b && c.stateNode.hydrate) {
	      a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;
	      return;
	    }
	  }

	  a.blockedOn = null;
	}

	function xc(a) {
	  if (null !== a.blockedOn) return !1;

	  for (var b = a.targetContainers; 0 < b.length;) {
	    var c = yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
	    if (null !== c) return b = Cb(c), null !== b && fc(b), a.blockedOn = c, !1;
	    b.shift();
	  }

	  return !0;
	}

	function zc(a, b, c) {
	  xc(a) && c.delete(b);
	}

	function Ac() {
	  for (ic = !1; 0 < jc.length;) {
	    var a = jc[0];

	    if (null !== a.blockedOn) {
	      a = Cb(a.blockedOn);
	      null !== a && ec(a);
	      break;
	    }

	    for (var b = a.targetContainers; 0 < b.length;) {
	      var c = yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);

	      if (null !== c) {
	        a.blockedOn = c;
	        break;
	      }

	      b.shift();
	    }

	    null === a.blockedOn && jc.shift();
	  }

	  null !== kc && xc(kc) && (kc = null);
	  null !== lc && xc(lc) && (lc = null);
	  null !== mc && xc(mc) && (mc = null);
	  nc.forEach(zc);
	  oc.forEach(zc);
	}

	function Bc(a, b) {
	  a.blockedOn === b && (a.blockedOn = null, ic || (ic = !0, scheduler.unstable_scheduleCallback(scheduler.unstable_NormalPriority, Ac)));
	}

	function Cc(a) {
	  function b(b) {
	    return Bc(b, a);
	  }

	  if (0 < jc.length) {
	    Bc(jc[0], a);

	    for (var c = 1; c < jc.length; c++) {
	      var d = jc[c];
	      d.blockedOn === a && (d.blockedOn = null);
	    }
	  }

	  null !== kc && Bc(kc, a);
	  null !== lc && Bc(lc, a);
	  null !== mc && Bc(mc, a);
	  nc.forEach(b);
	  oc.forEach(b);

	  for (c = 0; c < pc.length; c++) d = pc[c], d.blockedOn === a && (d.blockedOn = null);

	  for (; 0 < pc.length && (c = pc[0], null === c.blockedOn);) vc(c), null === c.blockedOn && pc.shift();
	}

	function Dc(a, b) {
	  var c = {};
	  c[a.toLowerCase()] = b.toLowerCase();
	  c["Webkit" + a] = "webkit" + b;
	  c["Moz" + a] = "moz" + b;
	  return c;
	}

	var Ec = {
	  animationend: Dc("Animation", "AnimationEnd"),
	  animationiteration: Dc("Animation", "AnimationIteration"),
	  animationstart: Dc("Animation", "AnimationStart"),
	  transitionend: Dc("Transition", "TransitionEnd")
	},
	    Fc = {},
	    Gc = {};
	fa && (Gc = document.createElement("div").style, "AnimationEvent" in window || (delete Ec.animationend.animation, delete Ec.animationiteration.animation, delete Ec.animationstart.animation), "TransitionEvent" in window || delete Ec.transitionend.transition);

	function Hc(a) {
	  if (Fc[a]) return Fc[a];
	  if (!Ec[a]) return a;
	  var b = Ec[a],
	      c;

	  for (c in b) if (b.hasOwnProperty(c) && c in Gc) return Fc[a] = b[c];

	  return a;
	}

	var Ic = Hc("animationend"),
	    Jc = Hc("animationiteration"),
	    Kc = Hc("animationstart"),
	    Lc = Hc("transitionend"),
	    Mc = new Map(),
	    Nc = new Map(),
	    Oc = ["abort", "abort", Ic, "animationEnd", Jc, "animationIteration", Kc, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", Lc, "transitionEnd", "waiting", "waiting"];

	function Pc(a, b) {
	  for (var c = 0; c < a.length; c += 2) {
	    var d = a[c],
	        e = a[c + 1];
	    e = "on" + (e[0].toUpperCase() + e.slice(1));
	    Nc.set(d, b);
	    Mc.set(d, e);
	    da(e, [d]);
	  }
	}

	var Qc = scheduler.unstable_now;
	Qc();
	var F = 8;

	function Rc(a) {
	  if (0 !== (1 & a)) return F = 15, 1;
	  if (0 !== (2 & a)) return F = 14, 2;
	  if (0 !== (4 & a)) return F = 13, 4;
	  var b = 24 & a;
	  if (0 !== b) return F = 12, b;
	  if (0 !== (a & 32)) return F = 11, 32;
	  b = 192 & a;
	  if (0 !== b) return F = 10, b;
	  if (0 !== (a & 256)) return F = 9, 256;
	  b = 3584 & a;
	  if (0 !== b) return F = 8, b;
	  if (0 !== (a & 4096)) return F = 7, 4096;
	  b = 4186112 & a;
	  if (0 !== b) return F = 6, b;
	  b = 62914560 & a;
	  if (0 !== b) return F = 5, b;
	  if (a & 67108864) return F = 4, 67108864;
	  if (0 !== (a & 134217728)) return F = 3, 134217728;
	  b = 805306368 & a;
	  if (0 !== b) return F = 2, b;
	  if (0 !== (1073741824 & a)) return F = 1, 1073741824;
	  F = 8;
	  return a;
	}

	function Sc(a) {
	  switch (a) {
	    case 99:
	      return 15;

	    case 98:
	      return 10;

	    case 97:
	    case 96:
	      return 8;

	    case 95:
	      return 2;

	    default:
	      return 0;
	  }
	}

	function Tc(a) {
	  switch (a) {
	    case 15:
	    case 14:
	      return 99;

	    case 13:
	    case 12:
	    case 11:
	    case 10:
	      return 98;

	    case 9:
	    case 8:
	    case 7:
	    case 6:
	    case 4:
	    case 5:
	      return 97;

	    case 3:
	    case 2:
	    case 1:
	      return 95;

	    case 0:
	      return 90;

	    default:
	      throw Error(y(358, a));
	  }
	}

	function Uc(a, b) {
	  var c = a.pendingLanes;
	  if (0 === c) return F = 0;
	  var d = 0,
	      e = 0,
	      f = a.expiredLanes,
	      g = a.suspendedLanes,
	      h = a.pingedLanes;
	  if (0 !== f) d = f, e = F = 15;else if (f = c & 134217727, 0 !== f) {
	    var k = f & ~g;
	    0 !== k ? (d = Rc(k), e = F) : (h &= f, 0 !== h && (d = Rc(h), e = F));
	  } else f = c & ~g, 0 !== f ? (d = Rc(f), e = F) : 0 !== h && (d = Rc(h), e = F);
	  if (0 === d) return 0;
	  d = 31 - Vc(d);
	  d = c & ((0 > d ? 0 : 1 << d) << 1) - 1;

	  if (0 !== b && b !== d && 0 === (b & g)) {
	    Rc(b);
	    if (e <= F) return b;
	    F = e;
	  }

	  b = a.entangledLanes;
	  if (0 !== b) for (a = a.entanglements, b &= d; 0 < b;) c = 31 - Vc(b), e = 1 << c, d |= a[c], b &= ~e;
	  return d;
	}

	function Wc(a) {
	  a = a.pendingLanes & -1073741825;
	  return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
	}

	function Xc(a, b) {
	  switch (a) {
	    case 15:
	      return 1;

	    case 14:
	      return 2;

	    case 12:
	      return a = Yc(24 & ~b), 0 === a ? Xc(10, b) : a;

	    case 10:
	      return a = Yc(192 & ~b), 0 === a ? Xc(8, b) : a;

	    case 8:
	      return a = Yc(3584 & ~b), 0 === a && (a = Yc(4186112 & ~b), 0 === a && (a = 512)), a;

	    case 2:
	      return b = Yc(805306368 & ~b), 0 === b && (b = 268435456), b;
	  }

	  throw Error(y(358, a));
	}

	function Yc(a) {
	  return a & -a;
	}

	function Zc(a) {
	  for (var b = [], c = 0; 31 > c; c++) b.push(a);

	  return b;
	}

	function $c(a, b, c) {
	  a.pendingLanes |= b;
	  var d = b - 1;
	  a.suspendedLanes &= d;
	  a.pingedLanes &= d;
	  a = a.eventTimes;
	  b = 31 - Vc(b);
	  a[b] = c;
	}

	var Vc = Math.clz32 ? Math.clz32 : ad,
	    bd = Math.log,
	    cd = Math.LN2;

	function ad(a) {
	  return 0 === a ? 32 : 31 - (bd(a) / cd | 0) | 0;
	}

	var dd = scheduler.unstable_UserBlockingPriority,
	    ed = scheduler.unstable_runWithPriority,
	    fd = !0;

	function gd(a, b, c, d) {
	  Kb || Ib();
	  var e = hd,
	      f = Kb;
	  Kb = !0;

	  try {
	    Hb(e, a, b, c, d);
	  } finally {
	    (Kb = f) || Mb();
	  }
	}

	function id(a, b, c, d) {
	  ed(dd, hd.bind(null, a, b, c, d));
	}

	function hd(a, b, c, d) {
	  if (fd) {
	    var e;
	    if ((e = 0 === (b & 4)) && 0 < jc.length && -1 < qc.indexOf(a)) a = rc(null, a, b, c, d), jc.push(a);else {
	      var f = yc(a, b, c, d);
	      if (null === f) e && sc(a, d);else {
	        if (e) {
	          if (-1 < qc.indexOf(a)) {
	            a = rc(f, a, b, c, d);
	            jc.push(a);
	            return;
	          }

	          if (uc(f, a, b, c, d)) return;
	          sc(a, d);
	        }

	        jd(a, b, d, null, c);
	      }
	    }
	  }
	}

	function yc(a, b, c, d) {
	  var e = xb(d);
	  e = wc(e);

	  if (null !== e) {
	    var f = Zb(e);
	    if (null === f) e = null;else {
	      var g = f.tag;

	      if (13 === g) {
	        e = $b(f);
	        if (null !== e) return e;
	        e = null;
	      } else if (3 === g) {
	        if (f.stateNode.hydrate) return 3 === f.tag ? f.stateNode.containerInfo : null;
	        e = null;
	      } else f !== e && (e = null);
	    }
	  }

	  jd(a, b, d, e, c);
	  return null;
	}

	var kd = null,
	    ld = null,
	    md = null;

	function nd() {
	  if (md) return md;
	  var a,
	      b = ld,
	      c = b.length,
	      d,
	      e = "value" in kd ? kd.value : kd.textContent,
	      f = e.length;

	  for (a = 0; a < c && b[a] === e[a]; a++);

	  var g = c - a;

	  for (d = 1; d <= g && b[c - d] === e[f - d]; d++);

	  return md = e.slice(a, 1 < d ? 1 - d : void 0);
	}

	function od(a) {
	  var b = a.keyCode;
	  "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;
	  10 === a && (a = 13);
	  return 32 <= a || 13 === a ? a : 0;
	}

	function pd() {
	  return !0;
	}

	function qd() {
	  return !1;
	}

	function rd(a) {
	  function b(b, d, e, f, g) {
	    this._reactName = b;
	    this._targetInst = e;
	    this.type = d;
	    this.nativeEvent = f;
	    this.target = g;
	    this.currentTarget = null;

	    for (var c in a) a.hasOwnProperty(c) && (b = a[c], this[c] = b ? b(f) : f[c]);

	    this.isDefaultPrevented = (null != f.defaultPrevented ? f.defaultPrevented : !1 === f.returnValue) ? pd : qd;
	    this.isPropagationStopped = qd;
	    return this;
	  }

	  objectAssign(b.prototype, {
	    preventDefault: function () {
	      this.defaultPrevented = !0;
	      var a = this.nativeEvent;
	      a && (a.preventDefault ? a.preventDefault() : "unknown" !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = pd);
	    },
	    stopPropagation: function () {
	      var a = this.nativeEvent;
	      a && (a.stopPropagation ? a.stopPropagation() : "unknown" !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = pd);
	    },
	    persist: function () {},
	    isPersistent: pd
	  });
	  return b;
	}

	var sd = {
	  eventPhase: 0,
	  bubbles: 0,
	  cancelable: 0,
	  timeStamp: function (a) {
	    return a.timeStamp || Date.now();
	  },
	  defaultPrevented: 0,
	  isTrusted: 0
	},
	    td = rd(sd),
	    ud = objectAssign({}, sd, {
	  view: 0,
	  detail: 0
	}),
	    vd = rd(ud),
	    wd,
	    xd,
	    yd,
	    Ad = objectAssign({}, ud, {
	  screenX: 0,
	  screenY: 0,
	  clientX: 0,
	  clientY: 0,
	  pageX: 0,
	  pageY: 0,
	  ctrlKey: 0,
	  shiftKey: 0,
	  altKey: 0,
	  metaKey: 0,
	  getModifierState: zd,
	  button: 0,
	  buttons: 0,
	  relatedTarget: function (a) {
	    return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
	  },
	  movementX: function (a) {
	    if ("movementX" in a) return a.movementX;
	    a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);
	    return wd;
	  },
	  movementY: function (a) {
	    return "movementY" in a ? a.movementY : xd;
	  }
	}),
	    Bd = rd(Ad),
	    Cd = objectAssign({}, Ad, {
	  dataTransfer: 0
	}),
	    Dd = rd(Cd),
	    Ed = objectAssign({}, ud, {
	  relatedTarget: 0
	}),
	    Fd = rd(Ed),
	    Gd = objectAssign({}, sd, {
	  animationName: 0,
	  elapsedTime: 0,
	  pseudoElement: 0
	}),
	    Hd = rd(Gd),
	    Id = objectAssign({}, sd, {
	  clipboardData: function (a) {
	    return "clipboardData" in a ? a.clipboardData : window.clipboardData;
	  }
	}),
	    Jd = rd(Id),
	    Kd = objectAssign({}, sd, {
	  data: 0
	}),
	    Ld = rd(Kd),
	    Md = {
	  Esc: "Escape",
	  Spacebar: " ",
	  Left: "ArrowLeft",
	  Up: "ArrowUp",
	  Right: "ArrowRight",
	  Down: "ArrowDown",
	  Del: "Delete",
	  Win: "OS",
	  Menu: "ContextMenu",
	  Apps: "ContextMenu",
	  Scroll: "ScrollLock",
	  MozPrintableKey: "Unidentified"
	},
	    Nd = {
	  8: "Backspace",
	  9: "Tab",
	  12: "Clear",
	  13: "Enter",
	  16: "Shift",
	  17: "Control",
	  18: "Alt",
	  19: "Pause",
	  20: "CapsLock",
	  27: "Escape",
	  32: " ",
	  33: "PageUp",
	  34: "PageDown",
	  35: "End",
	  36: "Home",
	  37: "ArrowLeft",
	  38: "ArrowUp",
	  39: "ArrowRight",
	  40: "ArrowDown",
	  45: "Insert",
	  46: "Delete",
	  112: "F1",
	  113: "F2",
	  114: "F3",
	  115: "F4",
	  116: "F5",
	  117: "F6",
	  118: "F7",
	  119: "F8",
	  120: "F9",
	  121: "F10",
	  122: "F11",
	  123: "F12",
	  144: "NumLock",
	  145: "ScrollLock",
	  224: "Meta"
	},
	    Od = {
	  Alt: "altKey",
	  Control: "ctrlKey",
	  Meta: "metaKey",
	  Shift: "shiftKey"
	};

	function Pd(a) {
	  var b = this.nativeEvent;
	  return b.getModifierState ? b.getModifierState(a) : (a = Od[a]) ? !!b[a] : !1;
	}

	function zd() {
	  return Pd;
	}

	var Qd = objectAssign({}, ud, {
	  key: function (a) {
	    if (a.key) {
	      var b = Md[a.key] || a.key;
	      if ("Unidentified" !== b) return b;
	    }

	    return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";
	  },
	  code: 0,
	  location: 0,
	  ctrlKey: 0,
	  shiftKey: 0,
	  altKey: 0,
	  metaKey: 0,
	  repeat: 0,
	  locale: 0,
	  getModifierState: zd,
	  charCode: function (a) {
	    return "keypress" === a.type ? od(a) : 0;
	  },
	  keyCode: function (a) {
	    return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
	  },
	  which: function (a) {
	    return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
	  }
	}),
	    Rd = rd(Qd),
	    Sd = objectAssign({}, Ad, {
	  pointerId: 0,
	  width: 0,
	  height: 0,
	  pressure: 0,
	  tangentialPressure: 0,
	  tiltX: 0,
	  tiltY: 0,
	  twist: 0,
	  pointerType: 0,
	  isPrimary: 0
	}),
	    Td = rd(Sd),
	    Ud = objectAssign({}, ud, {
	  touches: 0,
	  targetTouches: 0,
	  changedTouches: 0,
	  altKey: 0,
	  metaKey: 0,
	  ctrlKey: 0,
	  shiftKey: 0,
	  getModifierState: zd
	}),
	    Vd = rd(Ud),
	    Wd = objectAssign({}, sd, {
	  propertyName: 0,
	  elapsedTime: 0,
	  pseudoElement: 0
	}),
	    Xd = rd(Wd),
	    Yd = objectAssign({}, Ad, {
	  deltaX: function (a) {
	    return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
	  },
	  deltaY: function (a) {
	    return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
	  },
	  deltaZ: 0,
	  deltaMode: 0
	}),
	    Zd = rd(Yd),
	    $d = [9, 13, 27, 32],
	    ae = fa && "CompositionEvent" in window,
	    be = null;
	fa && "documentMode" in document && (be = document.documentMode);
	var ce = fa && "TextEvent" in window && !be,
	    de = fa && (!ae || be && 8 < be && 11 >= be),
	    ee = String.fromCharCode(32),
	    fe = !1;

	function ge(a, b) {
	  switch (a) {
	    case "keyup":
	      return -1 !== $d.indexOf(b.keyCode);

	    case "keydown":
	      return 229 !== b.keyCode;

	    case "keypress":
	    case "mousedown":
	    case "focusout":
	      return !0;

	    default:
	      return !1;
	  }
	}

	function he(a) {
	  a = a.detail;
	  return "object" === typeof a && "data" in a ? a.data : null;
	}

	var ie = !1;

	function je(a, b) {
	  switch (a) {
	    case "compositionend":
	      return he(b);

	    case "keypress":
	      if (32 !== b.which) return null;
	      fe = !0;
	      return ee;

	    case "textInput":
	      return a = b.data, a === ee && fe ? null : a;

	    default:
	      return null;
	  }
	}

	function ke(a, b) {
	  if (ie) return "compositionend" === a || !ae && ge(a, b) ? (a = nd(), md = ld = kd = null, ie = !1, a) : null;

	  switch (a) {
	    case "paste":
	      return null;

	    case "keypress":
	      if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
	        if (b.char && 1 < b.char.length) return b.char;
	        if (b.which) return String.fromCharCode(b.which);
	      }

	      return null;

	    case "compositionend":
	      return de && "ko" !== b.locale ? null : b.data;

	    default:
	      return null;
	  }
	}

	var le = {
	  color: !0,
	  date: !0,
	  datetime: !0,
	  "datetime-local": !0,
	  email: !0,
	  month: !0,
	  number: !0,
	  password: !0,
	  range: !0,
	  search: !0,
	  tel: !0,
	  text: !0,
	  time: !0,
	  url: !0,
	  week: !0
	};

	function me(a) {
	  var b = a && a.nodeName && a.nodeName.toLowerCase();
	  return "input" === b ? !!le[a.type] : "textarea" === b ? !0 : !1;
	}

	function ne(a, b, c, d) {
	  Eb(d);
	  b = oe(b, "onChange");
	  0 < b.length && (c = new td("onChange", "change", null, c, d), a.push({
	    event: c,
	    listeners: b
	  }));
	}

	var pe = null,
	    qe = null;

	function re(a) {
	  se(a, 0);
	}

	function te(a) {
	  var b = ue(a);
	  if (Wa(b)) return a;
	}

	function ve(a, b) {
	  if ("change" === a) return b;
	}

	var we = !1;

	if (fa) {
	  var xe;

	  if (fa) {
	    var ye = ("oninput" in document);

	    if (!ye) {
	      var ze = document.createElement("div");
	      ze.setAttribute("oninput", "return;");
	      ye = "function" === typeof ze.oninput;
	    }

	    xe = ye;
	  } else xe = !1;

	  we = xe && (!document.documentMode || 9 < document.documentMode);
	}

	function Ae() {
	  pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
	}

	function Be(a) {
	  if ("value" === a.propertyName && te(qe)) {
	    var b = [];
	    ne(b, qe, a, xb(a));
	    a = re;
	    if (Kb) a(b);else {
	      Kb = !0;

	      try {
	        Gb(a, b);
	      } finally {
	        Kb = !1, Mb();
	      }
	    }
	  }
	}

	function Ce(a, b, c) {
	  "focusin" === a ? (Ae(), pe = b, qe = c, pe.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();
	}

	function De(a) {
	  if ("selectionchange" === a || "keyup" === a || "keydown" === a) return te(qe);
	}

	function Ee(a, b) {
	  if ("click" === a) return te(b);
	}

	function Fe(a, b) {
	  if ("input" === a || "change" === a) return te(b);
	}

	function Ge(a, b) {
	  return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
	}

	var He = "function" === typeof Object.is ? Object.is : Ge,
	    Ie = Object.prototype.hasOwnProperty;

	function Je(a, b) {
	  if (He(a, b)) return !0;
	  if ("object" !== typeof a || null === a || "object" !== typeof b || null === b) return !1;
	  var c = Object.keys(a),
	      d = Object.keys(b);
	  if (c.length !== d.length) return !1;

	  for (d = 0; d < c.length; d++) if (!Ie.call(b, c[d]) || !He(a[c[d]], b[c[d]])) return !1;

	  return !0;
	}

	function Ke(a) {
	  for (; a && a.firstChild;) a = a.firstChild;

	  return a;
	}

	function Le(a, b) {
	  var c = Ke(a);
	  a = 0;

	  for (var d; c;) {
	    if (3 === c.nodeType) {
	      d = a + c.textContent.length;
	      if (a <= b && d >= b) return {
	        node: c,
	        offset: b - a
	      };
	      a = d;
	    }

	    a: {
	      for (; c;) {
	        if (c.nextSibling) {
	          c = c.nextSibling;
	          break a;
	        }

	        c = c.parentNode;
	      }

	      c = void 0;
	    }

	    c = Ke(c);
	  }
	}

	function Me(a, b) {
	  return a && b ? a === b ? !0 : a && 3 === a.nodeType ? !1 : b && 3 === b.nodeType ? Me(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1 : !1;
	}

	function Ne() {
	  for (var a = window, b = Xa(); b instanceof a.HTMLIFrameElement;) {
	    try {
	      var c = "string" === typeof b.contentWindow.location.href;
	    } catch (d) {
	      c = !1;
	    }

	    if (c) a = b.contentWindow;else break;
	    b = Xa(a.document);
	  }

	  return b;
	}

	function Oe(a) {
	  var b = a && a.nodeName && a.nodeName.toLowerCase();
	  return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);
	}

	var Pe = fa && "documentMode" in document && 11 >= document.documentMode,
	    Qe = null,
	    Re = null,
	    Se = null,
	    Te = !1;

	function Ue(a, b, c) {
	  var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;
	  Te || null == Qe || Qe !== Xa(d) || (d = Qe, "selectionStart" in d && Oe(d) ? d = {
	    start: d.selectionStart,
	    end: d.selectionEnd
	  } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = {
	    anchorNode: d.anchorNode,
	    anchorOffset: d.anchorOffset,
	    focusNode: d.focusNode,
	    focusOffset: d.focusOffset
	  }), Se && Je(Se, d) || (Se = d, d = oe(Re, "onSelect"), 0 < d.length && (b = new td("onSelect", "select", null, b, c), a.push({
	    event: b,
	    listeners: d
	  }), b.target = Qe)));
	}

	Pc("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "), 0);
	Pc("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "), 1);
	Pc(Oc, 2);

	for (var Ve = "change selectionchange textInput compositionstart compositionend compositionupdate".split(" "), We = 0; We < Ve.length; We++) Nc.set(Ve[We], 0);

	ea("onMouseEnter", ["mouseout", "mouseover"]);
	ea("onMouseLeave", ["mouseout", "mouseover"]);
	ea("onPointerEnter", ["pointerout", "pointerover"]);
	ea("onPointerLeave", ["pointerout", "pointerover"]);
	da("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
	da("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
	da("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
	da("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
	da("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
	da("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
	var Xe = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),
	    Ye = new Set("cancel close invalid load scroll toggle".split(" ").concat(Xe));

	function Ze(a, b, c) {
	  var d = a.type || "unknown-event";
	  a.currentTarget = c;
	  Yb(d, b, void 0, a);
	  a.currentTarget = null;
	}

	function se(a, b) {
	  b = 0 !== (b & 4);

	  for (var c = 0; c < a.length; c++) {
	    var d = a[c],
	        e = d.event;
	    d = d.listeners;

	    a: {
	      var f = void 0;
	      if (b) for (var g = d.length - 1; 0 <= g; g--) {
	        var h = d[g],
	            k = h.instance,
	            l = h.currentTarget;
	        h = h.listener;
	        if (k !== f && e.isPropagationStopped()) break a;
	        Ze(e, h, l);
	        f = k;
	      } else for (g = 0; g < d.length; g++) {
	        h = d[g];
	        k = h.instance;
	        l = h.currentTarget;
	        h = h.listener;
	        if (k !== f && e.isPropagationStopped()) break a;
	        Ze(e, h, l);
	        f = k;
	      }
	    }
	  }

	  if (Ub) throw a = Vb, Ub = !1, Vb = null, a;
	}

	function G(a, b) {
	  var c = $e(b),
	      d = a + "__bubble";
	  c.has(d) || (af(b, a, 2, !1), c.add(d));
	}

	var bf = "_reactListening" + Math.random().toString(36).slice(2);

	function cf(a) {
	  a[bf] || (a[bf] = !0, ba.forEach(function (b) {
	    Ye.has(b) || df(b, !1, a, null);
	    df(b, !0, a, null);
	  }));
	}

	function df(a, b, c, d) {
	  var e = 4 < arguments.length && void 0 !== arguments[4] ? arguments[4] : 0,
	      f = c;
	  "selectionchange" === a && 9 !== c.nodeType && (f = c.ownerDocument);

	  if (null !== d && !b && Ye.has(a)) {
	    if ("scroll" !== a) return;
	    e |= 2;
	    f = d;
	  }

	  var g = $e(f),
	      h = a + "__" + (b ? "capture" : "bubble");
	  g.has(h) || (b && (e |= 4), af(f, a, e, b), g.add(h));
	}

	function af(a, b, c, d) {
	  var e = Nc.get(b);

	  switch (void 0 === e ? 2 : e) {
	    case 0:
	      e = gd;
	      break;

	    case 1:
	      e = id;
	      break;

	    default:
	      e = hd;
	  }

	  c = e.bind(null, b, c, a);
	  e = void 0;
	  !Pb || "touchstart" !== b && "touchmove" !== b && "wheel" !== b || (e = !0);
	  d ? void 0 !== e ? a.addEventListener(b, c, {
	    capture: !0,
	    passive: e
	  }) : a.addEventListener(b, c, !0) : void 0 !== e ? a.addEventListener(b, c, {
	    passive: e
	  }) : a.addEventListener(b, c, !1);
	}

	function jd(a, b, c, d, e) {
	  var f = d;
	  if (0 === (b & 1) && 0 === (b & 2) && null !== d) a: for (;;) {
	    if (null === d) return;
	    var g = d.tag;

	    if (3 === g || 4 === g) {
	      var h = d.stateNode.containerInfo;
	      if (h === e || 8 === h.nodeType && h.parentNode === e) break;
	      if (4 === g) for (g = d.return; null !== g;) {
	        var k = g.tag;
	        if (3 === k || 4 === k) if (k = g.stateNode.containerInfo, k === e || 8 === k.nodeType && k.parentNode === e) return;
	        g = g.return;
	      }

	      for (; null !== h;) {
	        g = wc(h);
	        if (null === g) return;
	        k = g.tag;

	        if (5 === k || 6 === k) {
	          d = f = g;
	          continue a;
	        }

	        h = h.parentNode;
	      }
	    }

	    d = d.return;
	  }
	  Nb(function () {
	    var d = f,
	        e = xb(c),
	        g = [];

	    a: {
	      var h = Mc.get(a);

	      if (void 0 !== h) {
	        var k = td,
	            x = a;

	        switch (a) {
	          case "keypress":
	            if (0 === od(c)) break a;

	          case "keydown":
	          case "keyup":
	            k = Rd;
	            break;

	          case "focusin":
	            x = "focus";
	            k = Fd;
	            break;

	          case "focusout":
	            x = "blur";
	            k = Fd;
	            break;

	          case "beforeblur":
	          case "afterblur":
	            k = Fd;
	            break;

	          case "click":
	            if (2 === c.button) break a;

	          case "auxclick":
	          case "dblclick":
	          case "mousedown":
	          case "mousemove":
	          case "mouseup":
	          case "mouseout":
	          case "mouseover":
	          case "contextmenu":
	            k = Bd;
	            break;

	          case "drag":
	          case "dragend":
	          case "dragenter":
	          case "dragexit":
	          case "dragleave":
	          case "dragover":
	          case "dragstart":
	          case "drop":
	            k = Dd;
	            break;

	          case "touchcancel":
	          case "touchend":
	          case "touchmove":
	          case "touchstart":
	            k = Vd;
	            break;

	          case Ic:
	          case Jc:
	          case Kc:
	            k = Hd;
	            break;

	          case Lc:
	            k = Xd;
	            break;

	          case "scroll":
	            k = vd;
	            break;

	          case "wheel":
	            k = Zd;
	            break;

	          case "copy":
	          case "cut":
	          case "paste":
	            k = Jd;
	            break;

	          case "gotpointercapture":
	          case "lostpointercapture":
	          case "pointercancel":
	          case "pointerdown":
	          case "pointermove":
	          case "pointerout":
	          case "pointerover":
	          case "pointerup":
	            k = Td;
	        }

	        var w = 0 !== (b & 4),
	            z = !w && "scroll" === a,
	            u = w ? null !== h ? h + "Capture" : null : h;
	        w = [];

	        for (var t = d, q; null !== t;) {
	          q = t;
	          var v = q.stateNode;
	          5 === q.tag && null !== v && (q = v, null !== u && (v = Ob(t, u), null != v && w.push(ef(t, v, q))));
	          if (z) break;
	          t = t.return;
	        }

	        0 < w.length && (h = new k(h, x, null, c, e), g.push({
	          event: h,
	          listeners: w
	        }));
	      }
	    }

	    if (0 === (b & 7)) {
	      a: {
	        h = "mouseover" === a || "pointerover" === a;
	        k = "mouseout" === a || "pointerout" === a;
	        if (h && 0 === (b & 16) && (x = c.relatedTarget || c.fromElement) && (wc(x) || x[ff])) break a;

	        if (k || h) {
	          h = e.window === e ? e : (h = e.ownerDocument) ? h.defaultView || h.parentWindow : window;

	          if (k) {
	            if (x = c.relatedTarget || c.toElement, k = d, x = x ? wc(x) : null, null !== x && (z = Zb(x), x !== z || 5 !== x.tag && 6 !== x.tag)) x = null;
	          } else k = null, x = d;

	          if (k !== x) {
	            w = Bd;
	            v = "onMouseLeave";
	            u = "onMouseEnter";
	            t = "mouse";
	            if ("pointerout" === a || "pointerover" === a) w = Td, v = "onPointerLeave", u = "onPointerEnter", t = "pointer";
	            z = null == k ? h : ue(k);
	            q = null == x ? h : ue(x);
	            h = new w(v, t + "leave", k, c, e);
	            h.target = z;
	            h.relatedTarget = q;
	            v = null;
	            wc(e) === d && (w = new w(u, t + "enter", x, c, e), w.target = q, w.relatedTarget = z, v = w);
	            z = v;
	            if (k && x) b: {
	              w = k;
	              u = x;
	              t = 0;

	              for (q = w; q; q = gf(q)) t++;

	              q = 0;

	              for (v = u; v; v = gf(v)) q++;

	              for (; 0 < t - q;) w = gf(w), t--;

	              for (; 0 < q - t;) u = gf(u), q--;

	              for (; t--;) {
	                if (w === u || null !== u && w === u.alternate) break b;
	                w = gf(w);
	                u = gf(u);
	              }

	              w = null;
	            } else w = null;
	            null !== k && hf(g, h, k, w, !1);
	            null !== x && null !== z && hf(g, z, x, w, !0);
	          }
	        }
	      }

	      a: {
	        h = d ? ue(d) : window;
	        k = h.nodeName && h.nodeName.toLowerCase();
	        if ("select" === k || "input" === k && "file" === h.type) var J = ve;else if (me(h)) {
	          if (we) J = Fe;else {
	            J = De;
	            var K = Ce;
	          }
	        } else (k = h.nodeName) && "input" === k.toLowerCase() && ("checkbox" === h.type || "radio" === h.type) && (J = Ee);

	        if (J && (J = J(a, d))) {
	          ne(g, J, c, e);
	          break a;
	        }

	        K && K(a, h, d);
	        "focusout" === a && (K = h._wrapperState) && K.controlled && "number" === h.type && bb(h, "number", h.value);
	      }

	      K = d ? ue(d) : window;

	      switch (a) {
	        case "focusin":
	          if (me(K) || "true" === K.contentEditable) Qe = K, Re = d, Se = null;
	          break;

	        case "focusout":
	          Se = Re = Qe = null;
	          break;

	        case "mousedown":
	          Te = !0;
	          break;

	        case "contextmenu":
	        case "mouseup":
	        case "dragend":
	          Te = !1;
	          Ue(g, c, e);
	          break;

	        case "selectionchange":
	          if (Pe) break;

	        case "keydown":
	        case "keyup":
	          Ue(g, c, e);
	      }

	      var Q;
	      if (ae) b: {
	        switch (a) {
	          case "compositionstart":
	            var L = "onCompositionStart";
	            break b;

	          case "compositionend":
	            L = "onCompositionEnd";
	            break b;

	          case "compositionupdate":
	            L = "onCompositionUpdate";
	            break b;
	        }

	        L = void 0;
	      } else ie ? ge(a, c) && (L = "onCompositionEnd") : "keydown" === a && 229 === c.keyCode && (L = "onCompositionStart");
	      L && (de && "ko" !== c.locale && (ie || "onCompositionStart" !== L ? "onCompositionEnd" === L && ie && (Q = nd()) : (kd = e, ld = "value" in kd ? kd.value : kd.textContent, ie = !0)), K = oe(d, L), 0 < K.length && (L = new Ld(L, a, null, c, e), g.push({
	        event: L,
	        listeners: K
	      }), Q ? L.data = Q : (Q = he(c), null !== Q && (L.data = Q))));
	      if (Q = ce ? je(a, c) : ke(a, c)) d = oe(d, "onBeforeInput"), 0 < d.length && (e = new Ld("onBeforeInput", "beforeinput", null, c, e), g.push({
	        event: e,
	        listeners: d
	      }), e.data = Q);
	    }

	    se(g, b);
	  });
	}

	function ef(a, b, c) {
	  return {
	    instance: a,
	    listener: b,
	    currentTarget: c
	  };
	}

	function oe(a, b) {
	  for (var c = b + "Capture", d = []; null !== a;) {
	    var e = a,
	        f = e.stateNode;
	    5 === e.tag && null !== f && (e = f, f = Ob(a, c), null != f && d.unshift(ef(a, f, e)), f = Ob(a, b), null != f && d.push(ef(a, f, e)));
	    a = a.return;
	  }

	  return d;
	}

	function gf(a) {
	  if (null === a) return null;

	  do a = a.return; while (a && 5 !== a.tag);

	  return a ? a : null;
	}

	function hf(a, b, c, d, e) {
	  for (var f = b._reactName, g = []; null !== c && c !== d;) {
	    var h = c,
	        k = h.alternate,
	        l = h.stateNode;
	    if (null !== k && k === d) break;
	    5 === h.tag && null !== l && (h = l, e ? (k = Ob(c, f), null != k && g.unshift(ef(c, k, h))) : e || (k = Ob(c, f), null != k && g.push(ef(c, k, h))));
	    c = c.return;
	  }

	  0 !== g.length && a.push({
	    event: b,
	    listeners: g
	  });
	}

	function jf() {}

	var kf = null,
	    lf = null;

	function mf(a, b) {
	  switch (a) {
	    case "button":
	    case "input":
	    case "select":
	    case "textarea":
	      return !!b.autoFocus;
	  }

	  return !1;
	}

	function nf(a, b) {
	  return "textarea" === a || "option" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;
	}

	var of = "function" === typeof setTimeout ? setTimeout : void 0,
	    pf = "function" === typeof clearTimeout ? clearTimeout : void 0;

	function qf(a) {
	  1 === a.nodeType ? a.textContent = "" : 9 === a.nodeType && (a = a.body, null != a && (a.textContent = ""));
	}

	function rf(a) {
	  for (; null != a; a = a.nextSibling) {
	    var b = a.nodeType;
	    if (1 === b || 3 === b) break;
	  }

	  return a;
	}

	function sf(a) {
	  a = a.previousSibling;

	  for (var b = 0; a;) {
	    if (8 === a.nodeType) {
	      var c = a.data;

	      if ("$" === c || "$!" === c || "$?" === c) {
	        if (0 === b) return a;
	        b--;
	      } else "/$" === c && b++;
	    }

	    a = a.previousSibling;
	  }

	  return null;
	}

	var tf = 0;

	function uf(a) {
	  return {
	    $$typeof: Ga,
	    toString: a,
	    valueOf: a
	  };
	}

	var vf = Math.random().toString(36).slice(2),
	    wf = "__reactFiber$" + vf,
	    xf = "__reactProps$" + vf,
	    ff = "__reactContainer$" + vf,
	    yf = "__reactEvents$" + vf;

	function wc(a) {
	  var b = a[wf];
	  if (b) return b;

	  for (var c = a.parentNode; c;) {
	    if (b = c[ff] || c[wf]) {
	      c = b.alternate;
	      if (null !== b.child || null !== c && null !== c.child) for (a = sf(a); null !== a;) {
	        if (c = a[wf]) return c;
	        a = sf(a);
	      }
	      return b;
	    }

	    a = c;
	    c = a.parentNode;
	  }

	  return null;
	}

	function Cb(a) {
	  a = a[wf] || a[ff];
	  return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
	}

	function ue(a) {
	  if (5 === a.tag || 6 === a.tag) return a.stateNode;
	  throw Error(y(33));
	}

	function Db(a) {
	  return a[xf] || null;
	}

	function $e(a) {
	  var b = a[yf];
	  void 0 === b && (b = a[yf] = new Set());
	  return b;
	}

	var zf = [],
	    Af = -1;

	function Bf(a) {
	  return {
	    current: a
	  };
	}

	function H(a) {
	  0 > Af || (a.current = zf[Af], zf[Af] = null, Af--);
	}

	function I(a, b) {
	  Af++;
	  zf[Af] = a.current;
	  a.current = b;
	}

	var Cf = {},
	    M = Bf(Cf),
	    N = Bf(!1),
	    Df = Cf;

	function Ef(a, b) {
	  var c = a.type.contextTypes;
	  if (!c) return Cf;
	  var d = a.stateNode;
	  if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;
	  var e = {},
	      f;

	  for (f in c) e[f] = b[f];

	  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
	  return e;
	}

	function Ff(a) {
	  a = a.childContextTypes;
	  return null !== a && void 0 !== a;
	}

	function Gf() {
	  H(N);
	  H(M);
	}

	function Hf(a, b, c) {
	  if (M.current !== Cf) throw Error(y(168));
	  I(M, b);
	  I(N, c);
	}

	function If(a, b, c) {
	  var d = a.stateNode;
	  a = b.childContextTypes;
	  if ("function" !== typeof d.getChildContext) return c;
	  d = d.getChildContext();

	  for (var e in d) if (!(e in a)) throw Error(y(108, Ra(b) || "Unknown", e));

	  return objectAssign({}, c, d);
	}

	function Jf(a) {
	  a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Cf;
	  Df = M.current;
	  I(M, a);
	  I(N, N.current);
	  return !0;
	}

	function Kf(a, b, c) {
	  var d = a.stateNode;
	  if (!d) throw Error(y(169));
	  c ? (a = If(a, b, Df), d.__reactInternalMemoizedMergedChildContext = a, H(N), H(M), I(M, a)) : H(N);
	  I(N, c);
	}

	var Lf = null,
	    Mf = null,
	    Nf = scheduler.unstable_runWithPriority,
	    Of = scheduler.unstable_scheduleCallback,
	    Pf = scheduler.unstable_cancelCallback,
	    Qf = scheduler.unstable_shouldYield,
	    Rf = scheduler.unstable_requestPaint,
	    Sf = scheduler.unstable_now,
	    Tf = scheduler.unstable_getCurrentPriorityLevel,
	    Uf = scheduler.unstable_ImmediatePriority,
	    Vf = scheduler.unstable_UserBlockingPriority,
	    Wf = scheduler.unstable_NormalPriority,
	    Xf = scheduler.unstable_LowPriority,
	    Yf = scheduler.unstable_IdlePriority,
	    Zf = {},
	    $f = void 0 !== Rf ? Rf : function () {},
	    ag = null,
	    bg = null,
	    cg = !1,
	    dg = Sf(),
	    O = 1E4 > dg ? Sf : function () {
	  return Sf() - dg;
	};

	function eg() {
	  switch (Tf()) {
	    case Uf:
	      return 99;

	    case Vf:
	      return 98;

	    case Wf:
	      return 97;

	    case Xf:
	      return 96;

	    case Yf:
	      return 95;

	    default:
	      throw Error(y(332));
	  }
	}

	function fg(a) {
	  switch (a) {
	    case 99:
	      return Uf;

	    case 98:
	      return Vf;

	    case 97:
	      return Wf;

	    case 96:
	      return Xf;

	    case 95:
	      return Yf;

	    default:
	      throw Error(y(332));
	  }
	}

	function gg(a, b) {
	  a = fg(a);
	  return Nf(a, b);
	}

	function hg(a, b, c) {
	  a = fg(a);
	  return Of(a, b, c);
	}

	function ig() {
	  if (null !== bg) {
	    var a = bg;
	    bg = null;
	    Pf(a);
	  }

	  jg();
	}

	function jg() {
	  if (!cg && null !== ag) {
	    cg = !0;
	    var a = 0;

	    try {
	      var b = ag;
	      gg(99, function () {
	        for (; a < b.length; a++) {
	          var c = b[a];

	          do c = c(!0); while (null !== c);
	        }
	      });
	      ag = null;
	    } catch (c) {
	      throw null !== ag && (ag = ag.slice(a + 1)), Of(Uf, ig), c;
	    } finally {
	      cg = !1;
	    }
	  }
	}

	var kg = ra.ReactCurrentBatchConfig;

	function lg(a, b) {
	  if (a && a.defaultProps) {
	    b = objectAssign({}, b);
	    a = a.defaultProps;

	    for (var c in a) void 0 === b[c] && (b[c] = a[c]);

	    return b;
	  }

	  return b;
	}

	var mg = Bf(null),
	    ng = null,
	    og = null,
	    pg = null;

	function qg() {
	  pg = og = ng = null;
	}

	function rg(a) {
	  var b = mg.current;
	  H(mg);
	  a.type._context._currentValue = b;
	}

	function sg(a, b) {
	  for (; null !== a;) {
	    var c = a.alternate;
	    if ((a.childLanes & b) === b) {
	      if (null === c || (c.childLanes & b) === b) break;else c.childLanes |= b;
	    } else a.childLanes |= b, null !== c && (c.childLanes |= b);
	    a = a.return;
	  }
	}

	function tg(a, b) {
	  ng = a;
	  pg = og = null;
	  a = a.dependencies;
	  null !== a && null !== a.firstContext && (0 !== (a.lanes & b) && (ug = !0), a.firstContext = null);
	}

	function vg(a, b) {
	  if (pg !== a && !1 !== b && 0 !== b) {
	    if ("number" !== typeof b || 1073741823 === b) pg = a, b = 1073741823;
	    b = {
	      context: a,
	      observedBits: b,
	      next: null
	    };

	    if (null === og) {
	      if (null === ng) throw Error(y(308));
	      og = b;
	      ng.dependencies = {
	        lanes: 0,
	        firstContext: b,
	        responders: null
	      };
	    } else og = og.next = b;
	  }

	  return a._currentValue;
	}

	var wg = !1;

	function xg(a) {
	  a.updateQueue = {
	    baseState: a.memoizedState,
	    firstBaseUpdate: null,
	    lastBaseUpdate: null,
	    shared: {
	      pending: null
	    },
	    effects: null
	  };
	}

	function yg(a, b) {
	  a = a.updateQueue;
	  b.updateQueue === a && (b.updateQueue = {
	    baseState: a.baseState,
	    firstBaseUpdate: a.firstBaseUpdate,
	    lastBaseUpdate: a.lastBaseUpdate,
	    shared: a.shared,
	    effects: a.effects
	  });
	}

	function zg(a, b) {
	  return {
	    eventTime: a,
	    lane: b,
	    tag: 0,
	    payload: null,
	    callback: null,
	    next: null
	  };
	}

	function Ag(a, b) {
	  a = a.updateQueue;

	  if (null !== a) {
	    a = a.shared;
	    var c = a.pending;
	    null === c ? b.next = b : (b.next = c.next, c.next = b);
	    a.pending = b;
	  }
	}

	function Bg(a, b) {
	  var c = a.updateQueue,
	      d = a.alternate;

	  if (null !== d && (d = d.updateQueue, c === d)) {
	    var e = null,
	        f = null;
	    c = c.firstBaseUpdate;

	    if (null !== c) {
	      do {
	        var g = {
	          eventTime: c.eventTime,
	          lane: c.lane,
	          tag: c.tag,
	          payload: c.payload,
	          callback: c.callback,
	          next: null
	        };
	        null === f ? e = f = g : f = f.next = g;
	        c = c.next;
	      } while (null !== c);

	      null === f ? e = f = b : f = f.next = b;
	    } else e = f = b;

	    c = {
	      baseState: d.baseState,
	      firstBaseUpdate: e,
	      lastBaseUpdate: f,
	      shared: d.shared,
	      effects: d.effects
	    };
	    a.updateQueue = c;
	    return;
	  }

	  a = c.lastBaseUpdate;
	  null === a ? c.firstBaseUpdate = b : a.next = b;
	  c.lastBaseUpdate = b;
	}

	function Cg(a, b, c, d) {
	  var e = a.updateQueue;
	  wg = !1;
	  var f = e.firstBaseUpdate,
	      g = e.lastBaseUpdate,
	      h = e.shared.pending;

	  if (null !== h) {
	    e.shared.pending = null;
	    var k = h,
	        l = k.next;
	    k.next = null;
	    null === g ? f = l : g.next = l;
	    g = k;
	    var n = a.alternate;

	    if (null !== n) {
	      n = n.updateQueue;
	      var A = n.lastBaseUpdate;
	      A !== g && (null === A ? n.firstBaseUpdate = l : A.next = l, n.lastBaseUpdate = k);
	    }
	  }

	  if (null !== f) {
	    A = e.baseState;
	    g = 0;
	    n = l = k = null;

	    do {
	      h = f.lane;
	      var p = f.eventTime;

	      if ((d & h) === h) {
	        null !== n && (n = n.next = {
	          eventTime: p,
	          lane: 0,
	          tag: f.tag,
	          payload: f.payload,
	          callback: f.callback,
	          next: null
	        });

	        a: {
	          var C = a,
	              x = f;
	          h = b;
	          p = c;

	          switch (x.tag) {
	            case 1:
	              C = x.payload;

	              if ("function" === typeof C) {
	                A = C.call(p, A, h);
	                break a;
	              }

	              A = C;
	              break a;

	            case 3:
	              C.flags = C.flags & -4097 | 64;

	            case 0:
	              C = x.payload;
	              h = "function" === typeof C ? C.call(p, A, h) : C;
	              if (null === h || void 0 === h) break a;
	              A = objectAssign({}, A, h);
	              break a;

	            case 2:
	              wg = !0;
	          }
	        }

	        null !== f.callback && (a.flags |= 32, h = e.effects, null === h ? e.effects = [f] : h.push(f));
	      } else p = {
	        eventTime: p,
	        lane: h,
	        tag: f.tag,
	        payload: f.payload,
	        callback: f.callback,
	        next: null
	      }, null === n ? (l = n = p, k = A) : n = n.next = p, g |= h;

	      f = f.next;
	      if (null === f) if (h = e.shared.pending, null === h) break;else f = h.next, h.next = null, e.lastBaseUpdate = h, e.shared.pending = null;
	    } while (1);

	    null === n && (k = A);
	    e.baseState = k;
	    e.firstBaseUpdate = l;
	    e.lastBaseUpdate = n;
	    Dg |= g;
	    a.lanes = g;
	    a.memoizedState = A;
	  }
	}

	function Eg(a, b, c) {
	  a = b.effects;
	  b.effects = null;
	  if (null !== a) for (b = 0; b < a.length; b++) {
	    var d = a[b],
	        e = d.callback;

	    if (null !== e) {
	      d.callback = null;
	      d = c;
	      if ("function" !== typeof e) throw Error(y(191, e));
	      e.call(d);
	    }
	  }
	}

	var Fg = new react.Component().refs;

	function Gg(a, b, c, d) {
	  b = a.memoizedState;
	  c = c(d, b);
	  c = null === c || void 0 === c ? b : objectAssign({}, b, c);
	  a.memoizedState = c;
	  0 === a.lanes && (a.updateQueue.baseState = c);
	}

	var Kg = {
	  isMounted: function (a) {
	    return (a = a._reactInternals) ? Zb(a) === a : !1;
	  },
	  enqueueSetState: function (a, b, c) {
	    a = a._reactInternals;
	    var d = Hg(),
	        e = Ig(a),
	        f = zg(d, e);
	    f.payload = b;
	    void 0 !== c && null !== c && (f.callback = c);
	    Ag(a, f);
	    Jg(a, e, d);
	  },
	  enqueueReplaceState: function (a, b, c) {
	    a = a._reactInternals;
	    var d = Hg(),
	        e = Ig(a),
	        f = zg(d, e);
	    f.tag = 1;
	    f.payload = b;
	    void 0 !== c && null !== c && (f.callback = c);
	    Ag(a, f);
	    Jg(a, e, d);
	  },
	  enqueueForceUpdate: function (a, b) {
	    a = a._reactInternals;
	    var c = Hg(),
	        d = Ig(a),
	        e = zg(c, d);
	    e.tag = 2;
	    void 0 !== b && null !== b && (e.callback = b);
	    Ag(a, e);
	    Jg(a, d, c);
	  }
	};

	function Lg(a, b, c, d, e, f, g) {
	  a = a.stateNode;
	  return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !Je(c, d) || !Je(e, f) : !0;
	}

	function Mg(a, b, c) {
	  var d = !1,
	      e = Cf;
	  var f = b.contextType;
	  "object" === typeof f && null !== f ? f = vg(f) : (e = Ff(b) ? Df : M.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Ef(a, e) : Cf);
	  b = new b(c, f);
	  a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;
	  b.updater = Kg;
	  a.stateNode = b;
	  b._reactInternals = a;
	  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);
	  return b;
	}

	function Ng(a, b, c, d) {
	  a = b.state;
	  "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);
	  "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);
	  b.state !== a && Kg.enqueueReplaceState(b, b.state, null);
	}

	function Og(a, b, c, d) {
	  var e = a.stateNode;
	  e.props = c;
	  e.state = a.memoizedState;
	  e.refs = Fg;
	  xg(a);
	  var f = b.contextType;
	  "object" === typeof f && null !== f ? e.context = vg(f) : (f = Ff(b) ? Df : M.current, e.context = Ef(a, f));
	  Cg(a, c, e, d);
	  e.state = a.memoizedState;
	  f = b.getDerivedStateFromProps;
	  "function" === typeof f && (Gg(a, b, f, c), e.state = a.memoizedState);
	  "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && Kg.enqueueReplaceState(e, e.state, null), Cg(a, c, e, d), e.state = a.memoizedState);
	  "function" === typeof e.componentDidMount && (a.flags |= 4);
	}

	var Pg = Array.isArray;

	function Qg(a, b, c) {
	  a = c.ref;

	  if (null !== a && "function" !== typeof a && "object" !== typeof a) {
	    if (c._owner) {
	      c = c._owner;

	      if (c) {
	        if (1 !== c.tag) throw Error(y(309));
	        var d = c.stateNode;
	      }

	      if (!d) throw Error(y(147, a));
	      var e = "" + a;
	      if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === e) return b.ref;

	      b = function (a) {
	        var b = d.refs;
	        b === Fg && (b = d.refs = {});
	        null === a ? delete b[e] : b[e] = a;
	      };

	      b._stringRef = e;
	      return b;
	    }

	    if ("string" !== typeof a) throw Error(y(284));
	    if (!c._owner) throw Error(y(290, a));
	  }

	  return a;
	}

	function Rg(a, b) {
	  if ("textarea" !== a.type) throw Error(y(31, "[object Object]" === Object.prototype.toString.call(b) ? "object with keys {" + Object.keys(b).join(", ") + "}" : b));
	}

	function Sg(a) {
	  function b(b, c) {
	    if (a) {
	      var d = b.lastEffect;
	      null !== d ? (d.nextEffect = c, b.lastEffect = c) : b.firstEffect = b.lastEffect = c;
	      c.nextEffect = null;
	      c.flags = 8;
	    }
	  }

	  function c(c, d) {
	    if (!a) return null;

	    for (; null !== d;) b(c, d), d = d.sibling;

	    return null;
	  }

	  function d(a, b) {
	    for (a = new Map(); null !== b;) null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;

	    return a;
	  }

	  function e(a, b) {
	    a = Tg(a, b);
	    a.index = 0;
	    a.sibling = null;
	    return a;
	  }

	  function f(b, c, d) {
	    b.index = d;
	    if (!a) return c;
	    d = b.alternate;
	    if (null !== d) return d = d.index, d < c ? (b.flags = 2, c) : d;
	    b.flags = 2;
	    return c;
	  }

	  function g(b) {
	    a && null === b.alternate && (b.flags = 2);
	    return b;
	  }

	  function h(a, b, c, d) {
	    if (null === b || 6 !== b.tag) return b = Ug(c, a.mode, d), b.return = a, b;
	    b = e(b, c);
	    b.return = a;
	    return b;
	  }

	  function k(a, b, c, d) {
	    if (null !== b && b.elementType === c.type) return d = e(b, c.props), d.ref = Qg(a, b, c), d.return = a, d;
	    d = Vg(c.type, c.key, c.props, null, a.mode, d);
	    d.ref = Qg(a, b, c);
	    d.return = a;
	    return d;
	  }

	  function l(a, b, c, d) {
	    if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return b = Wg(c, a.mode, d), b.return = a, b;
	    b = e(b, c.children || []);
	    b.return = a;
	    return b;
	  }

	  function n(a, b, c, d, f) {
	    if (null === b || 7 !== b.tag) return b = Xg(c, a.mode, d, f), b.return = a, b;
	    b = e(b, c);
	    b.return = a;
	    return b;
	  }

	  function A(a, b, c) {
	    if ("string" === typeof b || "number" === typeof b) return b = Ug("" + b, a.mode, c), b.return = a, b;

	    if ("object" === typeof b && null !== b) {
	      switch (b.$$typeof) {
	        case sa:
	          return c = Vg(b.type, b.key, b.props, null, a.mode, c), c.ref = Qg(a, null, b), c.return = a, c;

	        case ta:
	          return b = Wg(b, a.mode, c), b.return = a, b;
	      }

	      if (Pg(b) || La(b)) return b = Xg(b, a.mode, c, null), b.return = a, b;
	      Rg(a, b);
	    }

	    return null;
	  }

	  function p(a, b, c, d) {
	    var e = null !== b ? b.key : null;
	    if ("string" === typeof c || "number" === typeof c) return null !== e ? null : h(a, b, "" + c, d);

	    if ("object" === typeof c && null !== c) {
	      switch (c.$$typeof) {
	        case sa:
	          return c.key === e ? c.type === ua ? n(a, b, c.props.children, d, e) : k(a, b, c, d) : null;

	        case ta:
	          return c.key === e ? l(a, b, c, d) : null;
	      }

	      if (Pg(c) || La(c)) return null !== e ? null : n(a, b, c, d, null);
	      Rg(a, c);
	    }

	    return null;
	  }

	  function C(a, b, c, d, e) {
	    if ("string" === typeof d || "number" === typeof d) return a = a.get(c) || null, h(b, a, "" + d, e);

	    if ("object" === typeof d && null !== d) {
	      switch (d.$$typeof) {
	        case sa:
	          return a = a.get(null === d.key ? c : d.key) || null, d.type === ua ? n(b, a, d.props.children, e, d.key) : k(b, a, d, e);

	        case ta:
	          return a = a.get(null === d.key ? c : d.key) || null, l(b, a, d, e);
	      }

	      if (Pg(d) || La(d)) return a = a.get(c) || null, n(b, a, d, e, null);
	      Rg(b, d);
	    }

	    return null;
	  }

	  function x(e, g, h, k) {
	    for (var l = null, t = null, u = g, z = g = 0, q = null; null !== u && z < h.length; z++) {
	      u.index > z ? (q = u, u = null) : q = u.sibling;
	      var n = p(e, u, h[z], k);

	      if (null === n) {
	        null === u && (u = q);
	        break;
	      }

	      a && u && null === n.alternate && b(e, u);
	      g = f(n, g, z);
	      null === t ? l = n : t.sibling = n;
	      t = n;
	      u = q;
	    }

	    if (z === h.length) return c(e, u), l;

	    if (null === u) {
	      for (; z < h.length; z++) u = A(e, h[z], k), null !== u && (g = f(u, g, z), null === t ? l = u : t.sibling = u, t = u);

	      return l;
	    }

	    for (u = d(e, u); z < h.length; z++) q = C(u, e, z, h[z], k), null !== q && (a && null !== q.alternate && u.delete(null === q.key ? z : q.key), g = f(q, g, z), null === t ? l = q : t.sibling = q, t = q);

	    a && u.forEach(function (a) {
	      return b(e, a);
	    });
	    return l;
	  }

	  function w(e, g, h, k) {
	    var l = La(h);
	    if ("function" !== typeof l) throw Error(y(150));
	    h = l.call(h);
	    if (null == h) throw Error(y(151));

	    for (var t = l = null, u = g, z = g = 0, q = null, n = h.next(); null !== u && !n.done; z++, n = h.next()) {
	      u.index > z ? (q = u, u = null) : q = u.sibling;
	      var w = p(e, u, n.value, k);

	      if (null === w) {
	        null === u && (u = q);
	        break;
	      }

	      a && u && null === w.alternate && b(e, u);
	      g = f(w, g, z);
	      null === t ? l = w : t.sibling = w;
	      t = w;
	      u = q;
	    }

	    if (n.done) return c(e, u), l;

	    if (null === u) {
	      for (; !n.done; z++, n = h.next()) n = A(e, n.value, k), null !== n && (g = f(n, g, z), null === t ? l = n : t.sibling = n, t = n);

	      return l;
	    }

	    for (u = d(e, u); !n.done; z++, n = h.next()) n = C(u, e, z, n.value, k), null !== n && (a && null !== n.alternate && u.delete(null === n.key ? z : n.key), g = f(n, g, z), null === t ? l = n : t.sibling = n, t = n);

	    a && u.forEach(function (a) {
	      return b(e, a);
	    });
	    return l;
	  }

	  return function (a, d, f, h) {
	    var k = "object" === typeof f && null !== f && f.type === ua && null === f.key;
	    k && (f = f.props.children);
	    var l = "object" === typeof f && null !== f;
	    if (l) switch (f.$$typeof) {
	      case sa:
	        a: {
	          l = f.key;

	          for (k = d; null !== k;) {
	            if (k.key === l) {
	              switch (k.tag) {
	                case 7:
	                  if (f.type === ua) {
	                    c(a, k.sibling);
	                    d = e(k, f.props.children);
	                    d.return = a;
	                    a = d;
	                    break a;
	                  }

	                  break;

	                default:
	                  if (k.elementType === f.type) {
	                    c(a, k.sibling);
	                    d = e(k, f.props);
	                    d.ref = Qg(a, k, f);
	                    d.return = a;
	                    a = d;
	                    break a;
	                  }

	              }

	              c(a, k);
	              break;
	            } else b(a, k);

	            k = k.sibling;
	          }

	          f.type === ua ? (d = Xg(f.props.children, a.mode, h, f.key), d.return = a, a = d) : (h = Vg(f.type, f.key, f.props, null, a.mode, h), h.ref = Qg(a, d, f), h.return = a, a = h);
	        }

	        return g(a);

	      case ta:
	        a: {
	          for (k = f.key; null !== d;) {
	            if (d.key === k) {
	              if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation === f.implementation) {
	                c(a, d.sibling);
	                d = e(d, f.children || []);
	                d.return = a;
	                a = d;
	                break a;
	              } else {
	                c(a, d);
	                break;
	              }
	            } else b(a, d);
	            d = d.sibling;
	          }

	          d = Wg(f, a.mode, h);
	          d.return = a;
	          a = d;
	        }

	        return g(a);
	    }
	    if ("string" === typeof f || "number" === typeof f) return f = "" + f, null !== d && 6 === d.tag ? (c(a, d.sibling), d = e(d, f), d.return = a, a = d) : (c(a, d), d = Ug(f, a.mode, h), d.return = a, a = d), g(a);
	    if (Pg(f)) return x(a, d, f, h);
	    if (La(f)) return w(a, d, f, h);
	    l && Rg(a, f);
	    if ("undefined" === typeof f && !k) switch (a.tag) {
	      case 1:
	      case 22:
	      case 0:
	      case 11:
	      case 15:
	        throw Error(y(152, Ra(a.type) || "Component"));
	    }
	    return c(a, d);
	  };
	}

	var Yg = Sg(!0),
	    Zg = Sg(!1),
	    $g = {},
	    ah = Bf($g),
	    bh = Bf($g),
	    ch = Bf($g);

	function dh(a) {
	  if (a === $g) throw Error(y(174));
	  return a;
	}

	function eh(a, b) {
	  I(ch, b);
	  I(bh, a);
	  I(ah, $g);
	  a = b.nodeType;

	  switch (a) {
	    case 9:
	    case 11:
	      b = (b = b.documentElement) ? b.namespaceURI : mb(null, "");
	      break;

	    default:
	      a = 8 === a ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = mb(b, a);
	  }

	  H(ah);
	  I(ah, b);
	}

	function fh() {
	  H(ah);
	  H(bh);
	  H(ch);
	}

	function gh(a) {
	  dh(ch.current);
	  var b = dh(ah.current);
	  var c = mb(b, a.type);
	  b !== c && (I(bh, a), I(ah, c));
	}

	function hh(a) {
	  bh.current === a && (H(ah), H(bh));
	}

	var P = Bf(0);

	function ih(a) {
	  for (var b = a; null !== b;) {
	    if (13 === b.tag) {
	      var c = b.memoizedState;
	      if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data)) return b;
	    } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
	      if (0 !== (b.flags & 64)) return b;
	    } else if (null !== b.child) {
	      b.child.return = b;
	      b = b.child;
	      continue;
	    }

	    if (b === a) break;

	    for (; null === b.sibling;) {
	      if (null === b.return || b.return === a) return null;
	      b = b.return;
	    }

	    b.sibling.return = b.return;
	    b = b.sibling;
	  }

	  return null;
	}

	var jh = null,
	    kh = null,
	    lh = !1;

	function mh(a, b) {
	  var c = nh(5, null, null, 0);
	  c.elementType = "DELETED";
	  c.type = "DELETED";
	  c.stateNode = b;
	  c.return = a;
	  c.flags = 8;
	  null !== a.lastEffect ? (a.lastEffect.nextEffect = c, a.lastEffect = c) : a.firstEffect = a.lastEffect = c;
	}

	function oh(a, b) {
	  switch (a.tag) {
	    case 5:
	      var c = a.type;
	      b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;
	      return null !== b ? (a.stateNode = b, !0) : !1;

	    case 6:
	      return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, !0) : !1;

	    case 13:
	      return !1;

	    default:
	      return !1;
	  }
	}

	function ph(a) {
	  if (lh) {
	    var b = kh;

	    if (b) {
	      var c = b;

	      if (!oh(a, b)) {
	        b = rf(c.nextSibling);

	        if (!b || !oh(a, b)) {
	          a.flags = a.flags & -1025 | 2;
	          lh = !1;
	          jh = a;
	          return;
	        }

	        mh(jh, c);
	      }

	      jh = a;
	      kh = rf(b.firstChild);
	    } else a.flags = a.flags & -1025 | 2, lh = !1, jh = a;
	  }
	}

	function qh(a) {
	  for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag;) a = a.return;

	  jh = a;
	}

	function rh(a) {
	  if (a !== jh) return !1;
	  if (!lh) return qh(a), lh = !0, !1;
	  var b = a.type;
	  if (5 !== a.tag || "head" !== b && "body" !== b && !nf(b, a.memoizedProps)) for (b = kh; b;) mh(a, b), b = rf(b.nextSibling);
	  qh(a);

	  if (13 === a.tag) {
	    a = a.memoizedState;
	    a = null !== a ? a.dehydrated : null;
	    if (!a) throw Error(y(317));

	    a: {
	      a = a.nextSibling;

	      for (b = 0; a;) {
	        if (8 === a.nodeType) {
	          var c = a.data;

	          if ("/$" === c) {
	            if (0 === b) {
	              kh = rf(a.nextSibling);
	              break a;
	            }

	            b--;
	          } else "$" !== c && "$!" !== c && "$?" !== c || b++;
	        }

	        a = a.nextSibling;
	      }

	      kh = null;
	    }
	  } else kh = jh ? rf(a.stateNode.nextSibling) : null;

	  return !0;
	}

	function sh() {
	  kh = jh = null;
	  lh = !1;
	}

	var th = [];

	function uh() {
	  for (var a = 0; a < th.length; a++) th[a]._workInProgressVersionPrimary = null;

	  th.length = 0;
	}

	var vh = ra.ReactCurrentDispatcher,
	    wh = ra.ReactCurrentBatchConfig,
	    xh = 0,
	    R = null,
	    S = null,
	    T = null,
	    yh = !1,
	    zh = !1;

	function Ah() {
	  throw Error(y(321));
	}

	function Bh(a, b) {
	  if (null === b) return !1;

	  for (var c = 0; c < b.length && c < a.length; c++) if (!He(a[c], b[c])) return !1;

	  return !0;
	}

	function Ch(a, b, c, d, e, f) {
	  xh = f;
	  R = b;
	  b.memoizedState = null;
	  b.updateQueue = null;
	  b.lanes = 0;
	  vh.current = null === a || null === a.memoizedState ? Dh : Eh;
	  a = c(d, e);

	  if (zh) {
	    f = 0;

	    do {
	      zh = !1;
	      if (!(25 > f)) throw Error(y(301));
	      f += 1;
	      T = S = null;
	      b.updateQueue = null;
	      vh.current = Fh;
	      a = c(d, e);
	    } while (zh);
	  }

	  vh.current = Gh;
	  b = null !== S && null !== S.next;
	  xh = 0;
	  T = S = R = null;
	  yh = !1;
	  if (b) throw Error(y(300));
	  return a;
	}

	function Hh() {
	  var a = {
	    memoizedState: null,
	    baseState: null,
	    baseQueue: null,
	    queue: null,
	    next: null
	  };
	  null === T ? R.memoizedState = T = a : T = T.next = a;
	  return T;
	}

	function Ih() {
	  if (null === S) {
	    var a = R.alternate;
	    a = null !== a ? a.memoizedState : null;
	  } else a = S.next;

	  var b = null === T ? R.memoizedState : T.next;
	  if (null !== b) T = b, S = a;else {
	    if (null === a) throw Error(y(310));
	    S = a;
	    a = {
	      memoizedState: S.memoizedState,
	      baseState: S.baseState,
	      baseQueue: S.baseQueue,
	      queue: S.queue,
	      next: null
	    };
	    null === T ? R.memoizedState = T = a : T = T.next = a;
	  }
	  return T;
	}

	function Jh(a, b) {
	  return "function" === typeof b ? b(a) : b;
	}

	function Kh(a) {
	  var b = Ih(),
	      c = b.queue;
	  if (null === c) throw Error(y(311));
	  c.lastRenderedReducer = a;
	  var d = S,
	      e = d.baseQueue,
	      f = c.pending;

	  if (null !== f) {
	    if (null !== e) {
	      var g = e.next;
	      e.next = f.next;
	      f.next = g;
	    }

	    d.baseQueue = e = f;
	    c.pending = null;
	  }

	  if (null !== e) {
	    e = e.next;
	    d = d.baseState;
	    var h = g = f = null,
	        k = e;

	    do {
	      var l = k.lane;
	      if ((xh & l) === l) null !== h && (h = h.next = {
	        lane: 0,
	        action: k.action,
	        eagerReducer: k.eagerReducer,
	        eagerState: k.eagerState,
	        next: null
	      }), d = k.eagerReducer === a ? k.eagerState : a(d, k.action);else {
	        var n = {
	          lane: l,
	          action: k.action,
	          eagerReducer: k.eagerReducer,
	          eagerState: k.eagerState,
	          next: null
	        };
	        null === h ? (g = h = n, f = d) : h = h.next = n;
	        R.lanes |= l;
	        Dg |= l;
	      }
	      k = k.next;
	    } while (null !== k && k !== e);

	    null === h ? f = d : h.next = g;
	    He(d, b.memoizedState) || (ug = !0);
	    b.memoizedState = d;
	    b.baseState = f;
	    b.baseQueue = h;
	    c.lastRenderedState = d;
	  }

	  return [b.memoizedState, c.dispatch];
	}

	function Lh(a) {
	  var b = Ih(),
	      c = b.queue;
	  if (null === c) throw Error(y(311));
	  c.lastRenderedReducer = a;
	  var d = c.dispatch,
	      e = c.pending,
	      f = b.memoizedState;

	  if (null !== e) {
	    c.pending = null;
	    var g = e = e.next;

	    do f = a(f, g.action), g = g.next; while (g !== e);

	    He(f, b.memoizedState) || (ug = !0);
	    b.memoizedState = f;
	    null === b.baseQueue && (b.baseState = f);
	    c.lastRenderedState = f;
	  }

	  return [f, d];
	}

	function Mh(a, b, c) {
	  var d = b._getVersion;
	  d = d(b._source);
	  var e = b._workInProgressVersionPrimary;
	  if (null !== e) a = e === d;else if (a = a.mutableReadLanes, a = (xh & a) === a) b._workInProgressVersionPrimary = d, th.push(b);
	  if (a) return c(b._source);
	  th.push(b);
	  throw Error(y(350));
	}

	function Nh(a, b, c, d) {
	  var e = U;
	  if (null === e) throw Error(y(349));
	  var f = b._getVersion,
	      g = f(b._source),
	      h = vh.current,
	      k = h.useState(function () {
	    return Mh(e, b, c);
	  }),
	      l = k[1],
	      n = k[0];
	  k = T;
	  var A = a.memoizedState,
	      p = A.refs,
	      C = p.getSnapshot,
	      x = A.source;
	  A = A.subscribe;
	  var w = R;
	  a.memoizedState = {
	    refs: p,
	    source: b,
	    subscribe: d
	  };
	  h.useEffect(function () {
	    p.getSnapshot = c;
	    p.setSnapshot = l;
	    var a = f(b._source);

	    if (!He(g, a)) {
	      a = c(b._source);
	      He(n, a) || (l(a), a = Ig(w), e.mutableReadLanes |= a & e.pendingLanes);
	      a = e.mutableReadLanes;
	      e.entangledLanes |= a;

	      for (var d = e.entanglements, h = a; 0 < h;) {
	        var k = 31 - Vc(h),
	            v = 1 << k;
	        d[k] |= a;
	        h &= ~v;
	      }
	    }
	  }, [c, b, d]);
	  h.useEffect(function () {
	    return d(b._source, function () {
	      var a = p.getSnapshot,
	          c = p.setSnapshot;

	      try {
	        c(a(b._source));
	        var d = Ig(w);
	        e.mutableReadLanes |= d & e.pendingLanes;
	      } catch (q) {
	        c(function () {
	          throw q;
	        });
	      }
	    });
	  }, [b, d]);
	  He(C, c) && He(x, b) && He(A, d) || (a = {
	    pending: null,
	    dispatch: null,
	    lastRenderedReducer: Jh,
	    lastRenderedState: n
	  }, a.dispatch = l = Oh.bind(null, R, a), k.queue = a, k.baseQueue = null, n = Mh(e, b, c), k.memoizedState = k.baseState = n);
	  return n;
	}

	function Ph(a, b, c) {
	  var d = Ih();
	  return Nh(d, a, b, c);
	}

	function Qh(a) {
	  var b = Hh();
	  "function" === typeof a && (a = a());
	  b.memoizedState = b.baseState = a;
	  a = b.queue = {
	    pending: null,
	    dispatch: null,
	    lastRenderedReducer: Jh,
	    lastRenderedState: a
	  };
	  a = a.dispatch = Oh.bind(null, R, a);
	  return [b.memoizedState, a];
	}

	function Rh(a, b, c, d) {
	  a = {
	    tag: a,
	    create: b,
	    destroy: c,
	    deps: d,
	    next: null
	  };
	  b = R.updateQueue;
	  null === b ? (b = {
	    lastEffect: null
	  }, R.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));
	  return a;
	}

	function Sh(a) {
	  var b = Hh();
	  a = {
	    current: a
	  };
	  return b.memoizedState = a;
	}

	function Th() {
	  return Ih().memoizedState;
	}

	function Uh(a, b, c, d) {
	  var e = Hh();
	  R.flags |= a;
	  e.memoizedState = Rh(1 | b, c, void 0, void 0 === d ? null : d);
	}

	function Vh(a, b, c, d) {
	  var e = Ih();
	  d = void 0 === d ? null : d;
	  var f = void 0;

	  if (null !== S) {
	    var g = S.memoizedState;
	    f = g.destroy;

	    if (null !== d && Bh(d, g.deps)) {
	      Rh(b, c, f, d);
	      return;
	    }
	  }

	  R.flags |= a;
	  e.memoizedState = Rh(1 | b, c, f, d);
	}

	function Wh(a, b) {
	  return Uh(516, 4, a, b);
	}

	function Xh(a, b) {
	  return Vh(516, 4, a, b);
	}

	function Yh(a, b) {
	  return Vh(4, 2, a, b);
	}

	function Zh(a, b) {
	  if ("function" === typeof b) return a = a(), b(a), function () {
	    b(null);
	  };
	  if (null !== b && void 0 !== b) return a = a(), b.current = a, function () {
	    b.current = null;
	  };
	}

	function $h(a, b, c) {
	  c = null !== c && void 0 !== c ? c.concat([a]) : null;
	  return Vh(4, 2, Zh.bind(null, b, a), c);
	}

	function ai() {}

	function bi(a, b) {
	  var c = Ih();
	  b = void 0 === b ? null : b;
	  var d = c.memoizedState;
	  if (null !== d && null !== b && Bh(b, d[1])) return d[0];
	  c.memoizedState = [a, b];
	  return a;
	}

	function ci(a, b) {
	  var c = Ih();
	  b = void 0 === b ? null : b;
	  var d = c.memoizedState;
	  if (null !== d && null !== b && Bh(b, d[1])) return d[0];
	  a = a();
	  c.memoizedState = [a, b];
	  return a;
	}

	function di(a, b) {
	  var c = eg();
	  gg(98 > c ? 98 : c, function () {
	    a(!0);
	  });
	  gg(97 < c ? 97 : c, function () {
	    var c = wh.transition;
	    wh.transition = 1;

	    try {
	      a(!1), b();
	    } finally {
	      wh.transition = c;
	    }
	  });
	}

	function Oh(a, b, c) {
	  var d = Hg(),
	      e = Ig(a),
	      f = {
	    lane: e,
	    action: c,
	    eagerReducer: null,
	    eagerState: null,
	    next: null
	  },
	      g = b.pending;
	  null === g ? f.next = f : (f.next = g.next, g.next = f);
	  b.pending = f;
	  g = a.alternate;
	  if (a === R || null !== g && g === R) zh = yh = !0;else {
	    if (0 === a.lanes && (null === g || 0 === g.lanes) && (g = b.lastRenderedReducer, null !== g)) try {
	      var h = b.lastRenderedState,
	          k = g(h, c);
	      f.eagerReducer = g;
	      f.eagerState = k;
	      if (He(k, h)) return;
	    } catch (l) {} finally {}
	    Jg(a, e, d);
	  }
	}

	var Gh = {
	  readContext: vg,
	  useCallback: Ah,
	  useContext: Ah,
	  useEffect: Ah,
	  useImperativeHandle: Ah,
	  useLayoutEffect: Ah,
	  useMemo: Ah,
	  useReducer: Ah,
	  useRef: Ah,
	  useState: Ah,
	  useDebugValue: Ah,
	  useDeferredValue: Ah,
	  useTransition: Ah,
	  useMutableSource: Ah,
	  useOpaqueIdentifier: Ah,
	  unstable_isNewReconciler: !1
	},
	    Dh = {
	  readContext: vg,
	  useCallback: function (a, b) {
	    Hh().memoizedState = [a, void 0 === b ? null : b];
	    return a;
	  },
	  useContext: vg,
	  useEffect: Wh,
	  useImperativeHandle: function (a, b, c) {
	    c = null !== c && void 0 !== c ? c.concat([a]) : null;
	    return Uh(4, 2, Zh.bind(null, b, a), c);
	  },
	  useLayoutEffect: function (a, b) {
	    return Uh(4, 2, a, b);
	  },
	  useMemo: function (a, b) {
	    var c = Hh();
	    b = void 0 === b ? null : b;
	    a = a();
	    c.memoizedState = [a, b];
	    return a;
	  },
	  useReducer: function (a, b, c) {
	    var d = Hh();
	    b = void 0 !== c ? c(b) : b;
	    d.memoizedState = d.baseState = b;
	    a = d.queue = {
	      pending: null,
	      dispatch: null,
	      lastRenderedReducer: a,
	      lastRenderedState: b
	    };
	    a = a.dispatch = Oh.bind(null, R, a);
	    return [d.memoizedState, a];
	  },
	  useRef: Sh,
	  useState: Qh,
	  useDebugValue: ai,
	  useDeferredValue: function (a) {
	    var b = Qh(a),
	        c = b[0],
	        d = b[1];
	    Wh(function () {
	      var b = wh.transition;
	      wh.transition = 1;

	      try {
	        d(a);
	      } finally {
	        wh.transition = b;
	      }
	    }, [a]);
	    return c;
	  },
	  useTransition: function () {
	    var a = Qh(!1),
	        b = a[0];
	    a = di.bind(null, a[1]);
	    Sh(a);
	    return [a, b];
	  },
	  useMutableSource: function (a, b, c) {
	    var d = Hh();
	    d.memoizedState = {
	      refs: {
	        getSnapshot: b,
	        setSnapshot: null
	      },
	      source: a,
	      subscribe: c
	    };
	    return Nh(d, a, b, c);
	  },
	  useOpaqueIdentifier: function () {
	    if (lh) {
	      var a = !1,
	          b = uf(function () {
	        a || (a = !0, c("r:" + (tf++).toString(36)));
	        throw Error(y(355));
	      }),
	          c = Qh(b)[1];
	      0 === (R.mode & 2) && (R.flags |= 516, Rh(5, function () {
	        c("r:" + (tf++).toString(36));
	      }, void 0, null));
	      return b;
	    }

	    b = "r:" + (tf++).toString(36);
	    Qh(b);
	    return b;
	  },
	  unstable_isNewReconciler: !1
	},
	    Eh = {
	  readContext: vg,
	  useCallback: bi,
	  useContext: vg,
	  useEffect: Xh,
	  useImperativeHandle: $h,
	  useLayoutEffect: Yh,
	  useMemo: ci,
	  useReducer: Kh,
	  useRef: Th,
	  useState: function () {
	    return Kh(Jh);
	  },
	  useDebugValue: ai,
	  useDeferredValue: function (a) {
	    var b = Kh(Jh),
	        c = b[0],
	        d = b[1];
	    Xh(function () {
	      var b = wh.transition;
	      wh.transition = 1;

	      try {
	        d(a);
	      } finally {
	        wh.transition = b;
	      }
	    }, [a]);
	    return c;
	  },
	  useTransition: function () {
	    var a = Kh(Jh)[0];
	    return [Th().current, a];
	  },
	  useMutableSource: Ph,
	  useOpaqueIdentifier: function () {
	    return Kh(Jh)[0];
	  },
	  unstable_isNewReconciler: !1
	},
	    Fh = {
	  readContext: vg,
	  useCallback: bi,
	  useContext: vg,
	  useEffect: Xh,
	  useImperativeHandle: $h,
	  useLayoutEffect: Yh,
	  useMemo: ci,
	  useReducer: Lh,
	  useRef: Th,
	  useState: function () {
	    return Lh(Jh);
	  },
	  useDebugValue: ai,
	  useDeferredValue: function (a) {
	    var b = Lh(Jh),
	        c = b[0],
	        d = b[1];
	    Xh(function () {
	      var b = wh.transition;
	      wh.transition = 1;

	      try {
	        d(a);
	      } finally {
	        wh.transition = b;
	      }
	    }, [a]);
	    return c;
	  },
	  useTransition: function () {
	    var a = Lh(Jh)[0];
	    return [Th().current, a];
	  },
	  useMutableSource: Ph,
	  useOpaqueIdentifier: function () {
	    return Lh(Jh)[0];
	  },
	  unstable_isNewReconciler: !1
	},
	    ei = ra.ReactCurrentOwner,
	    ug = !1;

	function fi(a, b, c, d) {
	  b.child = null === a ? Zg(b, null, c, d) : Yg(b, a.child, c, d);
	}

	function gi(a, b, c, d, e) {
	  c = c.render;
	  var f = b.ref;
	  tg(b, e);
	  d = Ch(a, b, c, d, f, e);
	  if (null !== a && !ug) return b.updateQueue = a.updateQueue, b.flags &= -517, a.lanes &= ~e, hi(a, b, e);
	  b.flags |= 1;
	  fi(a, b, d, e);
	  return b.child;
	}

	function ii(a, b, c, d, e, f) {
	  if (null === a) {
	    var g = c.type;
	    if ("function" === typeof g && !ji(g) && void 0 === g.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = g, ki(a, b, g, d, e, f);
	    a = Vg(c.type, null, d, b, b.mode, f);
	    a.ref = b.ref;
	    a.return = b;
	    return b.child = a;
	  }

	  g = a.child;
	  if (0 === (e & f) && (e = g.memoizedProps, c = c.compare, c = null !== c ? c : Je, c(e, d) && a.ref === b.ref)) return hi(a, b, f);
	  b.flags |= 1;
	  a = Tg(g, d);
	  a.ref = b.ref;
	  a.return = b;
	  return b.child = a;
	}

	function ki(a, b, c, d, e, f) {
	  if (null !== a && Je(a.memoizedProps, d) && a.ref === b.ref) if (ug = !1, 0 !== (f & e)) 0 !== (a.flags & 16384) && (ug = !0);else return b.lanes = a.lanes, hi(a, b, f);
	  return li(a, b, c, d, f);
	}

	function mi(a, b, c) {
	  var d = b.pendingProps,
	      e = d.children,
	      f = null !== a ? a.memoizedState : null;
	  if ("hidden" === d.mode || "unstable-defer-without-hiding" === d.mode) {
	    if (0 === (b.mode & 4)) b.memoizedState = {
	      baseLanes: 0
	    }, ni(b, c);else if (0 !== (c & 1073741824)) b.memoizedState = {
	      baseLanes: 0
	    }, ni(b, null !== f ? f.baseLanes : c);else return a = null !== f ? f.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = {
	      baseLanes: a
	    }, ni(b, a), null;
	  } else null !== f ? (d = f.baseLanes | c, b.memoizedState = null) : d = c, ni(b, d);
	  fi(a, b, e, c);
	  return b.child;
	}

	function oi(a, b) {
	  var c = b.ref;
	  if (null === a && null !== c || null !== a && a.ref !== c) b.flags |= 128;
	}

	function li(a, b, c, d, e) {
	  var f = Ff(c) ? Df : M.current;
	  f = Ef(b, f);
	  tg(b, e);
	  c = Ch(a, b, c, d, f, e);
	  if (null !== a && !ug) return b.updateQueue = a.updateQueue, b.flags &= -517, a.lanes &= ~e, hi(a, b, e);
	  b.flags |= 1;
	  fi(a, b, c, e);
	  return b.child;
	}

	function pi(a, b, c, d, e) {
	  if (Ff(c)) {
	    var f = !0;
	    Jf(b);
	  } else f = !1;

	  tg(b, e);
	  if (null === b.stateNode) null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2), Mg(b, c, d), Og(b, c, d, e), d = !0;else if (null === a) {
	    var g = b.stateNode,
	        h = b.memoizedProps;
	    g.props = h;
	    var k = g.context,
	        l = c.contextType;
	    "object" === typeof l && null !== l ? l = vg(l) : (l = Ff(c) ? Df : M.current, l = Ef(b, l));
	    var n = c.getDerivedStateFromProps,
	        A = "function" === typeof n || "function" === typeof g.getSnapshotBeforeUpdate;
	    A || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && Ng(b, g, d, l);
	    wg = !1;
	    var p = b.memoizedState;
	    g.state = p;
	    Cg(b, d, g, e);
	    k = b.memoizedState;
	    h !== d || p !== k || N.current || wg ? ("function" === typeof n && (Gg(b, c, n, d), k = b.memoizedState), (h = wg || Lg(b, c, h, d, p, k, l)) ? (A || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.flags |= 4)) : ("function" === typeof g.componentDidMount && (b.flags |= 4), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.flags |= 4), d = !1);
	  } else {
	    g = b.stateNode;
	    yg(a, b);
	    h = b.memoizedProps;
	    l = b.type === b.elementType ? h : lg(b.type, h);
	    g.props = l;
	    A = b.pendingProps;
	    p = g.context;
	    k = c.contextType;
	    "object" === typeof k && null !== k ? k = vg(k) : (k = Ff(c) ? Df : M.current, k = Ef(b, k));
	    var C = c.getDerivedStateFromProps;
	    (n = "function" === typeof C || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== A || p !== k) && Ng(b, g, d, k);
	    wg = !1;
	    p = b.memoizedState;
	    g.state = p;
	    Cg(b, d, g, e);
	    var x = b.memoizedState;
	    h !== A || p !== x || N.current || wg ? ("function" === typeof C && (Gg(b, c, C, d), x = b.memoizedState), (l = wg || Lg(b, c, l, d, p, x, k)) ? (n || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, x, k), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, x, k)), "function" === typeof g.componentDidUpdate && (b.flags |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.flags |= 256)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 256), b.memoizedProps = d, b.memoizedState = x), g.props = d, g.state = x, g.context = k, d = l) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && p === a.memoizedState || (b.flags |= 256), d = !1);
	  }
	  return qi(a, b, c, d, f, e);
	}

	function qi(a, b, c, d, e, f) {
	  oi(a, b);
	  var g = 0 !== (b.flags & 64);
	  if (!d && !g) return e && Kf(b, c, !1), hi(a, b, f);
	  d = b.stateNode;
	  ei.current = b;
	  var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();
	  b.flags |= 1;
	  null !== a && g ? (b.child = Yg(b, a.child, null, f), b.child = Yg(b, null, h, f)) : fi(a, b, h, f);
	  b.memoizedState = d.state;
	  e && Kf(b, c, !0);
	  return b.child;
	}

	function ri(a) {
	  var b = a.stateNode;
	  b.pendingContext ? Hf(a, b.pendingContext, b.pendingContext !== b.context) : b.context && Hf(a, b.context, !1);
	  eh(a, b.containerInfo);
	}

	var si = {
	  dehydrated: null,
	  retryLane: 0
	};

	function ti(a, b, c) {
	  var d = b.pendingProps,
	      e = P.current,
	      f = !1,
	      g;
	  (g = 0 !== (b.flags & 64)) || (g = null !== a && null === a.memoizedState ? !1 : 0 !== (e & 2));
	  g ? (f = !0, b.flags &= -65) : null !== a && null === a.memoizedState || void 0 === d.fallback || !0 === d.unstable_avoidThisFallback || (e |= 1);
	  I(P, e & 1);

	  if (null === a) {
	    void 0 !== d.fallback && ph(b);
	    a = d.children;
	    e = d.fallback;
	    if (f) return a = ui(b, a, e, c), b.child.memoizedState = {
	      baseLanes: c
	    }, b.memoizedState = si, a;
	    if ("number" === typeof d.unstable_expectedLoadTime) return a = ui(b, a, e, c), b.child.memoizedState = {
	      baseLanes: c
	    }, b.memoizedState = si, b.lanes = 33554432, a;
	    c = vi({
	      mode: "visible",
	      children: a
	    }, b.mode, c, null);
	    c.return = b;
	    return b.child = c;
	  }

	  if (null !== a.memoizedState) {
	    if (f) return d = wi(a, b, d.children, d.fallback, c), f = b.child, e = a.child.memoizedState, f.memoizedState = null === e ? {
	      baseLanes: c
	    } : {
	      baseLanes: e.baseLanes | c
	    }, f.childLanes = a.childLanes & ~c, b.memoizedState = si, d;
	    c = xi(a, b, d.children, c);
	    b.memoizedState = null;
	    return c;
	  }

	  if (f) return d = wi(a, b, d.children, d.fallback, c), f = b.child, e = a.child.memoizedState, f.memoizedState = null === e ? {
	    baseLanes: c
	  } : {
	    baseLanes: e.baseLanes | c
	  }, f.childLanes = a.childLanes & ~c, b.memoizedState = si, d;
	  c = xi(a, b, d.children, c);
	  b.memoizedState = null;
	  return c;
	}

	function ui(a, b, c, d) {
	  var e = a.mode,
	      f = a.child;
	  b = {
	    mode: "hidden",
	    children: b
	  };
	  0 === (e & 2) && null !== f ? (f.childLanes = 0, f.pendingProps = b) : f = vi(b, e, 0, null);
	  c = Xg(c, e, d, null);
	  f.return = a;
	  c.return = a;
	  f.sibling = c;
	  a.child = f;
	  return c;
	}

	function xi(a, b, c, d) {
	  var e = a.child;
	  a = e.sibling;
	  c = Tg(e, {
	    mode: "visible",
	    children: c
	  });
	  0 === (b.mode & 2) && (c.lanes = d);
	  c.return = b;
	  c.sibling = null;
	  null !== a && (a.nextEffect = null, a.flags = 8, b.firstEffect = b.lastEffect = a);
	  return b.child = c;
	}

	function wi(a, b, c, d, e) {
	  var f = b.mode,
	      g = a.child;
	  a = g.sibling;
	  var h = {
	    mode: "hidden",
	    children: c
	  };
	  0 === (f & 2) && b.child !== g ? (c = b.child, c.childLanes = 0, c.pendingProps = h, g = c.lastEffect, null !== g ? (b.firstEffect = c.firstEffect, b.lastEffect = g, g.nextEffect = null) : b.firstEffect = b.lastEffect = null) : c = Tg(g, h);
	  null !== a ? d = Tg(a, d) : (d = Xg(d, f, e, null), d.flags |= 2);
	  d.return = b;
	  c.return = b;
	  c.sibling = d;
	  b.child = c;
	  return d;
	}

	function yi(a, b) {
	  a.lanes |= b;
	  var c = a.alternate;
	  null !== c && (c.lanes |= b);
	  sg(a.return, b);
	}

	function zi(a, b, c, d, e, f) {
	  var g = a.memoizedState;
	  null === g ? a.memoizedState = {
	    isBackwards: b,
	    rendering: null,
	    renderingStartTime: 0,
	    last: d,
	    tail: c,
	    tailMode: e,
	    lastEffect: f
	  } : (g.isBackwards = b, g.rendering = null, g.renderingStartTime = 0, g.last = d, g.tail = c, g.tailMode = e, g.lastEffect = f);
	}

	function Ai(a, b, c) {
	  var d = b.pendingProps,
	      e = d.revealOrder,
	      f = d.tail;
	  fi(a, b, d.children, c);
	  d = P.current;
	  if (0 !== (d & 2)) d = d & 1 | 2, b.flags |= 64;else {
	    if (null !== a && 0 !== (a.flags & 64)) a: for (a = b.child; null !== a;) {
	      if (13 === a.tag) null !== a.memoizedState && yi(a, c);else if (19 === a.tag) yi(a, c);else if (null !== a.child) {
	        a.child.return = a;
	        a = a.child;
	        continue;
	      }
	      if (a === b) break a;

	      for (; null === a.sibling;) {
	        if (null === a.return || a.return === b) break a;
	        a = a.return;
	      }

	      a.sibling.return = a.return;
	      a = a.sibling;
	    }
	    d &= 1;
	  }
	  I(P, d);
	  if (0 === (b.mode & 2)) b.memoizedState = null;else switch (e) {
	    case "forwards":
	      c = b.child;

	      for (e = null; null !== c;) a = c.alternate, null !== a && null === ih(a) && (e = c), c = c.sibling;

	      c = e;
	      null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);
	      zi(b, !1, e, c, f, b.lastEffect);
	      break;

	    case "backwards":
	      c = null;
	      e = b.child;

	      for (b.child = null; null !== e;) {
	        a = e.alternate;

	        if (null !== a && null === ih(a)) {
	          b.child = e;
	          break;
	        }

	        a = e.sibling;
	        e.sibling = c;
	        c = e;
	        e = a;
	      }

	      zi(b, !0, c, null, f, b.lastEffect);
	      break;

	    case "together":
	      zi(b, !1, null, null, void 0, b.lastEffect);
	      break;

	    default:
	      b.memoizedState = null;
	  }
	  return b.child;
	}

	function hi(a, b, c) {
	  null !== a && (b.dependencies = a.dependencies);
	  Dg |= b.lanes;

	  if (0 !== (c & b.childLanes)) {
	    if (null !== a && b.child !== a.child) throw Error(y(153));

	    if (null !== b.child) {
	      a = b.child;
	      c = Tg(a, a.pendingProps);
	      b.child = c;

	      for (c.return = b; null !== a.sibling;) a = a.sibling, c = c.sibling = Tg(a, a.pendingProps), c.return = b;

	      c.sibling = null;
	    }

	    return b.child;
	  }

	  return null;
	}

	var Bi, Ci, Di, Ei;

	Bi = function (a, b) {
	  for (var c = b.child; null !== c;) {
	    if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);else if (4 !== c.tag && null !== c.child) {
	      c.child.return = c;
	      c = c.child;
	      continue;
	    }
	    if (c === b) break;

	    for (; null === c.sibling;) {
	      if (null === c.return || c.return === b) return;
	      c = c.return;
	    }

	    c.sibling.return = c.return;
	    c = c.sibling;
	  }
	};

	Ci = function () {};

	Di = function (a, b, c, d) {
	  var e = a.memoizedProps;

	  if (e !== d) {
	    a = b.stateNode;
	    dh(ah.current);
	    var f = null;

	    switch (c) {
	      case "input":
	        e = Ya(a, e);
	        d = Ya(a, d);
	        f = [];
	        break;

	      case "option":
	        e = eb(a, e);
	        d = eb(a, d);
	        f = [];
	        break;

	      case "select":
	        e = objectAssign({}, e, {
	          value: void 0
	        });
	        d = objectAssign({}, d, {
	          value: void 0
	        });
	        f = [];
	        break;

	      case "textarea":
	        e = gb(a, e);
	        d = gb(a, d);
	        f = [];
	        break;

	      default:
	        "function" !== typeof e.onClick && "function" === typeof d.onClick && (a.onclick = jf);
	    }

	    vb(c, d);
	    var g;
	    c = null;

	    for (l in e) if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && null != e[l]) if ("style" === l) {
	      var h = e[l];

	      for (g in h) h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");
	    } else "dangerouslySetInnerHTML" !== l && "children" !== l && "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && "autoFocus" !== l && (ca.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));

	    for (l in d) {
	      var k = d[l];
	      h = null != e ? e[l] : void 0;
	      if (d.hasOwnProperty(l) && k !== h && (null != k || null != h)) if ("style" === l) {
	        if (h) {
	          for (g in h) !h.hasOwnProperty(g) || k && k.hasOwnProperty(g) || (c || (c = {}), c[g] = "");

	          for (g in k) k.hasOwnProperty(g) && h[g] !== k[g] && (c || (c = {}), c[g] = k[g]);
	        } else c || (f || (f = []), f.push(l, c)), c = k;
	      } else "dangerouslySetInnerHTML" === l ? (k = k ? k.__html : void 0, h = h ? h.__html : void 0, null != k && h !== k && (f = f || []).push(l, k)) : "children" === l ? "string" !== typeof k && "number" !== typeof k || (f = f || []).push(l, "" + k) : "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && (ca.hasOwnProperty(l) ? (null != k && "onScroll" === l && G("scroll", a), f || h === k || (f = [])) : "object" === typeof k && null !== k && k.$$typeof === Ga ? k.toString() : (f = f || []).push(l, k));
	    }

	    c && (f = f || []).push("style", c);
	    var l = f;
	    if (b.updateQueue = l) b.flags |= 4;
	  }
	};

	Ei = function (a, b, c, d) {
	  c !== d && (b.flags |= 4);
	};

	function Fi(a, b) {
	  if (!lh) switch (a.tailMode) {
	    case "hidden":
	      b = a.tail;

	      for (var c = null; null !== b;) null !== b.alternate && (c = b), b = b.sibling;

	      null === c ? a.tail = null : c.sibling = null;
	      break;

	    case "collapsed":
	      c = a.tail;

	      for (var d = null; null !== c;) null !== c.alternate && (d = c), c = c.sibling;

	      null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;
	  }
	}

	function Gi(a, b, c) {
	  var d = b.pendingProps;

	  switch (b.tag) {
	    case 2:
	    case 16:
	    case 15:
	    case 0:
	    case 11:
	    case 7:
	    case 8:
	    case 12:
	    case 9:
	    case 14:
	      return null;

	    case 1:
	      return Ff(b.type) && Gf(), null;

	    case 3:
	      fh();
	      H(N);
	      H(M);
	      uh();
	      d = b.stateNode;
	      d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);
	      if (null === a || null === a.child) rh(b) ? b.flags |= 4 : d.hydrate || (b.flags |= 256);
	      Ci(b);
	      return null;

	    case 5:
	      hh(b);
	      var e = dh(ch.current);
	      c = b.type;
	      if (null !== a && null != b.stateNode) Di(a, b, c, d, e), a.ref !== b.ref && (b.flags |= 128);else {
	        if (!d) {
	          if (null === b.stateNode) throw Error(y(166));
	          return null;
	        }

	        a = dh(ah.current);

	        if (rh(b)) {
	          d = b.stateNode;
	          c = b.type;
	          var f = b.memoizedProps;
	          d[wf] = b;
	          d[xf] = f;

	          switch (c) {
	            case "dialog":
	              G("cancel", d);
	              G("close", d);
	              break;

	            case "iframe":
	            case "object":
	            case "embed":
	              G("load", d);
	              break;

	            case "video":
	            case "audio":
	              for (a = 0; a < Xe.length; a++) G(Xe[a], d);

	              break;

	            case "source":
	              G("error", d);
	              break;

	            case "img":
	            case "image":
	            case "link":
	              G("error", d);
	              G("load", d);
	              break;

	            case "details":
	              G("toggle", d);
	              break;

	            case "input":
	              Za(d, f);
	              G("invalid", d);
	              break;

	            case "select":
	              d._wrapperState = {
	                wasMultiple: !!f.multiple
	              };
	              G("invalid", d);
	              break;

	            case "textarea":
	              hb(d, f), G("invalid", d);
	          }

	          vb(c, f);
	          a = null;

	          for (var g in f) f.hasOwnProperty(g) && (e = f[g], "children" === g ? "string" === typeof e ? d.textContent !== e && (a = ["children", e]) : "number" === typeof e && d.textContent !== "" + e && (a = ["children", "" + e]) : ca.hasOwnProperty(g) && null != e && "onScroll" === g && G("scroll", d));

	          switch (c) {
	            case "input":
	              Va(d);
	              cb(d, f, !0);
	              break;

	            case "textarea":
	              Va(d);
	              jb(d);
	              break;

	            case "select":
	            case "option":
	              break;

	            default:
	              "function" === typeof f.onClick && (d.onclick = jf);
	          }

	          d = a;
	          b.updateQueue = d;
	          null !== d && (b.flags |= 4);
	        } else {
	          g = 9 === e.nodeType ? e : e.ownerDocument;
	          a === kb.html && (a = lb(c));
	          a === kb.html ? "script" === c ? (a = g.createElement("div"), a.innerHTML = "<script>\x3c/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d.is ? a = g.createElement(c, {
	            is: d.is
	          }) : (a = g.createElement(c), "select" === c && (g = a, d.multiple ? g.multiple = !0 : d.size && (g.size = d.size))) : a = g.createElementNS(a, c);
	          a[wf] = b;
	          a[xf] = d;
	          Bi(a, b, !1, !1);
	          b.stateNode = a;
	          g = wb(c, d);

	          switch (c) {
	            case "dialog":
	              G("cancel", a);
	              G("close", a);
	              e = d;
	              break;

	            case "iframe":
	            case "object":
	            case "embed":
	              G("load", a);
	              e = d;
	              break;

	            case "video":
	            case "audio":
	              for (e = 0; e < Xe.length; e++) G(Xe[e], a);

	              e = d;
	              break;

	            case "source":
	              G("error", a);
	              e = d;
	              break;

	            case "img":
	            case "image":
	            case "link":
	              G("error", a);
	              G("load", a);
	              e = d;
	              break;

	            case "details":
	              G("toggle", a);
	              e = d;
	              break;

	            case "input":
	              Za(a, d);
	              e = Ya(a, d);
	              G("invalid", a);
	              break;

	            case "option":
	              e = eb(a, d);
	              break;

	            case "select":
	              a._wrapperState = {
	                wasMultiple: !!d.multiple
	              };
	              e = objectAssign({}, d, {
	                value: void 0
	              });
	              G("invalid", a);
	              break;

	            case "textarea":
	              hb(a, d);
	              e = gb(a, d);
	              G("invalid", a);
	              break;

	            default:
	              e = d;
	          }

	          vb(c, e);
	          var h = e;

	          for (f in h) if (h.hasOwnProperty(f)) {
	            var k = h[f];
	            "style" === f ? tb(a, k) : "dangerouslySetInnerHTML" === f ? (k = k ? k.__html : void 0, null != k && ob(a, k)) : "children" === f ? "string" === typeof k ? ("textarea" !== c || "" !== k) && pb(a, k) : "number" === typeof k && pb(a, "" + k) : "suppressContentEditableWarning" !== f && "suppressHydrationWarning" !== f && "autoFocus" !== f && (ca.hasOwnProperty(f) ? null != k && "onScroll" === f && G("scroll", a) : null != k && qa(a, f, k, g));
	          }

	          switch (c) {
	            case "input":
	              Va(a);
	              cb(a, d, !1);
	              break;

	            case "textarea":
	              Va(a);
	              jb(a);
	              break;

	            case "option":
	              null != d.value && a.setAttribute("value", "" + Sa(d.value));
	              break;

	            case "select":
	              a.multiple = !!d.multiple;
	              f = d.value;
	              null != f ? fb(a, !!d.multiple, f, !1) : null != d.defaultValue && fb(a, !!d.multiple, d.defaultValue, !0);
	              break;

	            default:
	              "function" === typeof e.onClick && (a.onclick = jf);
	          }

	          mf(c, d) && (b.flags |= 4);
	        }

	        null !== b.ref && (b.flags |= 128);
	      }
	      return null;

	    case 6:
	      if (a && null != b.stateNode) Ei(a, b, a.memoizedProps, d);else {
	        if ("string" !== typeof d && null === b.stateNode) throw Error(y(166));
	        c = dh(ch.current);
	        dh(ah.current);
	        rh(b) ? (d = b.stateNode, c = b.memoizedProps, d[wf] = b, d.nodeValue !== c && (b.flags |= 4)) : (d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), d[wf] = b, b.stateNode = d);
	      }
	      return null;

	    case 13:
	      H(P);
	      d = b.memoizedState;
	      if (0 !== (b.flags & 64)) return b.lanes = c, b;
	      d = null !== d;
	      c = !1;
	      null === a ? void 0 !== b.memoizedProps.fallback && rh(b) : c = null !== a.memoizedState;
	      if (d && !c && 0 !== (b.mode & 2)) if (null === a && !0 !== b.memoizedProps.unstable_avoidThisFallback || 0 !== (P.current & 1)) 0 === V && (V = 3);else {
	        if (0 === V || 3 === V) V = 4;
	        null === U || 0 === (Dg & 134217727) && 0 === (Hi & 134217727) || Ii(U, W);
	      }
	      if (d || c) b.flags |= 4;
	      return null;

	    case 4:
	      return fh(), Ci(b), null === a && cf(b.stateNode.containerInfo), null;

	    case 10:
	      return rg(b), null;

	    case 17:
	      return Ff(b.type) && Gf(), null;

	    case 19:
	      H(P);
	      d = b.memoizedState;
	      if (null === d) return null;
	      f = 0 !== (b.flags & 64);
	      g = d.rendering;
	      if (null === g) {
	        if (f) Fi(d, !1);else {
	          if (0 !== V || null !== a && 0 !== (a.flags & 64)) for (a = b.child; null !== a;) {
	            g = ih(a);

	            if (null !== g) {
	              b.flags |= 64;
	              Fi(d, !1);
	              f = g.updateQueue;
	              null !== f && (b.updateQueue = f, b.flags |= 4);
	              null === d.lastEffect && (b.firstEffect = null);
	              b.lastEffect = d.lastEffect;
	              d = c;

	              for (c = b.child; null !== c;) f = c, a = d, f.flags &= 2, f.nextEffect = null, f.firstEffect = null, f.lastEffect = null, g = f.alternate, null === g ? (f.childLanes = 0, f.lanes = a, f.child = null, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g.childLanes, f.lanes = g.lanes, f.child = g.child, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, f.type = g.type, a = g.dependencies, f.dependencies = null === a ? null : {
	                lanes: a.lanes,
	                firstContext: a.firstContext
	              }), c = c.sibling;

	              I(P, P.current & 1 | 2);
	              return b.child;
	            }

	            a = a.sibling;
	          }
	          null !== d.tail && O() > Ji && (b.flags |= 64, f = !0, Fi(d, !1), b.lanes = 33554432);
	        }
	      } else {
	        if (!f) if (a = ih(g), null !== a) {
	          if (b.flags |= 64, f = !0, c = a.updateQueue, null !== c && (b.updateQueue = c, b.flags |= 4), Fi(d, !0), null === d.tail && "hidden" === d.tailMode && !g.alternate && !lh) return b = b.lastEffect = d.lastEffect, null !== b && (b.nextEffect = null), null;
	        } else 2 * O() - d.renderingStartTime > Ji && 1073741824 !== c && (b.flags |= 64, f = !0, Fi(d, !1), b.lanes = 33554432);
	        d.isBackwards ? (g.sibling = b.child, b.child = g) : (c = d.last, null !== c ? c.sibling = g : b.child = g, d.last = g);
	      }
	      return null !== d.tail ? (c = d.tail, d.rendering = c, d.tail = c.sibling, d.lastEffect = b.lastEffect, d.renderingStartTime = O(), c.sibling = null, b = P.current, I(P, f ? b & 1 | 2 : b & 1), c) : null;

	    case 23:
	    case 24:
	      return Ki(), null !== a && null !== a.memoizedState !== (null !== b.memoizedState) && "unstable-defer-without-hiding" !== d.mode && (b.flags |= 4), null;
	  }

	  throw Error(y(156, b.tag));
	}

	function Li(a) {
	  switch (a.tag) {
	    case 1:
	      Ff(a.type) && Gf();
	      var b = a.flags;
	      return b & 4096 ? (a.flags = b & -4097 | 64, a) : null;

	    case 3:
	      fh();
	      H(N);
	      H(M);
	      uh();
	      b = a.flags;
	      if (0 !== (b & 64)) throw Error(y(285));
	      a.flags = b & -4097 | 64;
	      return a;

	    case 5:
	      return hh(a), null;

	    case 13:
	      return H(P), b = a.flags, b & 4096 ? (a.flags = b & -4097 | 64, a) : null;

	    case 19:
	      return H(P), null;

	    case 4:
	      return fh(), null;

	    case 10:
	      return rg(a), null;

	    case 23:
	    case 24:
	      return Ki(), null;

	    default:
	      return null;
	  }
	}

	function Mi(a, b) {
	  try {
	    var c = "",
	        d = b;

	    do c += Qa(d), d = d.return; while (d);

	    var e = c;
	  } catch (f) {
	    e = "\nError generating stack: " + f.message + "\n" + f.stack;
	  }

	  return {
	    value: a,
	    source: b,
	    stack: e
	  };
	}

	function Ni(a, b) {
	  try {
	    console.error(b.value);
	  } catch (c) {
	    setTimeout(function () {
	      throw c;
	    });
	  }
	}

	var Oi = "function" === typeof WeakMap ? WeakMap : Map;

	function Pi(a, b, c) {
	  c = zg(-1, c);
	  c.tag = 3;
	  c.payload = {
	    element: null
	  };
	  var d = b.value;

	  c.callback = function () {
	    Qi || (Qi = !0, Ri = d);
	    Ni(a, b);
	  };

	  return c;
	}

	function Si(a, b, c) {
	  c = zg(-1, c);
	  c.tag = 3;
	  var d = a.type.getDerivedStateFromError;

	  if ("function" === typeof d) {
	    var e = b.value;

	    c.payload = function () {
	      Ni(a, b);
	      return d(e);
	    };
	  }

	  var f = a.stateNode;
	  null !== f && "function" === typeof f.componentDidCatch && (c.callback = function () {
	    "function" !== typeof d && (null === Ti ? Ti = new Set([this]) : Ti.add(this), Ni(a, b));
	    var c = b.stack;
	    this.componentDidCatch(b.value, {
	      componentStack: null !== c ? c : ""
	    });
	  });
	  return c;
	}

	var Ui = "function" === typeof WeakSet ? WeakSet : Set;

	function Vi(a) {
	  var b = a.ref;
	  if (null !== b) if ("function" === typeof b) try {
	    b(null);
	  } catch (c) {
	    Wi(a, c);
	  } else b.current = null;
	}

	function Xi(a, b) {
	  switch (b.tag) {
	    case 0:
	    case 11:
	    case 15:
	    case 22:
	      return;

	    case 1:
	      if (b.flags & 256 && null !== a) {
	        var c = a.memoizedProps,
	            d = a.memoizedState;
	        a = b.stateNode;
	        b = a.getSnapshotBeforeUpdate(b.elementType === b.type ? c : lg(b.type, c), d);
	        a.__reactInternalSnapshotBeforeUpdate = b;
	      }

	      return;

	    case 3:
	      b.flags & 256 && qf(b.stateNode.containerInfo);
	      return;

	    case 5:
	    case 6:
	    case 4:
	    case 17:
	      return;
	  }

	  throw Error(y(163));
	}

	function Yi(a, b, c) {
	  switch (c.tag) {
	    case 0:
	    case 11:
	    case 15:
	    case 22:
	      b = c.updateQueue;
	      b = null !== b ? b.lastEffect : null;

	      if (null !== b) {
	        a = b = b.next;

	        do {
	          if (3 === (a.tag & 3)) {
	            var d = a.create;
	            a.destroy = d();
	          }

	          a = a.next;
	        } while (a !== b);
	      }

	      b = c.updateQueue;
	      b = null !== b ? b.lastEffect : null;

	      if (null !== b) {
	        a = b = b.next;

	        do {
	          var e = a;
	          d = e.next;
	          e = e.tag;
	          0 !== (e & 4) && 0 !== (e & 1) && (Zi(c, a), $i(c, a));
	          a = d;
	        } while (a !== b);
	      }

	      return;

	    case 1:
	      a = c.stateNode;
	      c.flags & 4 && (null === b ? a.componentDidMount() : (d = c.elementType === c.type ? b.memoizedProps : lg(c.type, b.memoizedProps), a.componentDidUpdate(d, b.memoizedState, a.__reactInternalSnapshotBeforeUpdate)));
	      b = c.updateQueue;
	      null !== b && Eg(c, b, a);
	      return;

	    case 3:
	      b = c.updateQueue;

	      if (null !== b) {
	        a = null;
	        if (null !== c.child) switch (c.child.tag) {
	          case 5:
	            a = c.child.stateNode;
	            break;

	          case 1:
	            a = c.child.stateNode;
	        }
	        Eg(c, b, a);
	      }

	      return;

	    case 5:
	      a = c.stateNode;
	      null === b && c.flags & 4 && mf(c.type, c.memoizedProps) && a.focus();
	      return;

	    case 6:
	      return;

	    case 4:
	      return;

	    case 12:
	      return;

	    case 13:
	      null === c.memoizedState && (c = c.alternate, null !== c && (c = c.memoizedState, null !== c && (c = c.dehydrated, null !== c && Cc(c))));
	      return;

	    case 19:
	    case 17:
	    case 20:
	    case 21:
	    case 23:
	    case 24:
	      return;
	  }

	  throw Error(y(163));
	}

	function aj(a, b) {
	  for (var c = a;;) {
	    if (5 === c.tag) {
	      var d = c.stateNode;
	      if (b) d = d.style, "function" === typeof d.setProperty ? d.setProperty("display", "none", "important") : d.display = "none";else {
	        d = c.stateNode;
	        var e = c.memoizedProps.style;
	        e = void 0 !== e && null !== e && e.hasOwnProperty("display") ? e.display : null;
	        d.style.display = sb("display", e);
	      }
	    } else if (6 === c.tag) c.stateNode.nodeValue = b ? "" : c.memoizedProps;else if ((23 !== c.tag && 24 !== c.tag || null === c.memoizedState || c === a) && null !== c.child) {
	      c.child.return = c;
	      c = c.child;
	      continue;
	    }

	    if (c === a) break;

	    for (; null === c.sibling;) {
	      if (null === c.return || c.return === a) return;
	      c = c.return;
	    }

	    c.sibling.return = c.return;
	    c = c.sibling;
	  }
	}

	function bj(a, b) {
	  if (Mf && "function" === typeof Mf.onCommitFiberUnmount) try {
	    Mf.onCommitFiberUnmount(Lf, b);
	  } catch (f) {}

	  switch (b.tag) {
	    case 0:
	    case 11:
	    case 14:
	    case 15:
	    case 22:
	      a = b.updateQueue;

	      if (null !== a && (a = a.lastEffect, null !== a)) {
	        var c = a = a.next;

	        do {
	          var d = c,
	              e = d.destroy;
	          d = d.tag;
	          if (void 0 !== e) if (0 !== (d & 4)) Zi(b, c);else {
	            d = b;

	            try {
	              e();
	            } catch (f) {
	              Wi(d, f);
	            }
	          }
	          c = c.next;
	        } while (c !== a);
	      }

	      break;

	    case 1:
	      Vi(b);
	      a = b.stateNode;
	      if ("function" === typeof a.componentWillUnmount) try {
	        a.props = b.memoizedProps, a.state = b.memoizedState, a.componentWillUnmount();
	      } catch (f) {
	        Wi(b, f);
	      }
	      break;

	    case 5:
	      Vi(b);
	      break;

	    case 4:
	      cj(a, b);
	  }
	}

	function dj(a) {
	  a.alternate = null;
	  a.child = null;
	  a.dependencies = null;
	  a.firstEffect = null;
	  a.lastEffect = null;
	  a.memoizedProps = null;
	  a.memoizedState = null;
	  a.pendingProps = null;
	  a.return = null;
	  a.updateQueue = null;
	}

	function ej(a) {
	  return 5 === a.tag || 3 === a.tag || 4 === a.tag;
	}

	function fj(a) {
	  a: {
	    for (var b = a.return; null !== b;) {
	      if (ej(b)) break a;
	      b = b.return;
	    }

	    throw Error(y(160));
	  }

	  var c = b;
	  b = c.stateNode;

	  switch (c.tag) {
	    case 5:
	      var d = !1;
	      break;

	    case 3:
	      b = b.containerInfo;
	      d = !0;
	      break;

	    case 4:
	      b = b.containerInfo;
	      d = !0;
	      break;

	    default:
	      throw Error(y(161));
	  }

	  c.flags & 16 && (pb(b, ""), c.flags &= -17);

	  a: b: for (c = a;;) {
	    for (; null === c.sibling;) {
	      if (null === c.return || ej(c.return)) {
	        c = null;
	        break a;
	      }

	      c = c.return;
	    }

	    c.sibling.return = c.return;

	    for (c = c.sibling; 5 !== c.tag && 6 !== c.tag && 18 !== c.tag;) {
	      if (c.flags & 2) continue b;
	      if (null === c.child || 4 === c.tag) continue b;else c.child.return = c, c = c.child;
	    }

	    if (!(c.flags & 2)) {
	      c = c.stateNode;
	      break a;
	    }
	  }

	  d ? gj(a, c, b) : hj(a, c, b);
	}

	function gj(a, b, c) {
	  var d = a.tag,
	      e = 5 === d || 6 === d;
	  if (e) a = e ? a.stateNode : a.stateNode.instance, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = jf));else if (4 !== d && (a = a.child, null !== a)) for (gj(a, b, c), a = a.sibling; null !== a;) gj(a, b, c), a = a.sibling;
	}

	function hj(a, b, c) {
	  var d = a.tag,
	      e = 5 === d || 6 === d;
	  if (e) a = e ? a.stateNode : a.stateNode.instance, b ? c.insertBefore(a, b) : c.appendChild(a);else if (4 !== d && (a = a.child, null !== a)) for (hj(a, b, c), a = a.sibling; null !== a;) hj(a, b, c), a = a.sibling;
	}

	function cj(a, b) {
	  for (var c = b, d = !1, e, f;;) {
	    if (!d) {
	      d = c.return;

	      a: for (;;) {
	        if (null === d) throw Error(y(160));
	        e = d.stateNode;

	        switch (d.tag) {
	          case 5:
	            f = !1;
	            break a;

	          case 3:
	            e = e.containerInfo;
	            f = !0;
	            break a;

	          case 4:
	            e = e.containerInfo;
	            f = !0;
	            break a;
	        }

	        d = d.return;
	      }

	      d = !0;
	    }

	    if (5 === c.tag || 6 === c.tag) {
	      a: for (var g = a, h = c, k = h;;) if (bj(g, k), null !== k.child && 4 !== k.tag) k.child.return = k, k = k.child;else {
	        if (k === h) break a;

	        for (; null === k.sibling;) {
	          if (null === k.return || k.return === h) break a;
	          k = k.return;
	        }

	        k.sibling.return = k.return;
	        k = k.sibling;
	      }

	      f ? (g = e, h = c.stateNode, 8 === g.nodeType ? g.parentNode.removeChild(h) : g.removeChild(h)) : e.removeChild(c.stateNode);
	    } else if (4 === c.tag) {
	      if (null !== c.child) {
	        e = c.stateNode.containerInfo;
	        f = !0;
	        c.child.return = c;
	        c = c.child;
	        continue;
	      }
	    } else if (bj(a, c), null !== c.child) {
	      c.child.return = c;
	      c = c.child;
	      continue;
	    }

	    if (c === b) break;

	    for (; null === c.sibling;) {
	      if (null === c.return || c.return === b) return;
	      c = c.return;
	      4 === c.tag && (d = !1);
	    }

	    c.sibling.return = c.return;
	    c = c.sibling;
	  }
	}

	function ij(a, b) {
	  switch (b.tag) {
	    case 0:
	    case 11:
	    case 14:
	    case 15:
	    case 22:
	      var c = b.updateQueue;
	      c = null !== c ? c.lastEffect : null;

	      if (null !== c) {
	        var d = c = c.next;

	        do 3 === (d.tag & 3) && (a = d.destroy, d.destroy = void 0, void 0 !== a && a()), d = d.next; while (d !== c);
	      }

	      return;

	    case 1:
	      return;

	    case 5:
	      c = b.stateNode;

	      if (null != c) {
	        d = b.memoizedProps;
	        var e = null !== a ? a.memoizedProps : d;
	        a = b.type;
	        var f = b.updateQueue;
	        b.updateQueue = null;

	        if (null !== f) {
	          c[xf] = d;
	          "input" === a && "radio" === d.type && null != d.name && $a(c, d);
	          wb(a, e);
	          b = wb(a, d);

	          for (e = 0; e < f.length; e += 2) {
	            var g = f[e],
	                h = f[e + 1];
	            "style" === g ? tb(c, h) : "dangerouslySetInnerHTML" === g ? ob(c, h) : "children" === g ? pb(c, h) : qa(c, g, h, b);
	          }

	          switch (a) {
	            case "input":
	              ab(c, d);
	              break;

	            case "textarea":
	              ib(c, d);
	              break;

	            case "select":
	              a = c._wrapperState.wasMultiple, c._wrapperState.wasMultiple = !!d.multiple, f = d.value, null != f ? fb(c, !!d.multiple, f, !1) : a !== !!d.multiple && (null != d.defaultValue ? fb(c, !!d.multiple, d.defaultValue, !0) : fb(c, !!d.multiple, d.multiple ? [] : "", !1));
	          }
	        }
	      }

	      return;

	    case 6:
	      if (null === b.stateNode) throw Error(y(162));
	      b.stateNode.nodeValue = b.memoizedProps;
	      return;

	    case 3:
	      c = b.stateNode;
	      c.hydrate && (c.hydrate = !1, Cc(c.containerInfo));
	      return;

	    case 12:
	      return;

	    case 13:
	      null !== b.memoizedState && (jj = O(), aj(b.child, !0));
	      kj(b);
	      return;

	    case 19:
	      kj(b);
	      return;

	    case 17:
	      return;

	    case 23:
	    case 24:
	      aj(b, null !== b.memoizedState);
	      return;
	  }

	  throw Error(y(163));
	}

	function kj(a) {
	  var b = a.updateQueue;

	  if (null !== b) {
	    a.updateQueue = null;
	    var c = a.stateNode;
	    null === c && (c = a.stateNode = new Ui());
	    b.forEach(function (b) {
	      var d = lj.bind(null, a, b);
	      c.has(b) || (c.add(b), b.then(d, d));
	    });
	  }
	}

	function mj(a, b) {
	  return null !== a && (a = a.memoizedState, null === a || null !== a.dehydrated) ? (b = b.memoizedState, null !== b && null === b.dehydrated) : !1;
	}

	var nj = Math.ceil,
	    oj = ra.ReactCurrentDispatcher,
	    pj = ra.ReactCurrentOwner,
	    X = 0,
	    U = null,
	    Y = null,
	    W = 0,
	    qj = 0,
	    rj = Bf(0),
	    V = 0,
	    sj = null,
	    tj = 0,
	    Dg = 0,
	    Hi = 0,
	    uj = 0,
	    vj = null,
	    jj = 0,
	    Ji = Infinity;

	function wj() {
	  Ji = O() + 500;
	}

	var Z = null,
	    Qi = !1,
	    Ri = null,
	    Ti = null,
	    xj = !1,
	    yj = null,
	    zj = 90,
	    Aj = [],
	    Bj = [],
	    Cj = null,
	    Dj = 0,
	    Ej = null,
	    Fj = -1,
	    Gj = 0,
	    Hj = 0,
	    Ij = null,
	    Jj = !1;

	function Hg() {
	  return 0 !== (X & 48) ? O() : -1 !== Fj ? Fj : Fj = O();
	}

	function Ig(a) {
	  a = a.mode;
	  if (0 === (a & 2)) return 1;
	  if (0 === (a & 4)) return 99 === eg() ? 1 : 2;
	  0 === Gj && (Gj = tj);

	  if (0 !== kg.transition) {
	    0 !== Hj && (Hj = null !== vj ? vj.pendingLanes : 0);
	    a = Gj;
	    var b = 4186112 & ~Hj;
	    b &= -b;
	    0 === b && (a = 4186112 & ~a, b = a & -a, 0 === b && (b = 8192));
	    return b;
	  }

	  a = eg();
	  0 !== (X & 4) && 98 === a ? a = Xc(12, Gj) : (a = Sc(a), a = Xc(a, Gj));
	  return a;
	}

	function Jg(a, b, c) {
	  if (50 < Dj) throw Dj = 0, Ej = null, Error(y(185));
	  a = Kj(a, b);
	  if (null === a) return null;
	  $c(a, b, c);
	  a === U && (Hi |= b, 4 === V && Ii(a, W));
	  var d = eg();
	  1 === b ? 0 !== (X & 8) && 0 === (X & 48) ? Lj(a) : (Mj(a, c), 0 === X && (wj(), ig())) : (0 === (X & 4) || 98 !== d && 99 !== d || (null === Cj ? Cj = new Set([a]) : Cj.add(a)), Mj(a, c));
	  vj = a;
	}

	function Kj(a, b) {
	  a.lanes |= b;
	  var c = a.alternate;
	  null !== c && (c.lanes |= b);
	  c = a;

	  for (a = a.return; null !== a;) a.childLanes |= b, c = a.alternate, null !== c && (c.childLanes |= b), c = a, a = a.return;

	  return 3 === c.tag ? c.stateNode : null;
	}

	function Mj(a, b) {
	  for (var c = a.callbackNode, d = a.suspendedLanes, e = a.pingedLanes, f = a.expirationTimes, g = a.pendingLanes; 0 < g;) {
	    var h = 31 - Vc(g),
	        k = 1 << h,
	        l = f[h];

	    if (-1 === l) {
	      if (0 === (k & d) || 0 !== (k & e)) {
	        l = b;
	        Rc(k);
	        var n = F;
	        f[h] = 10 <= n ? l + 250 : 6 <= n ? l + 5E3 : -1;
	      }
	    } else l <= b && (a.expiredLanes |= k);

	    g &= ~k;
	  }

	  d = Uc(a, a === U ? W : 0);
	  b = F;
	  if (0 === d) null !== c && (c !== Zf && Pf(c), a.callbackNode = null, a.callbackPriority = 0);else {
	    if (null !== c) {
	      if (a.callbackPriority === b) return;
	      c !== Zf && Pf(c);
	    }

	    15 === b ? (c = Lj.bind(null, a), null === ag ? (ag = [c], bg = Of(Uf, jg)) : ag.push(c), c = Zf) : 14 === b ? c = hg(99, Lj.bind(null, a)) : (c = Tc(b), c = hg(c, Nj.bind(null, a)));
	    a.callbackPriority = b;
	    a.callbackNode = c;
	  }
	}

	function Nj(a) {
	  Fj = -1;
	  Hj = Gj = 0;
	  if (0 !== (X & 48)) throw Error(y(327));
	  var b = a.callbackNode;
	  if (Oj() && a.callbackNode !== b) return null;
	  var c = Uc(a, a === U ? W : 0);
	  if (0 === c) return null;
	  var d = c;
	  var e = X;
	  X |= 16;
	  var f = Pj();
	  if (U !== a || W !== d) wj(), Qj(a, d);

	  do try {
	    Rj();
	    break;
	  } catch (h) {
	    Sj(a, h);
	  } while (1);

	  qg();
	  oj.current = f;
	  X = e;
	  null !== Y ? d = 0 : (U = null, W = 0, d = V);
	  if (0 !== (tj & Hi)) Qj(a, 0);else if (0 !== d) {
	    2 === d && (X |= 64, a.hydrate && (a.hydrate = !1, qf(a.containerInfo)), c = Wc(a), 0 !== c && (d = Tj(a, c)));
	    if (1 === d) throw b = sj, Qj(a, 0), Ii(a, c), Mj(a, O()), b;
	    a.finishedWork = a.current.alternate;
	    a.finishedLanes = c;

	    switch (d) {
	      case 0:
	      case 1:
	        throw Error(y(345));

	      case 2:
	        Uj(a);
	        break;

	      case 3:
	        Ii(a, c);

	        if ((c & 62914560) === c && (d = jj + 500 - O(), 10 < d)) {
	          if (0 !== Uc(a, 0)) break;
	          e = a.suspendedLanes;

	          if ((e & c) !== c) {
	            Hg();
	            a.pingedLanes |= a.suspendedLanes & e;
	            break;
	          }

	          a.timeoutHandle = of(Uj.bind(null, a), d);
	          break;
	        }

	        Uj(a);
	        break;

	      case 4:
	        Ii(a, c);
	        if ((c & 4186112) === c) break;
	        d = a.eventTimes;

	        for (e = -1; 0 < c;) {
	          var g = 31 - Vc(c);
	          f = 1 << g;
	          g = d[g];
	          g > e && (e = g);
	          c &= ~f;
	        }

	        c = e;
	        c = O() - c;
	        c = (120 > c ? 120 : 480 > c ? 480 : 1080 > c ? 1080 : 1920 > c ? 1920 : 3E3 > c ? 3E3 : 4320 > c ? 4320 : 1960 * nj(c / 1960)) - c;

	        if (10 < c) {
	          a.timeoutHandle = of(Uj.bind(null, a), c);
	          break;
	        }

	        Uj(a);
	        break;

	      case 5:
	        Uj(a);
	        break;

	      default:
	        throw Error(y(329));
	    }
	  }
	  Mj(a, O());
	  return a.callbackNode === b ? Nj.bind(null, a) : null;
	}

	function Ii(a, b) {
	  b &= ~uj;
	  b &= ~Hi;
	  a.suspendedLanes |= b;
	  a.pingedLanes &= ~b;

	  for (a = a.expirationTimes; 0 < b;) {
	    var c = 31 - Vc(b),
	        d = 1 << c;
	    a[c] = -1;
	    b &= ~d;
	  }
	}

	function Lj(a) {
	  if (0 !== (X & 48)) throw Error(y(327));
	  Oj();

	  if (a === U && 0 !== (a.expiredLanes & W)) {
	    var b = W;
	    var c = Tj(a, b);
	    0 !== (tj & Hi) && (b = Uc(a, b), c = Tj(a, b));
	  } else b = Uc(a, 0), c = Tj(a, b);

	  0 !== a.tag && 2 === c && (X |= 64, a.hydrate && (a.hydrate = !1, qf(a.containerInfo)), b = Wc(a), 0 !== b && (c = Tj(a, b)));
	  if (1 === c) throw c = sj, Qj(a, 0), Ii(a, b), Mj(a, O()), c;
	  a.finishedWork = a.current.alternate;
	  a.finishedLanes = b;
	  Uj(a);
	  Mj(a, O());
	  return null;
	}

	function Vj() {
	  if (null !== Cj) {
	    var a = Cj;
	    Cj = null;
	    a.forEach(function (a) {
	      a.expiredLanes |= 24 & a.pendingLanes;
	      Mj(a, O());
	    });
	  }

	  ig();
	}

	function Wj(a, b) {
	  var c = X;
	  X |= 1;

	  try {
	    return a(b);
	  } finally {
	    X = c, 0 === X && (wj(), ig());
	  }
	}

	function Xj(a, b) {
	  var c = X;
	  X &= -2;
	  X |= 8;

	  try {
	    return a(b);
	  } finally {
	    X = c, 0 === X && (wj(), ig());
	  }
	}

	function ni(a, b) {
	  I(rj, qj);
	  qj |= b;
	  tj |= b;
	}

	function Ki() {
	  qj = rj.current;
	  H(rj);
	}

	function Qj(a, b) {
	  a.finishedWork = null;
	  a.finishedLanes = 0;
	  var c = a.timeoutHandle;
	  -1 !== c && (a.timeoutHandle = -1, pf(c));
	  if (null !== Y) for (c = Y.return; null !== c;) {
	    var d = c;

	    switch (d.tag) {
	      case 1:
	        d = d.type.childContextTypes;
	        null !== d && void 0 !== d && Gf();
	        break;

	      case 3:
	        fh();
	        H(N);
	        H(M);
	        uh();
	        break;

	      case 5:
	        hh(d);
	        break;

	      case 4:
	        fh();
	        break;

	      case 13:
	        H(P);
	        break;

	      case 19:
	        H(P);
	        break;

	      case 10:
	        rg(d);
	        break;

	      case 23:
	      case 24:
	        Ki();
	    }

	    c = c.return;
	  }
	  U = a;
	  Y = Tg(a.current, null);
	  W = qj = tj = b;
	  V = 0;
	  sj = null;
	  uj = Hi = Dg = 0;
	}

	function Sj(a, b) {
	  do {
	    var c = Y;

	    try {
	      qg();
	      vh.current = Gh;

	      if (yh) {
	        for (var d = R.memoizedState; null !== d;) {
	          var e = d.queue;
	          null !== e && (e.pending = null);
	          d = d.next;
	        }

	        yh = !1;
	      }

	      xh = 0;
	      T = S = R = null;
	      zh = !1;
	      pj.current = null;

	      if (null === c || null === c.return) {
	        V = 1;
	        sj = b;
	        Y = null;
	        break;
	      }

	      a: {
	        var f = a,
	            g = c.return,
	            h = c,
	            k = b;
	        b = W;
	        h.flags |= 2048;
	        h.firstEffect = h.lastEffect = null;

	        if (null !== k && "object" === typeof k && "function" === typeof k.then) {
	          var l = k;

	          if (0 === (h.mode & 2)) {
	            var n = h.alternate;
	            n ? (h.updateQueue = n.updateQueue, h.memoizedState = n.memoizedState, h.lanes = n.lanes) : (h.updateQueue = null, h.memoizedState = null);
	          }

	          var A = 0 !== (P.current & 1),
	              p = g;

	          do {
	            var C;

	            if (C = 13 === p.tag) {
	              var x = p.memoizedState;
	              if (null !== x) C = null !== x.dehydrated ? !0 : !1;else {
	                var w = p.memoizedProps;
	                C = void 0 === w.fallback ? !1 : !0 !== w.unstable_avoidThisFallback ? !0 : A ? !1 : !0;
	              }
	            }

	            if (C) {
	              var z = p.updateQueue;

	              if (null === z) {
	                var u = new Set();
	                u.add(l);
	                p.updateQueue = u;
	              } else z.add(l);

	              if (0 === (p.mode & 2)) {
	                p.flags |= 64;
	                h.flags |= 16384;
	                h.flags &= -2981;
	                if (1 === h.tag) if (null === h.alternate) h.tag = 17;else {
	                  var t = zg(-1, 1);
	                  t.tag = 2;
	                  Ag(h, t);
	                }
	                h.lanes |= 1;
	                break a;
	              }

	              k = void 0;
	              h = b;
	              var q = f.pingCache;
	              null === q ? (q = f.pingCache = new Oi(), k = new Set(), q.set(l, k)) : (k = q.get(l), void 0 === k && (k = new Set(), q.set(l, k)));

	              if (!k.has(h)) {
	                k.add(h);
	                var v = Yj.bind(null, f, l, h);
	                l.then(v, v);
	              }

	              p.flags |= 4096;
	              p.lanes = b;
	              break a;
	            }

	            p = p.return;
	          } while (null !== p);

	          k = Error((Ra(h.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
	        }

	        5 !== V && (V = 2);
	        k = Mi(k, h);
	        p = g;

	        do {
	          switch (p.tag) {
	            case 3:
	              f = k;
	              p.flags |= 4096;
	              b &= -b;
	              p.lanes |= b;
	              var J = Pi(p, f, b);
	              Bg(p, J);
	              break a;

	            case 1:
	              f = k;
	              var K = p.type,
	                  Q = p.stateNode;

	              if (0 === (p.flags & 64) && ("function" === typeof K.getDerivedStateFromError || null !== Q && "function" === typeof Q.componentDidCatch && (null === Ti || !Ti.has(Q)))) {
	                p.flags |= 4096;
	                b &= -b;
	                p.lanes |= b;
	                var L = Si(p, f, b);
	                Bg(p, L);
	                break a;
	              }

	          }

	          p = p.return;
	        } while (null !== p);
	      }

	      Zj(c);
	    } catch (va) {
	      b = va;
	      Y === c && null !== c && (Y = c = c.return);
	      continue;
	    }

	    break;
	  } while (1);
	}

	function Pj() {
	  var a = oj.current;
	  oj.current = Gh;
	  return null === a ? Gh : a;
	}

	function Tj(a, b) {
	  var c = X;
	  X |= 16;
	  var d = Pj();
	  U === a && W === b || Qj(a, b);

	  do try {
	    ak();
	    break;
	  } catch (e) {
	    Sj(a, e);
	  } while (1);

	  qg();
	  X = c;
	  oj.current = d;
	  if (null !== Y) throw Error(y(261));
	  U = null;
	  W = 0;
	  return V;
	}

	function ak() {
	  for (; null !== Y;) bk(Y);
	}

	function Rj() {
	  for (; null !== Y && !Qf();) bk(Y);
	}

	function bk(a) {
	  var b = ck(a.alternate, a, qj);
	  a.memoizedProps = a.pendingProps;
	  null === b ? Zj(a) : Y = b;
	  pj.current = null;
	}

	function Zj(a) {
	  var b = a;

	  do {
	    var c = b.alternate;
	    a = b.return;

	    if (0 === (b.flags & 2048)) {
	      c = Gi(c, b, qj);

	      if (null !== c) {
	        Y = c;
	        return;
	      }

	      c = b;

	      if (24 !== c.tag && 23 !== c.tag || null === c.memoizedState || 0 !== (qj & 1073741824) || 0 === (c.mode & 4)) {
	        for (var d = 0, e = c.child; null !== e;) d |= e.lanes | e.childLanes, e = e.sibling;

	        c.childLanes = d;
	      }

	      null !== a && 0 === (a.flags & 2048) && (null === a.firstEffect && (a.firstEffect = b.firstEffect), null !== b.lastEffect && (null !== a.lastEffect && (a.lastEffect.nextEffect = b.firstEffect), a.lastEffect = b.lastEffect), 1 < b.flags && (null !== a.lastEffect ? a.lastEffect.nextEffect = b : a.firstEffect = b, a.lastEffect = b));
	    } else {
	      c = Li(b);

	      if (null !== c) {
	        c.flags &= 2047;
	        Y = c;
	        return;
	      }

	      null !== a && (a.firstEffect = a.lastEffect = null, a.flags |= 2048);
	    }

	    b = b.sibling;

	    if (null !== b) {
	      Y = b;
	      return;
	    }

	    Y = b = a;
	  } while (null !== b);

	  0 === V && (V = 5);
	}

	function Uj(a) {
	  var b = eg();
	  gg(99, dk.bind(null, a, b));
	  return null;
	}

	function dk(a, b) {
	  do Oj(); while (null !== yj);

	  if (0 !== (X & 48)) throw Error(y(327));
	  var c = a.finishedWork;
	  if (null === c) return null;
	  a.finishedWork = null;
	  a.finishedLanes = 0;
	  if (c === a.current) throw Error(y(177));
	  a.callbackNode = null;
	  var d = c.lanes | c.childLanes,
	      e = d,
	      f = a.pendingLanes & ~e;
	  a.pendingLanes = e;
	  a.suspendedLanes = 0;
	  a.pingedLanes = 0;
	  a.expiredLanes &= e;
	  a.mutableReadLanes &= e;
	  a.entangledLanes &= e;
	  e = a.entanglements;

	  for (var g = a.eventTimes, h = a.expirationTimes; 0 < f;) {
	    var k = 31 - Vc(f),
	        l = 1 << k;
	    e[k] = 0;
	    g[k] = -1;
	    h[k] = -1;
	    f &= ~l;
	  }

	  null !== Cj && 0 === (d & 24) && Cj.has(a) && Cj.delete(a);
	  a === U && (Y = U = null, W = 0);
	  1 < c.flags ? null !== c.lastEffect ? (c.lastEffect.nextEffect = c, d = c.firstEffect) : d = c : d = c.firstEffect;

	  if (null !== d) {
	    e = X;
	    X |= 32;
	    pj.current = null;
	    kf = fd;
	    g = Ne();

	    if (Oe(g)) {
	      if ("selectionStart" in g) h = {
	        start: g.selectionStart,
	        end: g.selectionEnd
	      };else a: if (h = (h = g.ownerDocument) && h.defaultView || window, (l = h.getSelection && h.getSelection()) && 0 !== l.rangeCount) {
	        h = l.anchorNode;
	        f = l.anchorOffset;
	        k = l.focusNode;
	        l = l.focusOffset;

	        try {
	          h.nodeType, k.nodeType;
	        } catch (va) {
	          h = null;
	          break a;
	        }

	        var n = 0,
	            A = -1,
	            p = -1,
	            C = 0,
	            x = 0,
	            w = g,
	            z = null;

	        b: for (;;) {
	          for (var u;;) {
	            w !== h || 0 !== f && 3 !== w.nodeType || (A = n + f);
	            w !== k || 0 !== l && 3 !== w.nodeType || (p = n + l);
	            3 === w.nodeType && (n += w.nodeValue.length);
	            if (null === (u = w.firstChild)) break;
	            z = w;
	            w = u;
	          }

	          for (;;) {
	            if (w === g) break b;
	            z === h && ++C === f && (A = n);
	            z === k && ++x === l && (p = n);
	            if (null !== (u = w.nextSibling)) break;
	            w = z;
	            z = w.parentNode;
	          }

	          w = u;
	        }

	        h = -1 === A || -1 === p ? null : {
	          start: A,
	          end: p
	        };
	      } else h = null;
	      h = h || {
	        start: 0,
	        end: 0
	      };
	    } else h = null;

	    lf = {
	      focusedElem: g,
	      selectionRange: h
	    };
	    fd = !1;
	    Ij = null;
	    Jj = !1;
	    Z = d;

	    do try {
	      ek();
	    } catch (va) {
	      if (null === Z) throw Error(y(330));
	      Wi(Z, va);
	      Z = Z.nextEffect;
	    } while (null !== Z);

	    Ij = null;
	    Z = d;

	    do try {
	      for (g = a; null !== Z;) {
	        var t = Z.flags;
	        t & 16 && pb(Z.stateNode, "");

	        if (t & 128) {
	          var q = Z.alternate;

	          if (null !== q) {
	            var v = q.ref;
	            null !== v && ("function" === typeof v ? v(null) : v.current = null);
	          }
	        }

	        switch (t & 1038) {
	          case 2:
	            fj(Z);
	            Z.flags &= -3;
	            break;

	          case 6:
	            fj(Z);
	            Z.flags &= -3;
	            ij(Z.alternate, Z);
	            break;

	          case 1024:
	            Z.flags &= -1025;
	            break;

	          case 1028:
	            Z.flags &= -1025;
	            ij(Z.alternate, Z);
	            break;

	          case 4:
	            ij(Z.alternate, Z);
	            break;

	          case 8:
	            h = Z;
	            cj(g, h);
	            var J = h.alternate;
	            dj(h);
	            null !== J && dj(J);
	        }

	        Z = Z.nextEffect;
	      }
	    } catch (va) {
	      if (null === Z) throw Error(y(330));
	      Wi(Z, va);
	      Z = Z.nextEffect;
	    } while (null !== Z);

	    v = lf;
	    q = Ne();
	    t = v.focusedElem;
	    g = v.selectionRange;

	    if (q !== t && t && t.ownerDocument && Me(t.ownerDocument.documentElement, t)) {
	      null !== g && Oe(t) && (q = g.start, v = g.end, void 0 === v && (v = q), "selectionStart" in t ? (t.selectionStart = q, t.selectionEnd = Math.min(v, t.value.length)) : (v = (q = t.ownerDocument || document) && q.defaultView || window, v.getSelection && (v = v.getSelection(), h = t.textContent.length, J = Math.min(g.start, h), g = void 0 === g.end ? J : Math.min(g.end, h), !v.extend && J > g && (h = g, g = J, J = h), h = Le(t, J), f = Le(t, g), h && f && (1 !== v.rangeCount || v.anchorNode !== h.node || v.anchorOffset !== h.offset || v.focusNode !== f.node || v.focusOffset !== f.offset) && (q = q.createRange(), q.setStart(h.node, h.offset), v.removeAllRanges(), J > g ? (v.addRange(q), v.extend(f.node, f.offset)) : (q.setEnd(f.node, f.offset), v.addRange(q))))));
	      q = [];

	      for (v = t; v = v.parentNode;) 1 === v.nodeType && q.push({
	        element: v,
	        left: v.scrollLeft,
	        top: v.scrollTop
	      });

	      "function" === typeof t.focus && t.focus();

	      for (t = 0; t < q.length; t++) v = q[t], v.element.scrollLeft = v.left, v.element.scrollTop = v.top;
	    }

	    fd = !!kf;
	    lf = kf = null;
	    a.current = c;
	    Z = d;

	    do try {
	      for (t = a; null !== Z;) {
	        var K = Z.flags;
	        K & 36 && Yi(t, Z.alternate, Z);

	        if (K & 128) {
	          q = void 0;
	          var Q = Z.ref;

	          if (null !== Q) {
	            var L = Z.stateNode;

	            switch (Z.tag) {
	              case 5:
	                q = L;
	                break;

	              default:
	                q = L;
	            }

	            "function" === typeof Q ? Q(q) : Q.current = q;
	          }
	        }

	        Z = Z.nextEffect;
	      }
	    } catch (va) {
	      if (null === Z) throw Error(y(330));
	      Wi(Z, va);
	      Z = Z.nextEffect;
	    } while (null !== Z);

	    Z = null;
	    $f();
	    X = e;
	  } else a.current = c;

	  if (xj) xj = !1, yj = a, zj = b;else for (Z = d; null !== Z;) b = Z.nextEffect, Z.nextEffect = null, Z.flags & 8 && (K = Z, K.sibling = null, K.stateNode = null), Z = b;
	  d = a.pendingLanes;
	  0 === d && (Ti = null);
	  1 === d ? a === Ej ? Dj++ : (Dj = 0, Ej = a) : Dj = 0;
	  c = c.stateNode;
	  if (Mf && "function" === typeof Mf.onCommitFiberRoot) try {
	    Mf.onCommitFiberRoot(Lf, c, void 0, 64 === (c.current.flags & 64));
	  } catch (va) {}
	  Mj(a, O());
	  if (Qi) throw Qi = !1, a = Ri, Ri = null, a;
	  if (0 !== (X & 8)) return null;
	  ig();
	  return null;
	}

	function ek() {
	  for (; null !== Z;) {
	    var a = Z.alternate;
	    Jj || null === Ij || (0 !== (Z.flags & 8) ? dc(Z, Ij) && (Jj = !0) : 13 === Z.tag && mj(a, Z) && dc(Z, Ij) && (Jj = !0));
	    var b = Z.flags;
	    0 !== (b & 256) && Xi(a, Z);
	    0 === (b & 512) || xj || (xj = !0, hg(97, function () {
	      Oj();
	      return null;
	    }));
	    Z = Z.nextEffect;
	  }
	}

	function Oj() {
	  if (90 !== zj) {
	    var a = 97 < zj ? 97 : zj;
	    zj = 90;
	    return gg(a, fk);
	  }

	  return !1;
	}

	function $i(a, b) {
	  Aj.push(b, a);
	  xj || (xj = !0, hg(97, function () {
	    Oj();
	    return null;
	  }));
	}

	function Zi(a, b) {
	  Bj.push(b, a);
	  xj || (xj = !0, hg(97, function () {
	    Oj();
	    return null;
	  }));
	}

	function fk() {
	  if (null === yj) return !1;
	  var a = yj;
	  yj = null;
	  if (0 !== (X & 48)) throw Error(y(331));
	  var b = X;
	  X |= 32;
	  var c = Bj;
	  Bj = [];

	  for (var d = 0; d < c.length; d += 2) {
	    var e = c[d],
	        f = c[d + 1],
	        g = e.destroy;
	    e.destroy = void 0;
	    if ("function" === typeof g) try {
	      g();
	    } catch (k) {
	      if (null === f) throw Error(y(330));
	      Wi(f, k);
	    }
	  }

	  c = Aj;
	  Aj = [];

	  for (d = 0; d < c.length; d += 2) {
	    e = c[d];
	    f = c[d + 1];

	    try {
	      var h = e.create;
	      e.destroy = h();
	    } catch (k) {
	      if (null === f) throw Error(y(330));
	      Wi(f, k);
	    }
	  }

	  for (h = a.current.firstEffect; null !== h;) a = h.nextEffect, h.nextEffect = null, h.flags & 8 && (h.sibling = null, h.stateNode = null), h = a;

	  X = b;
	  ig();
	  return !0;
	}

	function gk(a, b, c) {
	  b = Mi(c, b);
	  b = Pi(a, b, 1);
	  Ag(a, b);
	  b = Hg();
	  a = Kj(a, 1);
	  null !== a && ($c(a, 1, b), Mj(a, b));
	}

	function Wi(a, b) {
	  if (3 === a.tag) gk(a, a, b);else for (var c = a.return; null !== c;) {
	    if (3 === c.tag) {
	      gk(c, a, b);
	      break;
	    } else if (1 === c.tag) {
	      var d = c.stateNode;

	      if ("function" === typeof c.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Ti || !Ti.has(d))) {
	        a = Mi(b, a);
	        var e = Si(c, a, 1);
	        Ag(c, e);
	        e = Hg();
	        c = Kj(c, 1);
	        if (null !== c) $c(c, 1, e), Mj(c, e);else if ("function" === typeof d.componentDidCatch && (null === Ti || !Ti.has(d))) try {
	          d.componentDidCatch(b, a);
	        } catch (f) {}
	        break;
	      }
	    }

	    c = c.return;
	  }
	}

	function Yj(a, b, c) {
	  var d = a.pingCache;
	  null !== d && d.delete(b);
	  b = Hg();
	  a.pingedLanes |= a.suspendedLanes & c;
	  U === a && (W & c) === c && (4 === V || 3 === V && (W & 62914560) === W && 500 > O() - jj ? Qj(a, 0) : uj |= c);
	  Mj(a, b);
	}

	function lj(a, b) {
	  var c = a.stateNode;
	  null !== c && c.delete(b);
	  b = 0;
	  0 === b && (b = a.mode, 0 === (b & 2) ? b = 1 : 0 === (b & 4) ? b = 99 === eg() ? 1 : 2 : (0 === Gj && (Gj = tj), b = Yc(62914560 & ~Gj), 0 === b && (b = 4194304)));
	  c = Hg();
	  a = Kj(a, b);
	  null !== a && ($c(a, b, c), Mj(a, c));
	}

	var ck;

	ck = function (a, b, c) {
	  var d = b.lanes;
	  if (null !== a) {
	    if (a.memoizedProps !== b.pendingProps || N.current) ug = !0;else if (0 !== (c & d)) ug = 0 !== (a.flags & 16384) ? !0 : !1;else {
	      ug = !1;

	      switch (b.tag) {
	        case 3:
	          ri(b);
	          sh();
	          break;

	        case 5:
	          gh(b);
	          break;

	        case 1:
	          Ff(b.type) && Jf(b);
	          break;

	        case 4:
	          eh(b, b.stateNode.containerInfo);
	          break;

	        case 10:
	          d = b.memoizedProps.value;
	          var e = b.type._context;
	          I(mg, e._currentValue);
	          e._currentValue = d;
	          break;

	        case 13:
	          if (null !== b.memoizedState) {
	            if (0 !== (c & b.child.childLanes)) return ti(a, b, c);
	            I(P, P.current & 1);
	            b = hi(a, b, c);
	            return null !== b ? b.sibling : null;
	          }

	          I(P, P.current & 1);
	          break;

	        case 19:
	          d = 0 !== (c & b.childLanes);

	          if (0 !== (a.flags & 64)) {
	            if (d) return Ai(a, b, c);
	            b.flags |= 64;
	          }

	          e = b.memoizedState;
	          null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);
	          I(P, P.current);
	          if (d) break;else return null;

	        case 23:
	        case 24:
	          return b.lanes = 0, mi(a, b, c);
	      }

	      return hi(a, b, c);
	    }
	  } else ug = !1;
	  b.lanes = 0;

	  switch (b.tag) {
	    case 2:
	      d = b.type;
	      null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);
	      a = b.pendingProps;
	      e = Ef(b, M.current);
	      tg(b, c);
	      e = Ch(null, b, d, a, e, c);
	      b.flags |= 1;

	      if ("object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof) {
	        b.tag = 1;
	        b.memoizedState = null;
	        b.updateQueue = null;

	        if (Ff(d)) {
	          var f = !0;
	          Jf(b);
	        } else f = !1;

	        b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null;
	        xg(b);
	        var g = d.getDerivedStateFromProps;
	        "function" === typeof g && Gg(b, d, g, a);
	        e.updater = Kg;
	        b.stateNode = e;
	        e._reactInternals = b;
	        Og(b, d, a, c);
	        b = qi(null, b, d, !0, f, c);
	      } else b.tag = 0, fi(null, b, e, c), b = b.child;

	      return b;

	    case 16:
	      e = b.elementType;

	      a: {
	        null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);
	        a = b.pendingProps;
	        f = e._init;
	        e = f(e._payload);
	        b.type = e;
	        f = b.tag = hk(e);
	        a = lg(e, a);

	        switch (f) {
	          case 0:
	            b = li(null, b, e, a, c);
	            break a;

	          case 1:
	            b = pi(null, b, e, a, c);
	            break a;

	          case 11:
	            b = gi(null, b, e, a, c);
	            break a;

	          case 14:
	            b = ii(null, b, e, lg(e.type, a), d, c);
	            break a;
	        }

	        throw Error(y(306, e, ""));
	      }

	      return b;

	    case 0:
	      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), li(a, b, d, e, c);

	    case 1:
	      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), pi(a, b, d, e, c);

	    case 3:
	      ri(b);
	      d = b.updateQueue;
	      if (null === a || null === d) throw Error(y(282));
	      d = b.pendingProps;
	      e = b.memoizedState;
	      e = null !== e ? e.element : null;
	      yg(a, b);
	      Cg(b, d, null, c);
	      d = b.memoizedState.element;
	      if (d === e) sh(), b = hi(a, b, c);else {
	        e = b.stateNode;
	        if (f = e.hydrate) kh = rf(b.stateNode.containerInfo.firstChild), jh = b, f = lh = !0;

	        if (f) {
	          a = e.mutableSourceEagerHydrationData;
	          if (null != a) for (e = 0; e < a.length; e += 2) f = a[e], f._workInProgressVersionPrimary = a[e + 1], th.push(f);
	          c = Zg(b, null, d, c);

	          for (b.child = c; c;) c.flags = c.flags & -3 | 1024, c = c.sibling;
	        } else fi(a, b, d, c), sh();

	        b = b.child;
	      }
	      return b;

	    case 5:
	      return gh(b), null === a && ph(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, nf(d, e) ? g = null : null !== f && nf(d, f) && (b.flags |= 16), oi(a, b), fi(a, b, g, c), b.child;

	    case 6:
	      return null === a && ph(b), null;

	    case 13:
	      return ti(a, b, c);

	    case 4:
	      return eh(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Yg(b, null, d, c) : fi(a, b, d, c), b.child;

	    case 11:
	      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), gi(a, b, d, e, c);

	    case 7:
	      return fi(a, b, b.pendingProps, c), b.child;

	    case 8:
	      return fi(a, b, b.pendingProps.children, c), b.child;

	    case 12:
	      return fi(a, b, b.pendingProps.children, c), b.child;

	    case 10:
	      a: {
	        d = b.type._context;
	        e = b.pendingProps;
	        g = b.memoizedProps;
	        f = e.value;
	        var h = b.type._context;
	        I(mg, h._currentValue);
	        h._currentValue = f;
	        if (null !== g) if (h = g.value, f = He(h, f) ? 0 : ("function" === typeof d._calculateChangedBits ? d._calculateChangedBits(h, f) : 1073741823) | 0, 0 === f) {
	          if (g.children === e.children && !N.current) {
	            b = hi(a, b, c);
	            break a;
	          }
	        } else for (h = b.child, null !== h && (h.return = b); null !== h;) {
	          var k = h.dependencies;

	          if (null !== k) {
	            g = h.child;

	            for (var l = k.firstContext; null !== l;) {
	              if (l.context === d && 0 !== (l.observedBits & f)) {
	                1 === h.tag && (l = zg(-1, c & -c), l.tag = 2, Ag(h, l));
	                h.lanes |= c;
	                l = h.alternate;
	                null !== l && (l.lanes |= c);
	                sg(h.return, c);
	                k.lanes |= c;
	                break;
	              }

	              l = l.next;
	            }
	          } else g = 10 === h.tag ? h.type === b.type ? null : h.child : h.child;

	          if (null !== g) g.return = h;else for (g = h; null !== g;) {
	            if (g === b) {
	              g = null;
	              break;
	            }

	            h = g.sibling;

	            if (null !== h) {
	              h.return = g.return;
	              g = h;
	              break;
	            }

	            g = g.return;
	          }
	          h = g;
	        }
	        fi(a, b, e.children, c);
	        b = b.child;
	      }

	      return b;

	    case 9:
	      return e = b.type, f = b.pendingProps, d = f.children, tg(b, c), e = vg(e, f.unstable_observedBits), d = d(e), b.flags |= 1, fi(a, b, d, c), b.child;

	    case 14:
	      return e = b.type, f = lg(e, b.pendingProps), f = lg(e.type, f), ii(a, b, e, f, d, c);

	    case 15:
	      return ki(a, b, b.type, b.pendingProps, d, c);

	    case 17:
	      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : lg(d, e), null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2), b.tag = 1, Ff(d) ? (a = !0, Jf(b)) : a = !1, tg(b, c), Mg(b, d, e), Og(b, d, e, c), qi(null, b, d, !0, a, c);

	    case 19:
	      return Ai(a, b, c);

	    case 23:
	      return mi(a, b, c);

	    case 24:
	      return mi(a, b, c);
	  }

	  throw Error(y(156, b.tag));
	};

	function ik(a, b, c, d) {
	  this.tag = a;
	  this.key = c;
	  this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
	  this.index = 0;
	  this.ref = null;
	  this.pendingProps = b;
	  this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
	  this.mode = d;
	  this.flags = 0;
	  this.lastEffect = this.firstEffect = this.nextEffect = null;
	  this.childLanes = this.lanes = 0;
	  this.alternate = null;
	}

	function nh(a, b, c, d) {
	  return new ik(a, b, c, d);
	}

	function ji(a) {
	  a = a.prototype;
	  return !(!a || !a.isReactComponent);
	}

	function hk(a) {
	  if ("function" === typeof a) return ji(a) ? 1 : 0;

	  if (void 0 !== a && null !== a) {
	    a = a.$$typeof;
	    if (a === Aa) return 11;
	    if (a === Da) return 14;
	  }

	  return 2;
	}

	function Tg(a, b) {
	  var c = a.alternate;
	  null === c ? (c = nh(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.nextEffect = null, c.firstEffect = null, c.lastEffect = null);
	  c.childLanes = a.childLanes;
	  c.lanes = a.lanes;
	  c.child = a.child;
	  c.memoizedProps = a.memoizedProps;
	  c.memoizedState = a.memoizedState;
	  c.updateQueue = a.updateQueue;
	  b = a.dependencies;
	  c.dependencies = null === b ? null : {
	    lanes: b.lanes,
	    firstContext: b.firstContext
	  };
	  c.sibling = a.sibling;
	  c.index = a.index;
	  c.ref = a.ref;
	  return c;
	}

	function Vg(a, b, c, d, e, f) {
	  var g = 2;
	  d = a;
	  if ("function" === typeof a) ji(a) && (g = 1);else if ("string" === typeof a) g = 5;else a: switch (a) {
	    case ua:
	      return Xg(c.children, e, f, b);

	    case Ha:
	      g = 8;
	      e |= 16;
	      break;

	    case wa:
	      g = 8;
	      e |= 1;
	      break;

	    case xa:
	      return a = nh(12, c, b, e | 8), a.elementType = xa, a.type = xa, a.lanes = f, a;

	    case Ba:
	      return a = nh(13, c, b, e), a.type = Ba, a.elementType = Ba, a.lanes = f, a;

	    case Ca:
	      return a = nh(19, c, b, e), a.elementType = Ca, a.lanes = f, a;

	    case Ia:
	      return vi(c, e, f, b);

	    case Ja:
	      return a = nh(24, c, b, e), a.elementType = Ja, a.lanes = f, a;

	    default:
	      if ("object" === typeof a && null !== a) switch (a.$$typeof) {
	        case ya:
	          g = 10;
	          break a;

	        case za:
	          g = 9;
	          break a;

	        case Aa:
	          g = 11;
	          break a;

	        case Da:
	          g = 14;
	          break a;

	        case Ea:
	          g = 16;
	          d = null;
	          break a;

	        case Fa:
	          g = 22;
	          break a;
	      }
	      throw Error(y(130, null == a ? a : typeof a, ""));
	  }
	  b = nh(g, c, b, e);
	  b.elementType = a;
	  b.type = d;
	  b.lanes = f;
	  return b;
	}

	function Xg(a, b, c, d) {
	  a = nh(7, a, d, b);
	  a.lanes = c;
	  return a;
	}

	function vi(a, b, c, d) {
	  a = nh(23, a, d, b);
	  a.elementType = Ia;
	  a.lanes = c;
	  return a;
	}

	function Ug(a, b, c) {
	  a = nh(6, a, null, b);
	  a.lanes = c;
	  return a;
	}

	function Wg(a, b, c) {
	  b = nh(4, null !== a.children ? a.children : [], a.key, b);
	  b.lanes = c;
	  b.stateNode = {
	    containerInfo: a.containerInfo,
	    pendingChildren: null,
	    implementation: a.implementation
	  };
	  return b;
	}

	function jk(a, b, c) {
	  this.tag = b;
	  this.containerInfo = a;
	  this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
	  this.timeoutHandle = -1;
	  this.pendingContext = this.context = null;
	  this.hydrate = c;
	  this.callbackNode = null;
	  this.callbackPriority = 0;
	  this.eventTimes = Zc(0);
	  this.expirationTimes = Zc(-1);
	  this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
	  this.entanglements = Zc(0);
	  this.mutableSourceEagerHydrationData = null;
	}

	function kk(a, b, c) {
	  var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
	  return {
	    $$typeof: ta,
	    key: null == d ? null : "" + d,
	    children: a,
	    containerInfo: b,
	    implementation: c
	  };
	}

	function lk(a, b, c, d) {
	  var e = b.current,
	      f = Hg(),
	      g = Ig(e);

	  a: if (c) {
	    c = c._reactInternals;

	    b: {
	      if (Zb(c) !== c || 1 !== c.tag) throw Error(y(170));
	      var h = c;

	      do {
	        switch (h.tag) {
	          case 3:
	            h = h.stateNode.context;
	            break b;

	          case 1:
	            if (Ff(h.type)) {
	              h = h.stateNode.__reactInternalMemoizedMergedChildContext;
	              break b;
	            }

	        }

	        h = h.return;
	      } while (null !== h);

	      throw Error(y(171));
	    }

	    if (1 === c.tag) {
	      var k = c.type;

	      if (Ff(k)) {
	        c = If(c, k, h);
	        break a;
	      }
	    }

	    c = h;
	  } else c = Cf;

	  null === b.context ? b.context = c : b.pendingContext = c;
	  b = zg(f, g);
	  b.payload = {
	    element: a
	  };
	  d = void 0 === d ? null : d;
	  null !== d && (b.callback = d);
	  Ag(e, b);
	  Jg(e, g, f);
	  return g;
	}

	function mk(a) {
	  a = a.current;
	  if (!a.child) return null;

	  switch (a.child.tag) {
	    case 5:
	      return a.child.stateNode;

	    default:
	      return a.child.stateNode;
	  }
	}

	function nk(a, b) {
	  a = a.memoizedState;

	  if (null !== a && null !== a.dehydrated) {
	    var c = a.retryLane;
	    a.retryLane = 0 !== c && c < b ? c : b;
	  }
	}

	function ok(a, b) {
	  nk(a, b);
	  (a = a.alternate) && nk(a, b);
	}

	function pk() {
	  return null;
	}

	function qk(a, b, c) {
	  var d = null != c && null != c.hydrationOptions && c.hydrationOptions.mutableSources || null;
	  c = new jk(a, b, null != c && !0 === c.hydrate);
	  b = nh(3, null, null, 2 === b ? 7 : 1 === b ? 3 : 0);
	  c.current = b;
	  b.stateNode = c;
	  xg(b);
	  a[ff] = c.current;
	  cf(8 === a.nodeType ? a.parentNode : a);
	  if (d) for (a = 0; a < d.length; a++) {
	    b = d[a];
	    var e = b._getVersion;
	    e = e(b._source);
	    null == c.mutableSourceEagerHydrationData ? c.mutableSourceEagerHydrationData = [b, e] : c.mutableSourceEagerHydrationData.push(b, e);
	  }
	  this._internalRoot = c;
	}

	qk.prototype.render = function (a) {
	  lk(a, this._internalRoot, null, null);
	};

	qk.prototype.unmount = function () {
	  var a = this._internalRoot,
	      b = a.containerInfo;
	  lk(null, a, null, function () {
	    b[ff] = null;
	  });
	};

	function rk(a) {
	  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
	}

	function sk(a, b) {
	  b || (b = a ? 9 === a.nodeType ? a.documentElement : a.firstChild : null, b = !(!b || 1 !== b.nodeType || !b.hasAttribute("data-reactroot")));
	  if (!b) for (var c; c = a.lastChild;) a.removeChild(c);
	  return new qk(a, 0, b ? {
	    hydrate: !0
	  } : void 0);
	}

	function tk(a, b, c, d, e) {
	  var f = c._reactRootContainer;

	  if (f) {
	    var g = f._internalRoot;

	    if ("function" === typeof e) {
	      var h = e;

	      e = function () {
	        var a = mk(g);
	        h.call(a);
	      };
	    }

	    lk(b, g, a, e);
	  } else {
	    f = c._reactRootContainer = sk(c, d);
	    g = f._internalRoot;

	    if ("function" === typeof e) {
	      var k = e;

	      e = function () {
	        var a = mk(g);
	        k.call(a);
	      };
	    }

	    Xj(function () {
	      lk(b, g, a, e);
	    });
	  }

	  return mk(g);
	}

	ec = function (a) {
	  if (13 === a.tag) {
	    var b = Hg();
	    Jg(a, 4, b);
	    ok(a, 4);
	  }
	};

	fc = function (a) {
	  if (13 === a.tag) {
	    var b = Hg();
	    Jg(a, 67108864, b);
	    ok(a, 67108864);
	  }
	};

	gc = function (a) {
	  if (13 === a.tag) {
	    var b = Hg(),
	        c = Ig(a);
	    Jg(a, c, b);
	    ok(a, c);
	  }
	};

	hc = function (a, b) {
	  return b();
	};

	yb = function (a, b, c) {
	  switch (b) {
	    case "input":
	      ab(a, c);
	      b = c.name;

	      if ("radio" === c.type && null != b) {
	        for (c = a; c.parentNode;) c = c.parentNode;

	        c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]');

	        for (b = 0; b < c.length; b++) {
	          var d = c[b];

	          if (d !== a && d.form === a.form) {
	            var e = Db(d);
	            if (!e) throw Error(y(90));
	            Wa(d);
	            ab(d, e);
	          }
	        }
	      }

	      break;

	    case "textarea":
	      ib(a, c);
	      break;

	    case "select":
	      b = c.value, null != b && fb(a, !!c.multiple, b, !1);
	  }
	};

	Gb = Wj;

	Hb = function (a, b, c, d, e) {
	  var f = X;
	  X |= 4;

	  try {
	    return gg(98, a.bind(null, b, c, d, e));
	  } finally {
	    X = f, 0 === X && (wj(), ig());
	  }
	};

	Ib = function () {
	  0 === (X & 49) && (Vj(), Oj());
	};

	Jb = function (a, b) {
	  var c = X;
	  X |= 2;

	  try {
	    return a(b);
	  } finally {
	    X = c, 0 === X && (wj(), ig());
	  }
	};

	function uk(a, b) {
	  var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
	  if (!rk(b)) throw Error(y(200));
	  return kk(a, b, null, c);
	}

	var vk = {
	  Events: [Cb, ue, Db, Eb, Fb, Oj, {
	    current: !1
	  }]
	},
	    wk = {
	  findFiberByHostInstance: wc,
	  bundleType: 0,
	  version: "17.0.2",
	  rendererPackageName: "react-dom"
	};
	var xk = {
	  bundleType: wk.bundleType,
	  version: wk.version,
	  rendererPackageName: wk.rendererPackageName,
	  rendererConfig: wk.rendererConfig,
	  overrideHookState: null,
	  overrideHookStateDeletePath: null,
	  overrideHookStateRenamePath: null,
	  overrideProps: null,
	  overridePropsDeletePath: null,
	  overridePropsRenamePath: null,
	  setSuspenseHandler: null,
	  scheduleUpdate: null,
	  currentDispatcherRef: ra.ReactCurrentDispatcher,
	  findHostInstanceByFiber: function (a) {
	    a = cc(a);
	    return null === a ? null : a.stateNode;
	  },
	  findFiberByHostInstance: wk.findFiberByHostInstance || pk,
	  findHostInstancesForRefresh: null,
	  scheduleRefresh: null,
	  scheduleRoot: null,
	  setRefreshHandler: null,
	  getCurrentFiber: null
	};

	if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
	  var yk = __REACT_DEVTOOLS_GLOBAL_HOOK__;
	  if (!yk.isDisabled && yk.supportsFiber) try {
	    Lf = yk.inject(xk), Mf = yk;
	  } catch (a) {}
	}

	var __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = vk;
	var createPortal = uk;

	var findDOMNode = function (a) {
	  if (null == a) return null;
	  if (1 === a.nodeType) return a;
	  var b = a._reactInternals;

	  if (void 0 === b) {
	    if ("function" === typeof a.render) throw Error(y(188));
	    throw Error(y(268, Object.keys(a)));
	  }

	  a = cc(b);
	  a = null === a ? null : a.stateNode;
	  return a;
	};

	var flushSync = function (a, b) {
	  var c = X;
	  if (0 !== (c & 48)) return a(b);
	  X |= 1;

	  try {
	    if (a) return gg(99, a.bind(null, b));
	  } finally {
	    X = c, ig();
	  }
	};

	var hydrate = function (a, b, c) {
	  if (!rk(b)) throw Error(y(200));
	  return tk(null, a, b, !0, c);
	};

	var render = function (a, b, c) {
	  if (!rk(b)) throw Error(y(200));
	  return tk(null, a, b, !1, c);
	};

	var unmountComponentAtNode = function (a) {
	  if (!rk(a)) throw Error(y(40));
	  return a._reactRootContainer ? (Xj(function () {
	    tk(null, null, a, !1, function () {
	      a._reactRootContainer = null;
	      a[ff] = null;
	    });
	  }), !0) : !1;
	};

	var unstable_batchedUpdates$3 = Wj;

	var unstable_createPortal = function (a, b) {
	  return uk(a, b, 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null);
	};

	var unstable_renderSubtreeIntoContainer = function (a, b, c, d) {
	  if (!rk(c)) throw Error(y(200));
	  if (null == a || void 0 === a._reactInternals) throw Error(y(38));
	  return tk(a, b, c, !1, d);
	};

	var version$1 = "17.0.2";

	var reactDom_production_min = {
		__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
		createPortal: createPortal,
		findDOMNode: findDOMNode,
		flushSync: flushSync,
		hydrate: hydrate,
		render: render,
		unmountComponentAtNode: unmountComponentAtNode,
		unstable_batchedUpdates: unstable_batchedUpdates$3,
		unstable_createPortal: unstable_createPortal,
		unstable_renderSubtreeIntoContainer: unstable_renderSubtreeIntoContainer,
		version: version$1
	};

	var reactDom = createCommonjsModule$1(function (module) {

	function checkDCE() {
	  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
	  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
	    return;
	  }

	  try {
	    // Verify that the code above has been dead code eliminated (DCE'd).
	    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
	  } catch (err) {
	    // DevTools shouldn't crash React, no matter what.
	    // We should still report in case we break this code.
	    console.error(err);
	  }
	}

	{
	  // DCE check should happen before ReactDOM bundle executes so that
	  // DevTools can report bad minification during injection.
	  checkDCE();
	  module.exports = reactDom_production_min;
	}
	});

	/**
	 * Created by nicolas.looschen@pikobytes.de on 16.09.21.
	 *
	 * This file is subject to the terms and conditions defined in
	 * file 'LICENSE.txt', which is part of this source code package.
	 */
	let settingsObject = {};
	var settingsProvider = {
	  appendSettings(newSettings) {
	    settingsObject = Object.assign({}, settingsObject, newSettings);
	  },

	  getSettings() {
	    return settingsObject;
	  },

	  updateSettings(newSettings) {
	    settingsObject = newSettings;
	  }

	};

	/**
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @emails oncall+recoil
	 * 
	 * @format
	 */
	// Split declaration and implementation to allow this function to pretend to
	// check for actual instance of Promise instead of something with a `then`
	// method.
	// eslint-disable-next-line no-redeclare

	function isPromise(p) {
	  return !!p && typeof p.then === 'function';
	}

	var Recoil_isPromise = isPromise;
	/**
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @emails oncall+recoil
	 * 
	 * @format
	 */

	function nullthrows(x, message) {
	  if (x != null) {
	    return x;
	  }

	  throw new Error(message !== null && message !== void 0 ? message : 'Got unexpected null or undefined');
	}

	var Recoil_nullthrows = nullthrows; // TODO Convert Loadable to a Class to allow for runtime type detection.
	// Containing static factories of withValue(), withError(), withPromise(), and all()

	class Canceled {}

	const CANCELED = new Canceled();
	const loadableAccessors = {
	  valueMaybe() {
	    return undefined;
	  },

	  valueOrThrow() {
	    const error = new Error( // $FlowFixMe[object-this-reference]
	    `Loadable expected value, but in "${this.state}" state`); // V8 keeps closures alive until stack is accessed, this prevents a memory leak

	    throw error;
	  },

	  errorMaybe() {
	    return undefined;
	  },

	  errorOrThrow() {
	    const error = new Error( // $FlowFixMe[object-this-reference]
	    `Loadable expected error, but in "${this.state}" state`); // V8 keeps closures alive until stack is accessed, this prevents a memory leak

	    throw error;
	  },

	  promiseMaybe() {
	    return undefined;
	  },

	  promiseOrThrow() {
	    const error = new Error( // $FlowFixMe[object-this-reference]
	    `Loadable expected promise, but in "${this.state}" state`); // V8 keeps closures alive until stack is accessed, this prevents a memory leak

	    throw error;
	  },

	  is(other) {
	    // $FlowFixMe[object-this-reference]
	    return other.state === this.state && other.contents === this.contents;
	  },

	  // TODO Convert Loadable to a Class to better support chaining
	  //      by returning a Loadable from a map function
	  map(map) {
	    // $FlowFixMe[object-this-reference]
	    if (this.state === 'hasError') {
	      // $FlowFixMe[object-this-reference]
	      return this;
	    } // $FlowFixMe[object-this-reference]


	    if (this.state === 'hasValue') {
	      try {
	        // $FlowFixMe[object-this-reference]
	        const next = map(this.contents); // TODO if next instanceof Loadable, then return next

	        return Recoil_isPromise(next) ? loadableWithPromise(next.then(value => ({
	          __value: value
	        }))) : loadableWithValue(next);
	      } catch (e) {
	        return Recoil_isPromise(e) ? // If we "suspended", then try again.
	        // errors and subsequent retries will be handled in 'loading' case
	        // $FlowFixMe[object-this-reference]
	        loadableWithPromise(e.next(() => map(this.contents))) : loadableWithError(e);
	      }
	    } // $FlowFixMe[object-this-reference]


	    if (this.state === 'loading') {
	      return loadableWithPromise( // $FlowFixMe[object-this-reference]
	      this.contents // TODO if map returns a loadable, then return the value or promise or throw the error
	      .then(value => ({
	        __value: map(value.__value)
	      })).catch(e => {
	        if (Recoil_isPromise(e)) {
	          // we were "suspended," try again
	          // $FlowFixMe[object-this-reference]
	          return e.then(() => map(this.contents));
	        }

	        throw e;
	      }));
	    }

	    const error = new Error('Invalid Loadable state'); // V8 keeps closures alive until stack is accessed, this prevents a memory leak

	    throw error;
	  }

	};

	function loadableWithValue(value) {
	  // Build objects this way since Flow doesn't support disjoint unions for class properties
	  return Object.freeze({
	    state: 'hasValue',
	    contents: value,
	    ...loadableAccessors,

	    getValue() {
	      return this.contents;
	    },

	    toPromise() {
	      return Promise.resolve(this.contents);
	    },

	    valueMaybe() {
	      return this.contents;
	    },

	    valueOrThrow() {
	      return this.contents;
	    }

	  });
	}

	function loadableWithError(error) {
	  return Object.freeze({
	    state: 'hasError',
	    contents: error,
	    ...loadableAccessors,

	    getValue() {
	      throw this.contents;
	    },

	    toPromise() {
	      return Promise.reject(this.contents);
	    },

	    errorMaybe() {
	      return this.contents;
	    },

	    errorOrThrow() {
	      return this.contents;
	    }

	  });
	} // TODO Probably need to clean-up this API to accept `Promise<T>`
	// with an alternative params or mechanism for internal key proxy.


	function loadableWithPromise(promise) {
	  return Object.freeze({
	    state: 'loading',
	    contents: promise,
	    ...loadableAccessors,

	    getValue() {
	      throw this.contents.then(({
	        __value
	      }) => __value);
	    },

	    toPromise() {
	      return this.contents.then(({
	        __value
	      }) => __value);
	    },

	    promiseMaybe() {
	      return this.contents.then(({
	        __value
	      }) => __value);
	    },

	    promiseOrThrow() {
	      return this.contents.then(({
	        __value
	      }) => __value);
	    }

	  });
	}

	function loadableLoading() {
	  return loadableWithPromise(new Promise(() => {}));
	}

	function loadableAll(inputs) {
	  return inputs.every(i => i.state === 'hasValue') ? loadableWithValue(inputs.map(i => i.contents)) : inputs.some(i => i.state === 'hasError') ? loadableWithError(Recoil_nullthrows(inputs.find(i => i.state === 'hasError'), 'Invalid loadable passed to loadableAll').contents) : loadableWithPromise(Promise.all(inputs.map(i => i.contents)).then(value => ({
	    __value: value
	  })));
	}

	var Recoil_Loadable = {
	  loadableWithValue,
	  loadableWithError,
	  loadableWithPromise,
	  loadableLoading,
	  loadableAll,
	  Canceled,
	  CANCELED
	};

	var _useMutableSource; // FIXME T2710559282599660


	const useMutableSource = // flowlint-line unclear-type:off
	(_useMutableSource = react.useMutableSource) !== null && _useMutableSource !== void 0 ? _useMutableSource : react.unstable_useMutableSource; // flowlint-line unclear-type:off

	function mutableSourceExists() {
	  return useMutableSource && !(typeof window !== 'undefined' && window.$disableRecoilValueMutableSource_TEMP_HACK_DO_NOT_USE);
	}

	var Recoil_mutableSource = {
	  mutableSourceExists,
	  useMutableSource
	};
	const {
	  mutableSourceExists: mutableSourceExists$1
	} = Recoil_mutableSource;
	const gks = new Map().set('recoil_hamt_2020', true).set('recoil_memory_managament_2020', true).set('recoil_suppress_rerender_in_callback', true);

	function Recoil_gkx(gk) {
	  var _gks$get;

	  if (gk === 'recoil_early_rendering_2021' && !mutableSourceExists$1()) {
	    return false;
	  }

	  return (_gks$get = gks.get(gk)) !== null && _gks$get !== void 0 ? _gks$get : false;
	}

	Recoil_gkx.setPass = gk => {
	  gks.set(gk, true);
	};

	Recoil_gkx.setFail = gk => {
	  gks.set(gk, false);
	};

	var Recoil_gkx_1 = Recoil_gkx; // @oss-only

	/**
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @emails oncall+recoil
	 * 
	 * @format
	 */

	function recoverableViolation(message, projectName, {
	  error
	} = {}) {

	  return null;
	}

	var recoverableViolation_1 = recoverableViolation; // @oss-only

	var Recoil_recoverableViolation = recoverableViolation_1;
	/**
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Utilities for working with built-in Maps and Sets without mutating them.
	 *
	 * @emails oncall+recoil
	 * 
	 * @format
	 */

	function setByAddingToSet(set, v) {
	  const next = new Set(set);
	  next.add(v);
	  return next;
	}

	function setByDeletingFromSet(set, v) {
	  const next = new Set(set);
	  next.delete(v);
	  return next;
	}

	function mapBySettingInMap(map, k, v) {
	  const next = new Map(map);
	  next.set(k, v);
	  return next;
	}

	function mapByUpdatingInMap(map, k, updater) {
	  const next = new Map(map);
	  next.set(k, updater(next.get(k)));
	  return next;
	}

	function mapByDeletingFromMap(map, k) {
	  const next = new Map(map);
	  next.delete(k);
	  return next;
	}

	function mapByDeletingMultipleFromMap(map, ks) {
	  const next = new Map(map);
	  ks.forEach(k => next.delete(k));
	  return next;
	}

	var Recoil_CopyOnWrite = {
	  setByAddingToSet,
	  setByDeletingFromSet,
	  mapBySettingInMap,
	  mapByUpdatingInMap,
	  mapByDeletingFromMap,
	  mapByDeletingMultipleFromMap
	};
	/**
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @emails oncall+recoil
	 * 
	 * @format
	 */

	/**
	 * Creates a new iterable whose output is generated by passing the input
	 * iterable's values through the filter function.
	 */

	function* filterIterable(iterable, predicate) {
	  // Use generator to create iterable/iterator
	  let index = 0;

	  for (const value of iterable) {
	    if (predicate(value, index++)) {
	      yield value;
	    }
	  }
	}

	var Recoil_filterIterable = filterIterable;
	/**
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @emails oncall+recoil
	 * 
	 * @format
	 */

	/**
	 * Creates a new iterable whose output is generated by passing the input
	 * iterable's values through the mapper function.
	 */

	function mapIterable(iterable, callback) {
	  // Use generator to create iterable/iterator
	  return function* () {
	    let index = 0;

	    for (const value of iterable) {
	      yield callback(value, index++);
	    }
	  }();
	}

	var Recoil_mapIterable = mapIterable;

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}
	/**
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @emails oncall+recoil
	 * 
	 * @format
	 */
	// eslint-disable-next-line no-unused-vars


	class AbstractRecoilValue {
	  constructor(newKey) {
	    _defineProperty(this, "key", void 0);

	    this.key = newKey;
	  }

	}

	class RecoilState extends AbstractRecoilValue {}

	class RecoilValueReadOnly extends AbstractRecoilValue {}

	function isRecoilValue(x) {
	  return x instanceof RecoilState || x instanceof RecoilValueReadOnly;
	}

	var Recoil_RecoilValue = {
	  AbstractRecoilValue,
	  RecoilState,
	  RecoilValueReadOnly,
	  isRecoilValue
	};
	var Recoil_RecoilValue_1 = Recoil_RecoilValue.AbstractRecoilValue;
	var Recoil_RecoilValue_2 = Recoil_RecoilValue.RecoilState;
	var Recoil_RecoilValue_3 = Recoil_RecoilValue.RecoilValueReadOnly;
	var Recoil_RecoilValue_4 = Recoil_RecoilValue.isRecoilValue;
	var Recoil_RecoilValue$1 = /*#__PURE__*/Object.freeze({
	  __proto__: null,
	  AbstractRecoilValue: Recoil_RecoilValue_1,
	  RecoilState: Recoil_RecoilValue_2,
	  RecoilValueReadOnly: Recoil_RecoilValue_3,
	  isRecoilValue: Recoil_RecoilValue_4
	});

	class DefaultValue {}

	const DEFAULT_VALUE = new DefaultValue();

	class RecoilValueNotReady extends Error {
	  constructor(key) {
	    super(`Tried to set the value of Recoil selector ${key} using an updater function, but it is an async selector in a pending or error state; this is not supported.`);
	  }

	} // flowlint-next-line unclear-type:off


	const nodes = new Map(); // flowlint-next-line unclear-type:off

	const recoilValues = new Map();
	/* eslint-disable no-redeclare */

	function recoilValuesForKeys(keys) {
	  return Recoil_mapIterable(keys, key => Recoil_nullthrows(recoilValues.get(key)));
	}

	function registerNode(node) {
	  if (nodes.has(node.key)) {
	    const message = `Duplicate atom key "${node.key}". This is a FATAL ERROR in
      production. But it is safe to ignore this warning if it occurred because of
      hot module replacement.`; // TODO Need to figure out if there is a standard/open-source equivalent to see if hot module replacement is happening:
	    // prettier-ignore
	    // @fb-only: if (__DEV__) {
	    // @fb-only: const isAcceptingUpdate = require('__debug').isAcceptingUpdate;
	    // prettier-ignore
	    // @fb-only: if (typeof isAcceptingUpdate !== 'function' || !isAcceptingUpdate()) {
	    // @fb-only: expectationViolation(message, 'recoil');
	    // @fb-only: }
	    // prettier-ignore
	    // @fb-only: } else {
	    // @fb-only: recoverableViolation(message, 'recoil');
	    // @fb-only: }

	    console.warn(message); // @oss-only
	  }

	  nodes.set(node.key, node);
	  const recoilValue = node.set == null ? new Recoil_RecoilValue$1.RecoilValueReadOnly(node.key) : new Recoil_RecoilValue$1.RecoilState(node.key);
	  recoilValues.set(node.key, recoilValue);
	  return recoilValue;
	}
	/* eslint-enable no-redeclare */


	class NodeMissingError extends Error {} // flowlint-next-line unclear-type:off


	function getNode(key) {
	  const node = nodes.get(key);

	  if (node == null) {
	    throw new NodeMissingError(`Missing definition for RecoilValue: "${key}""`);
	  }

	  return node;
	} // flowlint-next-line unclear-type:off


	function getNodeMaybe(key) {
	  return nodes.get(key);
	}

	const configDeletionHandlers = new Map();

	function deleteNodeConfigIfPossible(key) {
	  var _node$shouldDeleteCon;

	  if (!Recoil_gkx_1('recoil_memory_managament_2020')) {
	    return;
	  }

	  const node = nodes.get(key);

	  if (node === null || node === void 0 ? void 0 : (_node$shouldDeleteCon = node.shouldDeleteConfigOnRelease) === null || _node$shouldDeleteCon === void 0 ? void 0 : _node$shouldDeleteCon.call(node)) {
	    var _getConfigDeletionHan;

	    nodes.delete(key);
	    (_getConfigDeletionHan = getConfigDeletionHandler(key)) === null || _getConfigDeletionHan === void 0 ? void 0 : _getConfigDeletionHan();
	    configDeletionHandlers.delete(key);
	  }
	}

	function setConfigDeletionHandler(key, fn) {
	  if (!Recoil_gkx_1('recoil_memory_managament_2020')) {
	    return;
	  }

	  if (fn === undefined) {
	    configDeletionHandlers.delete(key);
	  } else {
	    configDeletionHandlers.set(key, fn);
	  }
	}

	function getConfigDeletionHandler(key) {
	  return configDeletionHandlers.get(key);
	}

	var Recoil_Node = {
	  nodes,
	  recoilValues,
	  registerNode,
	  getNode,
	  getNodeMaybe,
	  deleteNodeConfigIfPossible,
	  setConfigDeletionHandler,
	  getConfigDeletionHandler,
	  recoilValuesForKeys,
	  NodeMissingError,
	  DefaultValue,
	  DEFAULT_VALUE,
	  RecoilValueNotReady
	};
	/**
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @emails oncall+recoil
	 * 
	 * @format
	 */

	class RetentionZone {}

	function retentionZone() {
	  return new RetentionZone();
	}

	var Recoil_RetentionZone = {
	  RetentionZone,
	  retentionZone
	};
	const {
	  setByAddingToSet: setByAddingToSet$1
	} = Recoil_CopyOnWrite;
	const {
	  getNode: getNode$1,
	  getNodeMaybe: getNodeMaybe$1,
	  recoilValuesForKeys: recoilValuesForKeys$1
	} = Recoil_Node;
	const {
	  RetentionZone: RetentionZone$1
	} = Recoil_RetentionZone; // flowlint-next-line unclear-type:off

	const emptySet = Object.freeze(new Set());

	class ReadOnlyRecoilValueError extends Error {}

	function initializeRetentionForNode(store, nodeKey, retainedBy) {
	  if (!Recoil_gkx_1('recoil_memory_managament_2020')) {
	    return () => undefined;
	  }

	  const {
	    nodesRetainedByZone
	  } = store.getState().retention;

	  function addToZone(zone) {
	    let set = nodesRetainedByZone.get(zone);

	    if (!set) {
	      nodesRetainedByZone.set(zone, set = new Set());
	    }

	    set.add(nodeKey);
	  }

	  if (retainedBy instanceof RetentionZone$1) {
	    addToZone(retainedBy);
	  } else if (Array.isArray(retainedBy)) {
	    for (const zone of retainedBy) {
	      addToZone(zone);
	    }
	  }

	  return () => {
	    if (!Recoil_gkx_1('recoil_memory_managament_2020')) {
	      return;
	    }

	    const nodesRetainedByZone = store.getState().retention.nodesRetainedByZone;

	    function deleteFromZone(zone) {
	      const set = nodesRetainedByZone.get(zone);

	      if (set) {
	        set.delete(nodeKey);
	      }

	      if (set && set.size === 0) {
	        nodesRetainedByZone.delete(zone);
	      }
	    }

	    if (retainedBy instanceof RetentionZone$1) {
	      deleteFromZone(retainedBy);
	    } else if (Array.isArray(retainedBy)) {
	      for (const zone of retainedBy) {
	        deleteFromZone(zone);
	      }
	    }
	  };
	}

	function initializeNodeIfNewToStore(store, treeState, key, trigger) {
	  const storeState = store.getState();

	  if (storeState.nodeCleanupFunctions.has(key)) {
	    return;
	  }

	  const config = getNode$1(key);
	  const retentionCleanup = initializeRetentionForNode(store, key, config.retainedBy);
	  const nodeCleanup = config.init(store, treeState, trigger);
	  storeState.nodeCleanupFunctions.set(key, () => {
	    nodeCleanup();
	    retentionCleanup();
	  });
	}

	function cleanUpNode(store, key) {
	  var _state$nodeCleanupFun;

	  const state = store.getState();
	  (_state$nodeCleanupFun = state.nodeCleanupFunctions.get(key)) === null || _state$nodeCleanupFun === void 0 ? void 0 : _state$nodeCleanupFun();
	  state.nodeCleanupFunctions.delete(key);
	} // Get the current value loadable of a node and update the state.
	// Update dependencies and subscriptions for selectors.
	// Update saved value validation for atoms.


	function getNodeLoadable(store, state, key) {
	  initializeNodeIfNewToStore(store, state, key, 'get');
	  return getNode$1(key).get(store, state);
	} // Peek at the current value loadable for a node without any evaluation or state change


	function peekNodeLoadable(store, state, key) {
	  return getNode$1(key).peek(store, state);
	} // Write value directly to state bypassing the Node interface as the node
	// definitions may not have been loaded yet when processing the initial snapshot.


	function setUnvalidatedAtomValue_DEPRECATED(state, key, newValue) {
	  var _node$invalidate;

	  const node = getNodeMaybe$1(key);
	  node === null || node === void 0 ? void 0 : (_node$invalidate = node.invalidate) === null || _node$invalidate === void 0 ? void 0 : _node$invalidate.call(node, state);
	  return { ...state,
	    atomValues: state.atomValues.clone().delete(key),
	    nonvalidatedAtoms: state.nonvalidatedAtoms.clone().set(key, newValue),
	    dirtyAtoms: setByAddingToSet$1(state.dirtyAtoms, key)
	  };
	} // Return the discovered dependencies and values to be written by setting
	// a node value. (Multiple values may be written due to selectors getting to
	// set upstreams; deps may be discovered because of reads in updater functions.)


	function setNodeValue(store, state, key, newValue) {
	  const node = getNode$1(key);

	  if (node.set == null) {
	    throw new ReadOnlyRecoilValueError(`Attempt to set read-only RecoilValue: ${key}`);
	  }

	  const set = node.set; // so flow doesn't lose the above refinement.

	  initializeNodeIfNewToStore(store, state, key, 'set');
	  return set(store, state, newValue);
	}

	function peekNodeInfo(store, state, key) {
	  var _graph$nodeDeps$get, _storeState$nodeToCom, _storeState$nodeToCom2;

	  const storeState = store.getState();
	  const graph = store.getGraph(state.version);
	  const type = storeState.knownAtoms.has(key) ? 'atom' : storeState.knownSelectors.has(key) ? 'selector' : undefined;
	  const downstreamNodes = Recoil_filterIterable(getDownstreamNodes(store, state, new Set([key])), nodeKey => nodeKey !== key);
	  return {
	    loadable: peekNodeLoadable(store, state, key),
	    isActive: storeState.knownAtoms.has(key) || storeState.knownSelectors.has(key),
	    isSet: type === 'selector' ? false : state.atomValues.has(key),
	    isModified: state.dirtyAtoms.has(key),
	    type,
	    // Report current dependencies.  If the node hasn't been evaluated, then
	    // dependencies may be missing based on the current state.
	    deps: recoilValuesForKeys$1((_graph$nodeDeps$get = graph.nodeDeps.get(key)) !== null && _graph$nodeDeps$get !== void 0 ? _graph$nodeDeps$get : []),
	    // Reportsall "current" subscribers.  Evaluating other nodes or
	    // previous in-progress async evaluations may introduce new subscribers.
	    subscribers: {
	      nodes: recoilValuesForKeys$1(downstreamNodes),
	      components: Recoil_mapIterable((_storeState$nodeToCom = (_storeState$nodeToCom2 = storeState.nodeToComponentSubscriptions.get(key)) === null || _storeState$nodeToCom2 === void 0 ? void 0 : _storeState$nodeToCom2.values()) !== null && _storeState$nodeToCom !== void 0 ? _storeState$nodeToCom : [], ([name]) => ({
	        name
	      }))
	    }
	  };
	} // Find all of the recursively dependent nodes


	function getDownstreamNodes(store, state, keys) {
	  const visitedNodes = new Set();
	  const visitingNodes = Array.from(keys);
	  const graph = store.getGraph(state.version);

	  for (let key = visitingNodes.pop(); key; key = visitingNodes.pop()) {
	    var _graph$nodeToNodeSubs;

	    visitedNodes.add(key);
	    const subscribedNodes = (_graph$nodeToNodeSubs = graph.nodeToNodeSubscriptions.get(key)) !== null && _graph$nodeToNodeSubs !== void 0 ? _graph$nodeToNodeSubs : emptySet;

	    for (const downstreamNode of subscribedNodes) {
	      if (!visitedNodes.has(downstreamNode)) {
	        visitingNodes.push(downstreamNode);
	      }
	    }
	  }

	  return visitedNodes;
	}

	var Recoil_FunctionalCore = {
	  getNodeLoadable,
	  peekNodeLoadable,
	  setNodeValue,
	  cleanUpNode,
	  setUnvalidatedAtomValue_DEPRECATED,
	  peekNodeInfo,
	  getDownstreamNodes,
	  initializeNodeIfNewToStore
	};
	const {
	  CANCELED: CANCELED$1
	} = Recoil_Loadable;
	const {
	  getDownstreamNodes: getDownstreamNodes$1,
	  getNodeLoadable: getNodeLoadable$1,
	  setNodeValue: setNodeValue$1
	} = Recoil_FunctionalCore;
	const {
	  getNodeMaybe: getNodeMaybe$2
	} = Recoil_Node;
	const {
	  DefaultValue: DefaultValue$1,
	  RecoilValueNotReady: RecoilValueNotReady$1
	} = Recoil_Node;
	const {
	  AbstractRecoilValue: AbstractRecoilValue$1,
	  RecoilState: RecoilState$1,
	  RecoilValueReadOnly: RecoilValueReadOnly$1,
	  isRecoilValue: isRecoilValue$1
	} = Recoil_RecoilValue$1;

	function getRecoilValueAsLoadable(store, {
	  key
	}, treeState = store.getState().currentTree) {
	  var _storeState$nextTree, _storeState$previousT; // Reading from an older tree can cause bugs because the dependencies that we
	  // discover during the read are lost.


	  const storeState = store.getState();

	  if (!(treeState.version === storeState.currentTree.version || treeState.version === ((_storeState$nextTree = storeState.nextTree) === null || _storeState$nextTree === void 0 ? void 0 : _storeState$nextTree.version) || treeState.version === ((_storeState$previousT = storeState.previousTree) === null || _storeState$previousT === void 0 ? void 0 : _storeState$previousT.version))) ;

	  const loadable = getNodeLoadable$1(store, treeState, key);

	  if (loadable.state === 'loading') {
	    loadable.contents.catch(() => {
	      /**
	       * HACK: intercept thrown error here to prevent an uncaught promise exception. Ideally this would happen closer to selector
	       * execution (perhaps introducing a new ERROR class to be resolved by async selectors that are in an error state)
	       */
	      return CANCELED$1;
	    });
	  }

	  return loadable;
	}

	function applyAtomValueWrites(atomValues, writes) {
	  const result = atomValues.clone();
	  writes.forEach((v, k) => {
	    if (v.state === 'hasValue' && v.contents instanceof DefaultValue$1) {
	      result.delete(k);
	    } else {
	      result.set(k, v);
	    }
	  });
	  return result;
	}

	function valueFromValueOrUpdater(store, state, {
	  key
	}, valueOrUpdater) {
	  if (typeof valueOrUpdater === 'function') {
	    // Updater form: pass in the current value. Throw if the current value
	    // is unavailable (namely when updating an async selector that's
	    // pending or errored):
	    const current = getNodeLoadable$1(store, state, key);

	    if (current.state === 'loading') {
	      throw new RecoilValueNotReady$1(key);
	    } else if (current.state === 'hasError') {
	      throw current.contents;
	    } // T itself may be a function, so our refinement is not sufficient:


	    return valueOrUpdater(current.contents); // flowlint-line unclear-type:off
	  } else {
	    return valueOrUpdater;
	  }
	}

	function applyAction(store, state, action) {
	  if (action.type === 'set') {
	    const {
	      recoilValue,
	      valueOrUpdater
	    } = action;
	    const newValue = valueFromValueOrUpdater(store, state, recoilValue, valueOrUpdater);
	    const writes = setNodeValue$1(store, state, recoilValue.key, newValue);

	    for (const [key, loadable] of writes.entries()) {
	      writeLoadableToTreeState(state, key, loadable);
	    }
	  } else if (action.type === 'setLoadable') {
	    const {
	      recoilValue: {
	        key
	      },
	      loadable
	    } = action;
	    writeLoadableToTreeState(state, key, loadable);
	  } else if (action.type === 'markModified') {
	    const {
	      recoilValue: {
	        key
	      }
	    } = action;
	    state.dirtyAtoms.add(key);
	  } else if (action.type === 'setUnvalidated') {
	    var _node$invalidate; // Write value directly to state bypassing the Node interface as the node
	    // definitions may not have been loaded yet when processing the initial snapshot.


	    const {
	      recoilValue: {
	        key
	      },
	      unvalidatedValue
	    } = action;
	    const node = getNodeMaybe$2(key);
	    node === null || node === void 0 ? void 0 : (_node$invalidate = node.invalidate) === null || _node$invalidate === void 0 ? void 0 : _node$invalidate.call(node, state);
	    state.atomValues.delete(key);
	    state.nonvalidatedAtoms.set(key, unvalidatedValue);
	    state.dirtyAtoms.add(key);
	  } else {
	    Recoil_recoverableViolation(`Unknown action ${action.type}`);
	  }
	}

	function writeLoadableToTreeState(state, key, loadable) {
	  if (loadable.state === 'hasValue' && loadable.contents instanceof DefaultValue$1) {
	    state.atomValues.delete(key);
	  } else {
	    state.atomValues.set(key, loadable);
	  }

	  state.dirtyAtoms.add(key);
	  state.nonvalidatedAtoms.delete(key);
	}

	function applyActionsToStore(store, actions) {
	  store.replaceState(state => {
	    const newState = copyTreeState(state);

	    for (const action of actions) {
	      applyAction(store, newState, action);
	    }

	    invalidateDownstreams(store, newState);
	    return newState;
	  });
	}

	function queueOrPerformStateUpdate(store, action) {
	  if (batchStack.length) {
	    const actionsByStore = batchStack[batchStack.length - 1];
	    let actions = actionsByStore.get(store);

	    if (!actions) {
	      actionsByStore.set(store, actions = []);
	    }

	    actions.push(action);
	  } else {
	    applyActionsToStore(store, [action]);
	  }
	}

	const batchStack = [];

	function batchStart() {
	  const actionsByStore = new Map();
	  batchStack.push(actionsByStore);
	  return () => {
	    for (const [store, actions] of actionsByStore) {
	      applyActionsToStore(store, actions);
	    }

	    batchStack.pop();
	  };
	}

	function copyTreeState(state) {
	  return { ...state,
	    atomValues: state.atomValues.clone(),
	    nonvalidatedAtoms: state.nonvalidatedAtoms.clone(),
	    dirtyAtoms: new Set(state.dirtyAtoms)
	  };
	}

	function invalidateDownstreams(store, state) {
	  // Inform any nodes that were changed or downstream of changes so that they
	  // can clear out any caches as needed due to the update:
	  const downstreams = getDownstreamNodes$1(store, state, state.dirtyAtoms);

	  for (const key of downstreams) {
	    var _getNodeMaybe, _getNodeMaybe$invalid;

	    (_getNodeMaybe = getNodeMaybe$2(key)) === null || _getNodeMaybe === void 0 ? void 0 : (_getNodeMaybe$invalid = _getNodeMaybe.invalidate) === null || _getNodeMaybe$invalid === void 0 ? void 0 : _getNodeMaybe$invalid.call(_getNodeMaybe, state);
	  }
	}

	function setRecoilValue(store, recoilValue, valueOrUpdater) {
	  queueOrPerformStateUpdate(store, {
	    type: 'set',
	    recoilValue,
	    valueOrUpdater
	  });
	}

	function setRecoilValueLoadable(store, recoilValue, loadable) {
	  if (loadable instanceof DefaultValue$1) {
	    return setRecoilValue(store, recoilValue, loadable);
	  }

	  queueOrPerformStateUpdate(store, {
	    type: 'setLoadable',
	    recoilValue,
	    loadable
	  });
	}

	function markRecoilValueModified(store, recoilValue) {
	  queueOrPerformStateUpdate(store, {
	    type: 'markModified',
	    recoilValue
	  });
	}

	function setUnvalidatedRecoilValue(store, recoilValue, unvalidatedValue) {
	  queueOrPerformStateUpdate(store, {
	    type: 'setUnvalidated',
	    recoilValue,
	    unvalidatedValue
	  });
	}

	let subscriptionID = 0;

	function subscribeToRecoilValue(store, {
	  key
	}, callback, componentDebugName = null) {
	  const subID = subscriptionID++;
	  const storeState = store.getState();

	  if (!storeState.nodeToComponentSubscriptions.has(key)) {
	    storeState.nodeToComponentSubscriptions.set(key, new Map());
	  }

	  Recoil_nullthrows(storeState.nodeToComponentSubscriptions.get(key)).set(subID, [componentDebugName !== null && componentDebugName !== void 0 ? componentDebugName : '<not captured>', callback]); // Handle the case that, during the same tick that we are subscribing, an atom
	  // has been updated by some effect handler. Otherwise we will miss the update.

	  if (Recoil_gkx_1('recoil_early_rendering_2021')) {
	    const nextTree = store.getState().nextTree;

	    if (nextTree && nextTree.dirtyAtoms.has(key)) {
	      callback(nextTree);
	    }
	  }

	  return {
	    release: () => {
	      const storeState = store.getState();
	      const subs = storeState.nodeToComponentSubscriptions.get(key);

	      if (subs === undefined || !subs.has(subID)) {
	        return;
	      }

	      subs.delete(subID);

	      if (subs.size === 0) {
	        storeState.nodeToComponentSubscriptions.delete(key);
	      }
	    }
	  };
	}

	var Recoil_RecoilValueInterface = {
	  RecoilValueReadOnly: RecoilValueReadOnly$1,
	  AbstractRecoilValue: AbstractRecoilValue$1,
	  RecoilState: RecoilState$1,
	  getRecoilValueAsLoadable,
	  setRecoilValue,
	  setRecoilValueLoadable,
	  markRecoilValueModified,
	  setUnvalidatedRecoilValue,
	  subscribeToRecoilValue,
	  isRecoilValue: isRecoilValue$1,
	  applyAtomValueWrites,
	  // TODO Remove export when deprecating initialStoreState_DEPRECATED in RecoilRoot
	  batchStart,
	  writeLoadableToTreeState,
	  invalidateDownstreams,
	  copyTreeState,
	  invalidateDownstreams_FOR_TESTING: invalidateDownstreams
	};
	/**
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @emails oncall+recoil
	 * 
	 * @format
	 *
	 * This is to export esstiential functions from react-dom
	 * for our web build
	 */

	const {
	  unstable_batchedUpdates
	} = reactDom;
	var ReactBatchedUpdates = {
	  unstable_batchedUpdates
	};
	/**
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @emails oncall+recoil
	 * 
	 * @format
	 *
	 * This is to export esstiential functions from react-dom
	 * for our web build
	 */
	// @fb-only: const {unstable_batchedUpdates} = require('ReactDOMComet');

	const {
	  unstable_batchedUpdates: unstable_batchedUpdates$1
	} = ReactBatchedUpdates; // @oss-only

	var Recoil_ReactBatchedUpdates = {
	  unstable_batchedUpdates: unstable_batchedUpdates$1
	};
	/**
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @emails oncall+recoil
	 * 
	 * @format
	 */

	const {
	  batchStart: batchStart$1
	} = Recoil_RecoilValueInterface;
	const {
	  unstable_batchedUpdates: unstable_batchedUpdates$2
	} = Recoil_ReactBatchedUpdates;
	let batcher = unstable_batchedUpdates$2; // flowlint-next-line unclear-type:off

	/**
	 * Sets the provided batcher function as the batcher function used by Recoil.
	 *
	 * Set the batcher to a custom batcher for your renderer,
	 * if you use a renderer other than React DOM or React Native.
	 */

	const setBatcher = newBatcher => {
	  batcher = newBatcher;
	};
	/**
	 * Returns the current batcher function.
	 */


	const getBatcher = () => batcher;
	/**
	 * Calls the current batcher function and passes the
	 * provided callback function.
	 */


	const batchUpdates = callback => {
	  batcher(() => {
	    let batchEnd = () => undefined;

	    try {
	      batchEnd = batchStart$1();
	      callback();
	    } finally {
	      batchEnd();
	    }
	  });
	};

	var Recoil_Batching = {
	  getBatcher,
	  setBatcher,
	  batchUpdates
	};
	/**
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @emails oncall+recoil
	 * 
	 * @format
	 */

	function enqueueExecution(s, f) {
	  f();
	}

	var Recoil_Queue = {
	  enqueueExecution
	};
	/**
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @emails oncall+recoil
	 * 
	 * @format
	 */

	/**
	 * Returns a set containing all of the values from the first set that are not
	 * present in any of the subsequent sets.
	 *
	 * Note: this is written procedurally (i.e., without filterSet) for performant
	 * use in tight loops.
	 */

	function differenceSets(set, ...setsWithValuesToRemove) {
	  const ret = new Set();

	  FIRST: for (const value of set) {
	    for (const otherSet of setsWithValuesToRemove) {
	      if (otherSet.has(value)) {
	        continue FIRST;
	      }
	    }

	    ret.add(value);
	  }

	  return ret;
	}

	var Recoil_differenceSets = differenceSets;
	/**
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @emails oncall+recoil
	 * 
	 * @format
	 */

	/**
	 * Returns a new Map object with the same keys as the original, but with the
	 * values replaced with the output of the given callback function.
	 */

	function mapMap(map, callback) {
	  const result = new Map();
	  map.forEach((value, key) => {
	    result.set(key, callback(value, key));
	  });
	  return result;
	}

	var Recoil_mapMap = mapMap;

	function graph() {
	  return {
	    nodeDeps: new Map(),
	    nodeToNodeSubscriptions: new Map()
	  };
	}

	function cloneGraph(graph) {
	  return {
	    nodeDeps: Recoil_mapMap(graph.nodeDeps, s => new Set(s)),
	    nodeToNodeSubscriptions: Recoil_mapMap(graph.nodeToNodeSubscriptions, s => new Set(s))
	  };
	} // Note that this overwrites the deps of existing nodes, rather than unioning
	// the new deps with the old deps.


	function mergeDependencyMapIntoGraph(deps, graph, // If olderGraph is given then we will not overwrite changes made to the given
	// graph compared with olderGraph:
	olderGraph) {
	  const {
	    nodeDeps,
	    nodeToNodeSubscriptions
	  } = graph;
	  deps.forEach((upstreams, downstream) => {
	    const existingUpstreams = nodeDeps.get(downstream);

	    if (existingUpstreams && olderGraph && existingUpstreams !== olderGraph.nodeDeps.get(downstream)) {
	      return;
	    } // Update nodeDeps:


	    nodeDeps.set(downstream, new Set(upstreams)); // Add new deps to nodeToNodeSubscriptions:

	    const addedUpstreams = existingUpstreams == null ? upstreams : Recoil_differenceSets(upstreams, existingUpstreams);
	    addedUpstreams.forEach(upstream => {
	      if (!nodeToNodeSubscriptions.has(upstream)) {
	        nodeToNodeSubscriptions.set(upstream, new Set());
	      }

	      const existing = Recoil_nullthrows(nodeToNodeSubscriptions.get(upstream));
	      existing.add(downstream);
	    }); // Remove removed deps from nodeToNodeSubscriptions:

	    if (existingUpstreams) {
	      const removedUpstreams = Recoil_differenceSets(existingUpstreams, upstreams);
	      removedUpstreams.forEach(upstream => {
	        if (!nodeToNodeSubscriptions.has(upstream)) {
	          return;
	        }

	        const existing = Recoil_nullthrows(nodeToNodeSubscriptions.get(upstream));
	        existing.delete(downstream);

	        if (existing.size === 0) {
	          nodeToNodeSubscriptions.delete(upstream);
	        }
	      });
	    }
	  });
	}

	function saveDependencyMapToStore(dependencyMap, store, version) {
	  var _storeState$nextTree, _storeState$previousT, _storeState$previousT2, _storeState$previousT3;

	  const storeState = store.getState();

	  if (!(version === storeState.currentTree.version || version === ((_storeState$nextTree = storeState.nextTree) === null || _storeState$nextTree === void 0 ? void 0 : _storeState$nextTree.version) || version === ((_storeState$previousT = storeState.previousTree) === null || _storeState$previousT === void 0 ? void 0 : _storeState$previousT.version))) ; // Merge the dependencies discovered into the store's dependency map
	  // for the version that was read:


	  const graph = store.getGraph(version);
	  mergeDependencyMapIntoGraph(dependencyMap, graph); // If this version is not the latest version, also write these dependencies
	  // into later versions if they don't already have their own:

	  if (version === ((_storeState$previousT2 = storeState.previousTree) === null || _storeState$previousT2 === void 0 ? void 0 : _storeState$previousT2.version)) {
	    const currentGraph = store.getGraph(storeState.currentTree.version);
	    mergeDependencyMapIntoGraph(dependencyMap, currentGraph, graph);
	  }

	  if (version === ((_storeState$previousT3 = storeState.previousTree) === null || _storeState$previousT3 === void 0 ? void 0 : _storeState$previousT3.version) || version === storeState.currentTree.version) {
	    var _storeState$nextTree2;

	    const nextVersion = (_storeState$nextTree2 = storeState.nextTree) === null || _storeState$nextTree2 === void 0 ? void 0 : _storeState$nextTree2.version;

	    if (nextVersion !== undefined) {
	      const nextGraph = store.getGraph(nextVersion);
	      mergeDependencyMapIntoGraph(dependencyMap, nextGraph, graph);
	    }
	  }
	}

	function mergeDepsIntoDependencyMap(from, into) {
	  from.forEach((upstreamDeps, downstreamNode) => {
	    if (!into.has(downstreamNode)) {
	      into.set(downstreamNode, new Set());
	    }

	    const deps = Recoil_nullthrows(into.get(downstreamNode));
	    upstreamDeps.forEach(dep => deps.add(dep));
	  });
	}

	function addToDependencyMap(downstream, upstream, dependencyMap) {
	  if (!dependencyMap.has(downstream)) {
	    dependencyMap.set(downstream, new Set());
	  }

	  Recoil_nullthrows(dependencyMap.get(downstream)).add(upstream);
	}

	var Recoil_Graph = {
	  addToDependencyMap,
	  cloneGraph,
	  graph,
	  mergeDepsIntoDependencyMap,
	  saveDependencyMapToStore
	};

	function createCommonjsModule(fn, module) {
	  return module = {
	    exports: {}
	  }, fn(module, module.exports), module.exports;
	}

	var hamt_1 = createCommonjsModule(function (module) {
	  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
	    return typeof obj;
	  } : function (obj) {
	    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	  };
	  /**
	      @fileOverview Hash Array Mapped Trie.
	  
	      Code based on: https://github.com/exclipy/pdata
	  */


	  var hamt = {}; // export

	  /* Configuration
	   ******************************************************************************/

	  var SIZE = 5;
	  var BUCKET_SIZE = Math.pow(2, SIZE);
	  var MASK = BUCKET_SIZE - 1;
	  var MAX_INDEX_NODE = BUCKET_SIZE / 2;
	  var MIN_ARRAY_NODE = BUCKET_SIZE / 4;
	  /*
	   ******************************************************************************/

	  var nothing = {};

	  var constant = function constant(x) {
	    return function () {
	      return x;
	    };
	  };
	  /**
	      Get 32 bit hash of string.
	  
	      Based on:
	      http://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript-jquery
	  */


	  var hash = hamt.hash = function (str) {
	    var type = typeof str === 'undefined' ? 'undefined' : _typeof(str);
	    if (type === 'number') return str;
	    if (type !== 'string') str += '';
	    var hash = 0;

	    for (var i = 0, len = str.length; i < len; ++i) {
	      var c = str.charCodeAt(i);
	      hash = (hash << 5) - hash + c | 0;
	    }

	    return hash;
	  };
	  /* Bit Ops
	   ******************************************************************************/

	  /**
	      Hamming weight.
	  
	      Taken from: http://jsperf.com/hamming-weight
	  */


	  var popcount = function popcount(x) {
	    x -= x >> 1 & 0x55555555;
	    x = (x & 0x33333333) + (x >> 2 & 0x33333333);
	    x = x + (x >> 4) & 0x0f0f0f0f;
	    x += x >> 8;
	    x += x >> 16;
	    return x & 0x7f;
	  };

	  var hashFragment = function hashFragment(shift, h) {
	    return h >>> shift & MASK;
	  };

	  var toBitmap = function toBitmap(x) {
	    return 1 << x;
	  };

	  var fromBitmap = function fromBitmap(bitmap, bit) {
	    return popcount(bitmap & bit - 1);
	  };
	  /* Array Ops
	   ******************************************************************************/

	  /**
	      Set a value in an array.
	  
	      @param mutate Should the input array be mutated?
	      @param at Index to change.
	      @param v New value
	      @param arr Array.
	  */


	  var arrayUpdate = function arrayUpdate(mutate, at, v, arr) {
	    var out = arr;

	    if (!mutate) {
	      var len = arr.length;
	      out = new Array(len);

	      for (var i = 0; i < len; ++i) {
	        out[i] = arr[i];
	      }
	    }

	    out[at] = v;
	    return out;
	  };
	  /**
	      Remove a value from an array.
	  
	      @param mutate Should the input array be mutated?
	      @param at Index to remove.
	      @param arr Array.
	  */


	  var arraySpliceOut = function arraySpliceOut(mutate, at, arr) {
	    var newLen = arr.length - 1;
	    var i = 0;
	    var g = 0;
	    var out = arr;

	    if (mutate) {
	      i = g = at;
	    } else {
	      out = new Array(newLen);

	      while (i < at) {
	        out[g++] = arr[i++];
	      }
	    }

	    ++i;

	    while (i <= newLen) {
	      out[g++] = arr[i++];
	    }

	    if (mutate) {
	      out.length = newLen;
	    }

	    return out;
	  };
	  /**
	      Insert a value into an array.
	  
	      @param mutate Should the input array be mutated?
	      @param at Index to insert at.
	      @param v Value to insert,
	      @param arr Array.
	  */


	  var arraySpliceIn = function arraySpliceIn(mutate, at, v, arr) {
	    var len = arr.length;

	    if (mutate) {
	      var _i = len;

	      while (_i >= at) {
	        arr[_i--] = arr[_i];
	      }

	      arr[at] = v;
	      return arr;
	    }

	    var i = 0,
	        g = 0;
	    var out = new Array(len + 1);

	    while (i < at) {
	      out[g++] = arr[i++];
	    }

	    out[at] = v;

	    while (i < len) {
	      out[++g] = arr[i++];
	    }

	    return out;
	  };
	  /* Node Structures
	   ******************************************************************************/


	  var LEAF = 1;
	  var COLLISION = 2;
	  var INDEX = 3;
	  var ARRAY = 4;
	  /**
	      Empty node.
	  */

	  var empty = {
	    __hamt_isEmpty: true
	  };

	  var isEmptyNode = function isEmptyNode(x) {
	    return x === empty || x && x.__hamt_isEmpty;
	  };
	  /**
	      Leaf holding a value.
	  
	      @member edit Edit of the node.
	      @member hash Hash of key.
	      @member key Key.
	      @member value Value stored.
	  */


	  var Leaf = function Leaf(edit, hash, key, value) {
	    return {
	      type: LEAF,
	      edit: edit,
	      hash: hash,
	      key: key,
	      value: value,
	      _modify: Leaf__modify
	    };
	  };
	  /**
	      Leaf holding multiple values with the same hash but different keys.
	  
	      @member edit Edit of the node.
	      @member hash Hash of key.
	      @member children Array of collision children node.
	  */


	  var Collision = function Collision(edit, hash, children) {
	    return {
	      type: COLLISION,
	      edit: edit,
	      hash: hash,
	      children: children,
	      _modify: Collision__modify
	    };
	  };
	  /**
	      Internal node with a sparse set of children.
	  
	      Uses a bitmap and array to pack children.
	  
	    @member edit Edit of the node.
	      @member mask Bitmap that encode the positions of children in the array.
	      @member children Array of child nodes.
	  */


	  var IndexedNode = function IndexedNode(edit, mask, children) {
	    return {
	      type: INDEX,
	      edit: edit,
	      mask: mask,
	      children: children,
	      _modify: IndexedNode__modify
	    };
	  };
	  /**
	      Internal node with many children.
	  
	      @member edit Edit of the node.
	      @member size Number of children.
	      @member children Array of child nodes.
	  */


	  var ArrayNode = function ArrayNode(edit, size, children) {
	    return {
	      type: ARRAY,
	      edit: edit,
	      size: size,
	      children: children,
	      _modify: ArrayNode__modify
	    };
	  };
	  /**
	      Is `node` a leaf node?
	  */


	  var isLeaf = function isLeaf(node) {
	    return node === empty || node.type === LEAF || node.type === COLLISION;
	  };
	  /* Internal node operations.
	   ******************************************************************************/

	  /**
	      Expand an indexed node into an array node.
	  
	    @param edit Current edit.
	      @param frag Index of added child.
	      @param child Added child.
	      @param mask Index node mask before child added.
	      @param subNodes Index node children before child added.
	  */


	  var expand = function expand(edit, frag, child, bitmap, subNodes) {
	    var arr = [];
	    var bit = bitmap;
	    var count = 0;

	    for (var i = 0; bit; ++i) {
	      if (bit & 1) arr[i] = subNodes[count++];
	      bit >>>= 1;
	    }

	    arr[frag] = child;
	    return ArrayNode(edit, count + 1, arr);
	  };
	  /**
	      Collapse an array node into a indexed node.
	  
	    @param edit Current edit.
	      @param count Number of elements in new array.
	      @param removed Index of removed element.
	      @param elements Array node children before remove.
	  */


	  var pack = function pack(edit, count, removed, elements) {
	    var children = new Array(count - 1);
	    var g = 0;
	    var bitmap = 0;

	    for (var i = 0, len = elements.length; i < len; ++i) {
	      if (i !== removed) {
	        var elem = elements[i];

	        if (elem && !isEmptyNode(elem)) {
	          children[g++] = elem;
	          bitmap |= 1 << i;
	        }
	      }
	    }

	    return IndexedNode(edit, bitmap, children);
	  };
	  /**
	      Merge two leaf nodes.
	  
	      @param shift Current shift.
	      @param h1 Node 1 hash.
	      @param n1 Node 1.
	      @param h2 Node 2 hash.
	      @param n2 Node 2.
	  */


	  var mergeLeaves = function mergeLeaves(edit, shift, h1, n1, h2, n2) {
	    if (h1 === h2) return Collision(edit, h1, [n2, n1]);
	    var subH1 = hashFragment(shift, h1);
	    var subH2 = hashFragment(shift, h2);
	    return IndexedNode(edit, toBitmap(subH1) | toBitmap(subH2), subH1 === subH2 ? [mergeLeaves(edit, shift + SIZE, h1, n1, h2, n2)] : subH1 < subH2 ? [n1, n2] : [n2, n1]);
	  };
	  /**
	      Update an entry in a collision list.
	  
	      @param mutate Should mutation be used?
	      @param edit Current edit.
	      @param keyEq Key compare function.
	      @param hash Hash of collision.
	      @param list Collision list.
	      @param f Update function.
	      @param k Key to update.
	      @param size Size ref.
	  */


	  var updateCollisionList = function updateCollisionList(mutate, edit, keyEq, h, list, f, k, size) {
	    var len = list.length;

	    for (var i = 0; i < len; ++i) {
	      var child = list[i];

	      if (keyEq(k, child.key)) {
	        var value = child.value;

	        var _newValue = f(value);

	        if (_newValue === value) return list;

	        if (_newValue === nothing) {
	          --size.value;
	          return arraySpliceOut(mutate, i, list);
	        }

	        return arrayUpdate(mutate, i, Leaf(edit, h, k, _newValue), list);
	      }
	    }

	    var newValue = f();
	    if (newValue === nothing) return list;
	    ++size.value;
	    return arrayUpdate(mutate, len, Leaf(edit, h, k, newValue), list);
	  };

	  var canEditNode = function canEditNode(edit, node) {
	    return edit === node.edit;
	  };
	  /* Editing
	   ******************************************************************************/


	  var Leaf__modify = function Leaf__modify(edit, keyEq, shift, f, h, k, size) {
	    if (keyEq(k, this.key)) {
	      var _v = f(this.value);

	      if (_v === this.value) return this;else if (_v === nothing) {
	        --size.value;
	        return empty;
	      }

	      if (canEditNode(edit, this)) {
	        this.value = _v;
	        return this;
	      }

	      return Leaf(edit, h, k, _v);
	    }

	    var v = f();
	    if (v === nothing) return this;
	    ++size.value;
	    return mergeLeaves(edit, shift, this.hash, this, h, Leaf(edit, h, k, v));
	  };

	  var Collision__modify = function Collision__modify(edit, keyEq, shift, f, h, k, size) {
	    if (h === this.hash) {
	      var canEdit = canEditNode(edit, this);
	      var list = updateCollisionList(canEdit, edit, keyEq, this.hash, this.children, f, k, size);
	      if (list === this.children) return this;
	      return list.length > 1 ? Collision(edit, this.hash, list) : list[0]; // collapse single element collision list
	    }

	    var v = f();
	    if (v === nothing) return this;
	    ++size.value;
	    return mergeLeaves(edit, shift, this.hash, this, h, Leaf(edit, h, k, v));
	  };

	  var IndexedNode__modify = function IndexedNode__modify(edit, keyEq, shift, f, h, k, size) {
	    var mask = this.mask;
	    var children = this.children;
	    var frag = hashFragment(shift, h);
	    var bit = toBitmap(frag);
	    var indx = fromBitmap(mask, bit);
	    var exists = mask & bit;
	    var current = exists ? children[indx] : empty;

	    var child = current._modify(edit, keyEq, shift + SIZE, f, h, k, size);

	    if (current === child) return this;
	    var canEdit = canEditNode(edit, this);
	    var bitmap = mask;
	    var newChildren = void 0;

	    if (exists && isEmptyNode(child)) {
	      // remove
	      bitmap &= ~bit;
	      if (!bitmap) return empty;
	      if (children.length <= 2 && isLeaf(children[indx ^ 1])) return children[indx ^ 1]; // collapse

	      newChildren = arraySpliceOut(canEdit, indx, children);
	    } else if (!exists && !isEmptyNode(child)) {
	      // add
	      if (children.length >= MAX_INDEX_NODE) return expand(edit, frag, child, mask, children);
	      bitmap |= bit;
	      newChildren = arraySpliceIn(canEdit, indx, child, children);
	    } else {
	      // modify
	      newChildren = arrayUpdate(canEdit, indx, child, children);
	    }

	    if (canEdit) {
	      this.mask = bitmap;
	      this.children = newChildren;
	      return this;
	    }

	    return IndexedNode(edit, bitmap, newChildren);
	  };

	  var ArrayNode__modify = function ArrayNode__modify(edit, keyEq, shift, f, h, k, size) {
	    var count = this.size;
	    var children = this.children;
	    var frag = hashFragment(shift, h);
	    var child = children[frag];

	    var newChild = (child || empty)._modify(edit, keyEq, shift + SIZE, f, h, k, size);

	    if (child === newChild) return this;
	    var canEdit = canEditNode(edit, this);
	    var newChildren = void 0;

	    if (isEmptyNode(child) && !isEmptyNode(newChild)) {
	      // add
	      ++count;
	      newChildren = arrayUpdate(canEdit, frag, newChild, children);
	    } else if (!isEmptyNode(child) && isEmptyNode(newChild)) {
	      // remove
	      --count;
	      if (count <= MIN_ARRAY_NODE) return pack(edit, count, frag, children);
	      newChildren = arrayUpdate(canEdit, frag, empty, children);
	    } else {
	      // modify
	      newChildren = arrayUpdate(canEdit, frag, newChild, children);
	    }

	    if (canEdit) {
	      this.size = count;
	      this.children = newChildren;
	      return this;
	    }

	    return ArrayNode(edit, count, newChildren);
	  };

	  empty._modify = function (edit, keyEq, shift, f, h, k, size) {
	    var v = f();
	    if (v === nothing) return empty;
	    ++size.value;
	    return Leaf(edit, h, k, v);
	  };
	  /*
	   ******************************************************************************/


	  function Map(editable, edit, config, root, size) {
	    this._editable = editable;
	    this._edit = edit;
	    this._config = config;
	    this._root = root;
	    this._size = size;
	  }

	  Map.prototype.setTree = function (newRoot, newSize) {
	    if (this._editable) {
	      this._root = newRoot;
	      this._size = newSize;
	      return this;
	    }

	    return newRoot === this._root ? this : new Map(this._editable, this._edit, this._config, newRoot, newSize);
	  };
	  /* Queries
	   ******************************************************************************/

	  /**
	      Lookup the value for `key` in `map` using a custom `hash`.
	  
	      Returns the value or `alt` if none.
	  */


	  var tryGetHash = hamt.tryGetHash = function (alt, hash, key, map) {
	    var node = map._root;
	    var shift = 0;
	    var keyEq = map._config.keyEq;

	    while (true) {
	      switch (node.type) {
	        case LEAF:
	          {
	            return keyEq(key, node.key) ? node.value : alt;
	          }

	        case COLLISION:
	          {
	            if (hash === node.hash) {
	              var children = node.children;

	              for (var i = 0, len = children.length; i < len; ++i) {
	                var child = children[i];
	                if (keyEq(key, child.key)) return child.value;
	              }
	            }

	            return alt;
	          }

	        case INDEX:
	          {
	            var frag = hashFragment(shift, hash);
	            var bit = toBitmap(frag);

	            if (node.mask & bit) {
	              node = node.children[fromBitmap(node.mask, bit)];
	              shift += SIZE;
	              break;
	            }

	            return alt;
	          }

	        case ARRAY:
	          {
	            node = node.children[hashFragment(shift, hash)];

	            if (node) {
	              shift += SIZE;
	              break;
	            }

	            return alt;
	          }

	        default:
	          return alt;
	      }
	    }
	  };

	  Map.prototype.tryGetHash = function (alt, hash, key) {
	    return tryGetHash(alt, hash, key, this);
	  };
	  /**
	      Lookup the value for `key` in `map` using internal hash function.
	  
	      @see `tryGetHash`
	  */


	  var tryGet = hamt.tryGet = function (alt, key, map) {
	    return tryGetHash(alt, map._config.hash(key), key, map);
	  };

	  Map.prototype.tryGet = function (alt, key) {
	    return tryGet(alt, key, this);
	  };
	  /**
	      Lookup the value for `key` in `map` using a custom `hash`.
	  
	      Returns the value or `undefined` if none.
	  */


	  var getHash = hamt.getHash = function (hash, key, map) {
	    return tryGetHash(undefined, hash, key, map);
	  };

	  Map.prototype.getHash = function (hash, key) {
	    return getHash(hash, key, this);
	  };
	  /**
	      Lookup the value for `key` in `map` using internal hash function.
	  
	      @see `get`
	  */


	  hamt.get = function (key, map) {
	    return tryGetHash(undefined, map._config.hash(key), key, map);
	  };

	  Map.prototype.get = function (key, alt) {
	    return tryGet(alt, key, this);
	  };
	  /**
	      Does an entry exist for `key` in `map`? Uses custom `hash`.
	  */


	  var hasHash = hamt.has = function (hash, key, map) {
	    return tryGetHash(nothing, hash, key, map) !== nothing;
	  };

	  Map.prototype.hasHash = function (hash, key) {
	    return hasHash(hash, key, this);
	  };
	  /**
	      Does an entry exist for `key` in `map`? Uses internal hash function.
	  */


	  var has = hamt.has = function (key, map) {
	    return hasHash(map._config.hash(key), key, map);
	  };

	  Map.prototype.has = function (key) {
	    return has(key, this);
	  };

	  var defKeyCompare = function defKeyCompare(x, y) {
	    return x === y;
	  };
	  /**
	      Create an empty map.
	  
	      @param config Configuration.
	  */


	  hamt.make = function (config) {
	    return new Map(0, 0, {
	      keyEq: config && config.keyEq || defKeyCompare,
	      hash: config && config.hash || hash
	    }, empty, 0);
	  };
	  /**
	      Empty map.
	  */


	  hamt.empty = hamt.make();
	  /**
	      Does `map` contain any elements?
	  */

	  var isEmpty = hamt.isEmpty = function (map) {
	    return map && !!isEmptyNode(map._root);
	  };

	  Map.prototype.isEmpty = function () {
	    return isEmpty(this);
	  };
	  /* Updates
	   ******************************************************************************/

	  /**
	      Alter the value stored for `key` in `map` using function `f` using
	      custom hash.
	  
	      `f` is invoked with the current value for `k` if it exists,
	      or no arguments if no such value exists. `modify` will always either
	      update or insert a value into the map.
	  
	      Returns a map with the modified value. Does not alter `map`.
	  */


	  var modifyHash = hamt.modifyHash = function (f, hash, key, map) {
	    var size = {
	      value: map._size
	    };

	    var newRoot = map._root._modify(map._editable ? map._edit : NaN, map._config.keyEq, 0, f, hash, key, size);

	    return map.setTree(newRoot, size.value);
	  };

	  Map.prototype.modifyHash = function (hash, key, f) {
	    return modifyHash(f, hash, key, this);
	  };
	  /**
	      Alter the value stored for `key` in `map` using function `f` using
	      internal hash function.
	  
	      @see `modifyHash`
	  */


	  var modify = hamt.modify = function (f, key, map) {
	    return modifyHash(f, map._config.hash(key), key, map);
	  };

	  Map.prototype.modify = function (key, f) {
	    return modify(f, key, this);
	  };
	  /**
	      Store `value` for `key` in `map` using custom `hash`.
	  
	      Returns a map with the modified value. Does not alter `map`.
	  */


	  var setHash = hamt.setHash = function (hash, key, value, map) {
	    return modifyHash(constant(value), hash, key, map);
	  };

	  Map.prototype.setHash = function (hash, key, value) {
	    return setHash(hash, key, value, this);
	  };
	  /**
	      Store `value` for `key` in `map` using internal hash function.
	  
	      @see `setHash`
	  */


	  var set = hamt.set = function (key, value, map) {
	    return setHash(map._config.hash(key), key, value, map);
	  };

	  Map.prototype.set = function (key, value) {
	    return set(key, value, this);
	  };
	  /**
	      Remove the entry for `key` in `map`.
	  
	      Returns a map with the value removed. Does not alter `map`.
	  */


	  var del = constant(nothing);

	  var removeHash = hamt.removeHash = function (hash, key, map) {
	    return modifyHash(del, hash, key, map);
	  };

	  Map.prototype.removeHash = Map.prototype.deleteHash = function (hash, key) {
	    return removeHash(hash, key, this);
	  };
	  /**
	      Remove the entry for `key` in `map` using internal hash function.
	  
	      @see `removeHash`
	  */


	  var remove = hamt.remove = function (key, map) {
	    return removeHash(map._config.hash(key), key, map);
	  };

	  Map.prototype.remove = Map.prototype.delete = function (key) {
	    return remove(key, this);
	  };
	  /* Mutation
	   ******************************************************************************/

	  /**
	      Mark `map` as mutable.
	   */


	  var beginMutation = hamt.beginMutation = function (map) {
	    return new Map(map._editable + 1, map._edit + 1, map._config, map._root, map._size);
	  };

	  Map.prototype.beginMutation = function () {
	    return beginMutation(this);
	  };
	  /**
	      Mark `map` as immutable.
	   */


	  var endMutation = hamt.endMutation = function (map) {
	    map._editable = map._editable && map._editable - 1;
	    return map;
	  };

	  Map.prototype.endMutation = function () {
	    return endMutation(this);
	  };
	  /**
	      Mutate `map` within the context of `f`.
	      @param f
	      @param map HAMT
	  */


	  var mutate = hamt.mutate = function (f, map) {
	    var transient = beginMutation(map);
	    f(transient);
	    return endMutation(transient);
	  };

	  Map.prototype.mutate = function (f) {
	    return mutate(f, this);
	  };
	  /* Traversal
	   ******************************************************************************/

	  /**
	      Apply a continuation.
	  */


	  var appk = function appk(k) {
	    return k && lazyVisitChildren(k[0], k[1], k[2], k[3], k[4]);
	  };
	  /**
	      Recursively visit all values stored in an array of nodes lazily.
	  */


	  var lazyVisitChildren = function lazyVisitChildren(len, children, i, f, k) {
	    while (i < len) {
	      var child = children[i++];
	      if (child && !isEmptyNode(child)) return lazyVisit(child, f, [len, children, i, f, k]);
	    }

	    return appk(k);
	  };
	  /**
	      Recursively visit all values stored in `node` lazily.
	  */


	  var lazyVisit = function lazyVisit(node, f, k) {
	    switch (node.type) {
	      case LEAF:
	        return {
	          value: f(node),
	          rest: k
	        };

	      case COLLISION:
	      case ARRAY:
	      case INDEX:
	        var children = node.children;
	        return lazyVisitChildren(children.length, children, 0, f, k);

	      default:
	        return appk(k);
	    }
	  };

	  var DONE = {
	    done: true
	  };
	  /**
	      Javascript iterator over a map.
	  */

	  function MapIterator(v) {
	    this.v = v;
	  }

	  MapIterator.prototype.next = function () {
	    if (!this.v) return DONE;
	    var v0 = this.v;
	    this.v = appk(v0.rest);
	    return v0;
	  };

	  MapIterator.prototype[Symbol.iterator] = function () {
	    return this;
	  };
	  /**
	      Lazily visit each value in map with function `f`.
	  */


	  var visit = function visit(map, f) {
	    return new MapIterator(lazyVisit(map._root, f));
	  };
	  /**
	      Get a Javascsript iterator of `map`.
	  
	      Iterates over `[key, value]` arrays.
	  */


	  var buildPairs = function buildPairs(x) {
	    return [x.key, x.value];
	  };

	  var entries = hamt.entries = function (map) {
	    return visit(map, buildPairs);
	  };

	  Map.prototype.entries = Map.prototype[Symbol.iterator] = function () {
	    return entries(this);
	  };
	  /**
	      Get array of all keys in `map`.
	  
	      Order is not guaranteed.
	  */


	  var buildKeys = function buildKeys(x) {
	    return x.key;
	  };

	  var keys = hamt.keys = function (map) {
	    return visit(map, buildKeys);
	  };

	  Map.prototype.keys = function () {
	    return keys(this);
	  };
	  /**
	      Get array of all values in `map`.
	  
	      Order is not guaranteed, duplicates are preserved.
	  */


	  var buildValues = function buildValues(x) {
	    return x.value;
	  };

	  var values = hamt.values = Map.prototype.values = function (map) {
	    return visit(map, buildValues);
	  };

	  Map.prototype.values = function () {
	    return values(this);
	  };
	  /* Fold
	   ******************************************************************************/

	  /**
	      Visit every entry in the map, aggregating data.
	  
	      Order of nodes is not guaranteed.
	  
	      @param f Function mapping accumulated value, value, and key to new value.
	      @param z Starting value.
	      @param m HAMT
	  */


	  var fold = hamt.fold = function (f, z, m) {
	    var root = m._root;
	    if (root.type === LEAF) return f(z, root.value, root.key);
	    var toVisit = [root.children];
	    var children = void 0;

	    while (children = toVisit.pop()) {
	      for (var i = 0, len = children.length; i < len;) {
	        var child = children[i++];

	        if (child && child.type) {
	          if (child.type === LEAF) z = f(z, child.value, child.key);else toVisit.push(child.children);
	        }
	      }
	    }

	    return z;
	  };

	  Map.prototype.fold = function (f, z) {
	    return fold(f, z, this);
	  };
	  /**
	      Visit every entry in the map, aggregating data.
	  
	      Order of nodes is not guaranteed.
	  
	      @param f Function invoked with value and key
	      @param map HAMT
	  */


	  var forEach = hamt.forEach = function (f, map) {
	    return fold(function (_, value, key) {
	      return f(value, key, map);
	    }, null, map);
	  };

	  Map.prototype.forEach = function (f) {
	    return forEach(f, this);
	  };
	  /* Aggregate
	   ******************************************************************************/

	  /**
	      Get the number of entries in `map`.
	  */


	  var count = hamt.count = function (map) {
	    return map._size;
	  };

	  Map.prototype.count = function () {
	    return count(this);
	  };

	  Object.defineProperty(Map.prototype, 'size', {
	    get: Map.prototype.count
	  });
	  /* Export
	   ******************************************************************************/

	  if (module.exports) {
	    module.exports = hamt;
	  } else {
	    undefined.hamt = hamt;
	  }
	});

	class BuiltInMap {
	  constructor(existing) {
	    _defineProperty(this, "_map", void 0);

	    this._map = new Map(existing === null || existing === void 0 ? void 0 : existing.entries());
	  }

	  keys() {
	    return this._map.keys();
	  }

	  entries() {
	    return this._map.entries();
	  }

	  get(k) {
	    return this._map.get(k);
	  }

	  has(k) {
	    return this._map.has(k);
	  }

	  set(k, v) {
	    this._map.set(k, v);

	    return this;
	  }

	  delete(k) {
	    this._map.delete(k);

	    return this;
	  }

	  clone() {
	    return persistentMap(this);
	  }

	  toMap() {
	    return new Map(this._map);
	  }

	}

	class HashArrayMappedTrieMap {
	  // Because hamt.empty is not a function there is no way to introduce type
	  // parameters on it, so empty is typed as HAMTPlusMap<string, mixed>.
	  // flowlint-next-line unclear-type:off
	  constructor(existing) {
	    _defineProperty(this, "_hamt", hamt_1.empty.beginMutation());

	    if (existing instanceof HashArrayMappedTrieMap) {
	      const h = existing._hamt.endMutation();

	      existing._hamt = h.beginMutation();
	      this._hamt = h.beginMutation();
	    } else if (existing) {
	      for (const [k, v] of existing.entries()) {
	        this._hamt.set(k, v);
	      }
	    }
	  }

	  keys() {
	    return this._hamt.keys();
	  }

	  entries() {
	    return this._hamt.entries();
	  }

	  get(k) {
	    return this._hamt.get(k);
	  }

	  has(k) {
	    return this._hamt.has(k);
	  }

	  set(k, v) {
	    this._hamt.set(k, v);

	    return this;
	  }

	  delete(k) {
	    this._hamt.delete(k);

	    return this;
	  }

	  clone() {
	    return persistentMap(this);
	  }

	  toMap() {
	    return new Map(this._hamt);
	  }

	}

	function persistentMap(existing) {
	  if (Recoil_gkx_1('recoil_hamt_2020')) {
	    return new HashArrayMappedTrieMap(existing);
	  } else {
	    return new BuiltInMap(existing);
	  }
	}

	var Recoil_PersistentMap = {
	  persistentMap
	};
	var Recoil_PersistentMap_1 = Recoil_PersistentMap.persistentMap;
	var Recoil_PersistentMap$1 = /*#__PURE__*/Object.freeze({
	  __proto__: null,
	  persistentMap: Recoil_PersistentMap_1
	});
	const {
	  graph: graph$1
	} = Recoil_Graph;
	const {
	  persistentMap: persistentMap$1
	} = Recoil_PersistentMap$1; // flowlint-next-line unclear-type:off

	let nextTreeStateVersion = 0;

	const getNextTreeStateVersion = () => nextTreeStateVersion++;

	function makeEmptyTreeState() {
	  const version = getNextTreeStateVersion();
	  return {
	    version,
	    stateID: version,
	    transactionMetadata: {},
	    dirtyAtoms: new Set(),
	    atomValues: persistentMap$1(),
	    nonvalidatedAtoms: persistentMap$1()
	  };
	}

	function makeEmptyStoreState() {
	  const currentTree = makeEmptyTreeState();
	  return {
	    currentTree,
	    nextTree: null,
	    previousTree: null,
	    commitDepth: 0,
	    knownAtoms: new Set(),
	    knownSelectors: new Set(),
	    transactionSubscriptions: new Map(),
	    nodeTransactionSubscriptions: new Map(),
	    nodeToComponentSubscriptions: new Map(),
	    queuedComponentCallbacks_DEPRECATED: [],
	    suspendedComponentResolvers: new Set(),
	    graphsByVersion: new Map().set(currentTree.version, graph$1()),
	    versionsUsedByComponent: new Map(),
	    retention: {
	      referenceCounts: new Map(),
	      nodesRetainedByZone: new Map(),
	      retainablesToCheckForRelease: new Set()
	    },
	    nodeCleanupFunctions: new Map()
	  };
	}

	var Recoil_State = {
	  makeEmptyTreeState,
	  makeEmptyStoreState,
	  getNextTreeStateVersion
	};
	/**
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @emails oncall+recoil
	 * 
	 * @format
	 */

	function unionSets(...sets) {
	  const result = new Set();

	  for (const set of sets) {
	    for (const value of set) {
	      result.add(value);
	    }
	  }

	  return result;
	}

	var Recoil_unionSets = unionSets;
	/**
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @emails oncall+recoil
	 * 
	 * @format
	 */

	/**
	 * The someSet() method tests whether some elements in the given Set pass the
	 * test implemented by the provided function.
	 */

	function someSet(set, callback, context) {
	  const iterator = set.entries();
	  let current = iterator.next();

	  while (!current.done) {
	    const entry = current.value;

	    if (callback.call(context, entry[1], entry[0], set)) {
	      return true;
	    }

	    current = iterator.next();
	  }

	  return false;
	}

	var Recoil_someSet = someSet;
	const {
	  cleanUpNode: cleanUpNode$1
	} = Recoil_FunctionalCore;
	const {
	  deleteNodeConfigIfPossible: deleteNodeConfigIfPossible$1,
	  getNode: getNode$2
	} = Recoil_Node;
	const {
	  RetentionZone: RetentionZone$2
	} = Recoil_RetentionZone;
	const emptySet$1 = new Set();

	function releaseRetainablesNowOnCurrentTree(store, retainables) {
	  const storeState = store.getState();
	  const treeState = storeState.currentTree;

	  if (storeState.nextTree) {
	    return; // leak memory rather than erase something that's about to be used.
	  }

	  const nodes = new Set();

	  for (const r of retainables) {
	    if (r instanceof RetentionZone$2) {
	      for (const n of nodesRetainedByZone(storeState, r)) {
	        nodes.add(n);
	      }
	    } else {
	      nodes.add(r);
	    }
	  }

	  const releasableNodes = findReleasableNodes(store, nodes);

	  for (const node of releasableNodes) {
	    releaseNode(store, treeState, node);
	  }
	}

	function findReleasableNodes(store, searchFromNodes) {
	  const storeState = store.getState();
	  const treeState = storeState.currentTree;
	  const graph = store.getGraph(treeState.version);
	  const releasableNodes = new Set(); // mutated to collect answer

	  const nonReleasableNodes = new Set();
	  findReleasableNodesInner(searchFromNodes);
	  return releasableNodes;

	  function findReleasableNodesInner(searchFromNodes) {
	    const releasableNodesFoundThisIteration = new Set();
	    const downstreams = getDownstreamNodesInTopologicalOrder(store, treeState, searchFromNodes, releasableNodes, // don't descend into these
	    nonReleasableNodes // don't descend into these
	    ); // Find which of the downstream nodes are releasable and which are not:

	    for (const node of downstreams) {
	      var _storeState$retention; // Not releasable if configured to be retained forever:


	      if (getNode$2(node).retainedBy === 'recoilRoot') {
	        nonReleasableNodes.add(node);
	        continue;
	      } // Not releasable if retained directly by a component:


	      if (((_storeState$retention = storeState.retention.referenceCounts.get(node)) !== null && _storeState$retention !== void 0 ? _storeState$retention : 0) > 0) {
	        nonReleasableNodes.add(node);
	        continue;
	      } // Not releasable if retained by a zone:


	      if (zonesThatCouldRetainNode(node).some(z => storeState.retention.referenceCounts.get(z))) {
	        nonReleasableNodes.add(node);
	        continue;
	      } // Not releasable if it has a non-releasable child (which will already be in
	      // nonReleasableNodes because we are going in topological order):


	      const nodeChildren = graph.nodeToNodeSubscriptions.get(node);

	      if (nodeChildren && Recoil_someSet(nodeChildren, child => nonReleasableNodes.has(child))) {
	        nonReleasableNodes.add(node);
	        continue;
	      }

	      releasableNodes.add(node);
	      releasableNodesFoundThisIteration.add(node);
	    } // If we found any releasable nodes, we need to walk UP from those nodes to
	    // find whether their parents can now be released as well:


	    const parents = new Set();

	    for (const node of releasableNodesFoundThisIteration) {
	      for (const parent of (_graph$nodeDeps$get = graph.nodeDeps.get(node)) !== null && _graph$nodeDeps$get !== void 0 ? _graph$nodeDeps$get : emptySet$1) {
	        var _graph$nodeDeps$get;

	        if (!releasableNodes.has(parent)) {
	          parents.add(parent);
	        }
	      }
	    }

	    if (parents.size) {
	      findReleasableNodesInner(parents);
	    }
	  }
	} // Children before parents


	function getDownstreamNodesInTopologicalOrder(store, treeState, nodes, // Mutable set is destroyed in place
	doNotDescendInto1, doNotDescendInto2) {
	  const graph = store.getGraph(treeState.version);
	  const answer = [];
	  const visited = new Set();

	  while (nodes.size > 0) {
	    visit(Recoil_nullthrows(nodes.values().next().value));
	  }

	  return answer;

	  function visit(node) {
	    if (doNotDescendInto1.has(node) || doNotDescendInto2.has(node)) {
	      nodes.delete(node);
	      return;
	    }

	    if (visited.has(node)) {
	      return;
	    }

	    const children = graph.nodeToNodeSubscriptions.get(node);

	    if (children) {
	      for (const child of children) {
	        visit(child);
	      }
	    }

	    visited.add(node);
	    nodes.delete(node);
	    answer.push(node);
	  }
	}

	function releaseNode(store, treeState, node) {
	  if (!Recoil_gkx_1('recoil_memory_managament_2020')) {
	    return;
	  } // Atom effects, in-closure caches, etc.:


	  cleanUpNode$1(store, node); // Delete from store state:

	  const storeState = store.getState();
	  storeState.knownAtoms.delete(node);
	  storeState.knownSelectors.delete(node);
	  storeState.nodeTransactionSubscriptions.delete(node);
	  storeState.retention.referenceCounts.delete(node);
	  const zones = zonesThatCouldRetainNode(node);

	  for (const zone of zones) {
	    var _storeState$retention2;

	    (_storeState$retention2 = storeState.retention.nodesRetainedByZone.get(zone)) === null || _storeState$retention2 === void 0 ? void 0 : _storeState$retention2.delete(node);
	  } // Note that we DO NOT delete from nodeToComponentSubscriptions because this
	  // already happens when the last component that was retaining the node unmounts,
	  // and this could happen either before or after that.
	  // Delete from TreeState and dep graph:


	  treeState.atomValues.delete(node);
	  treeState.dirtyAtoms.delete(node);
	  treeState.nonvalidatedAtoms.delete(node);
	  const graph = storeState.graphsByVersion.get(treeState.version);

	  if (graph) {
	    const deps = graph.nodeDeps.get(node);

	    if (deps !== undefined) {
	      graph.nodeDeps.delete(node);

	      for (const dep of deps) {
	        var _graph$nodeToNodeSubs;

	        (_graph$nodeToNodeSubs = graph.nodeToNodeSubscriptions.get(dep)) === null || _graph$nodeToNodeSubs === void 0 ? void 0 : _graph$nodeToNodeSubs.delete(node);
	      }
	    } // No need to delete sub's deps as there should be no subs at this point.
	    // But an invariant would require deleting nodes in topological order.


	    graph.nodeToNodeSubscriptions.delete(node);
	  } // Node config (for family members only as their configs can be recreated, and
	  // only if they are not retained within any other Stores):


	  deleteNodeConfigIfPossible$1(node);
	}

	function nodesRetainedByZone(storeState, zone) {
	  var _storeState$retention3;

	  return (_storeState$retention3 = storeState.retention.nodesRetainedByZone.get(zone)) !== null && _storeState$retention3 !== void 0 ? _storeState$retention3 : emptySet$1;
	}

	function zonesThatCouldRetainNode(node) {
	  const retainedBy = getNode$2(node).retainedBy;

	  if (retainedBy === undefined || retainedBy === 'components' || retainedBy === 'recoilRoot') {
	    return [];
	  } else if (retainedBy instanceof RetentionZone$2) {
	    return [retainedBy];
	  } else {
	    return retainedBy; // it's an array of zones
	  }
	}

	function scheduleOrPerformPossibleReleaseOfRetainable(store, retainable) {
	  const state = store.getState();

	  if (state.nextTree) {
	    state.retention.retainablesToCheckForRelease.add(retainable);
	  } else {
	    releaseRetainablesNowOnCurrentTree(store, new Set([retainable]));
	  }
	}

	function updateRetainCount(store, retainable, delta) {
	  var _map$get;

	  if (!Recoil_gkx_1('recoil_memory_managament_2020')) {
	    return;
	  }

	  const map = store.getState().retention.referenceCounts;
	  const newCount = ((_map$get = map.get(retainable)) !== null && _map$get !== void 0 ? _map$get : 0) + delta;

	  if (newCount === 0) {
	    updateRetainCountToZero(store, retainable);
	  } else {
	    map.set(retainable, newCount);
	  }
	}

	function updateRetainCountToZero(store, retainable) {
	  if (!Recoil_gkx_1('recoil_memory_managament_2020')) {
	    return;
	  }

	  const map = store.getState().retention.referenceCounts;
	  map.delete(retainable);
	  scheduleOrPerformPossibleReleaseOfRetainable(store, retainable);
	}

	function releaseScheduledRetainablesNow(store) {
	  if (!Recoil_gkx_1('recoil_memory_managament_2020')) {
	    return;
	  }

	  const state = store.getState();
	  releaseRetainablesNowOnCurrentTree(store, state.retention.retainablesToCheckForRelease);
	  state.retention.retainablesToCheckForRelease.clear();
	}

	function retainedByOptionWithDefault(r) {
	  // The default will change from 'recoilRoot' to 'components' in the future.
	  return r === undefined ? 'recoilRoot' : r;
	}

	var Recoil_Retention = {
	  updateRetainCount,
	  updateRetainCountToZero,
	  releaseScheduledRetainablesNow,
	  retainedByOptionWithDefault
	};
	/**
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @emails oncall+recoil
	 * 
	 * @format
	 */

	/**
	 * Combines multiple Iterables into a single Iterable.
	 * Traverses the input Iterables in the order provided and maintains the order
	 * of their elements.
	 *
	 * Example:
	 * ```
	 * const r = Array.from(concatIterables(['a', 'b'], ['c'], ['d', 'e', 'f']));
	 * r == ['a', 'b', 'c', 'd', 'e', 'f'];
	 * ```
	 */

	function* concatIterables(iters) {
	  for (const iter of iters) {
	    for (const val of iter) {
	      yield val;
	    }
	  }
	}

	var Recoil_concatIterables = concatIterables;
	/**
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @emails oncall+recoil
	 * 
	 * @format
	 */

	const isSSR = typeof window === 'undefined';
	const isReactNative = typeof navigator !== 'undefined' && navigator.product === 'ReactNative'; // eslint-disable-line fb-www/typeof-undefined

	var Recoil_Environment = {
	  isSSR,
	  isReactNative
	};
	const {
	  isSSR: isSSR$1
	} = Recoil_Environment;
	const {
	  batchUpdates: batchUpdates$1
	} = Recoil_Batching;
	const {
	  initializeNodeIfNewToStore: initializeNodeIfNewToStore$1,
	  peekNodeInfo: peekNodeInfo$1
	} = Recoil_FunctionalCore;
	const {
	  graph: graph$2
	} = Recoil_Graph;
	const {
	  DEFAULT_VALUE: DEFAULT_VALUE$1,
	  recoilValues: recoilValues$1,
	  recoilValuesForKeys: recoilValuesForKeys$2
	} = Recoil_Node;
	const {
	  AbstractRecoilValue: AbstractRecoilValue$2,
	  getRecoilValueAsLoadable: getRecoilValueAsLoadable$1,
	  setRecoilValue: setRecoilValue$1,
	  setUnvalidatedRecoilValue: setUnvalidatedRecoilValue$1
	} = Recoil_RecoilValueInterface;
	const {
	  updateRetainCount: updateRetainCount$1
	} = Recoil_Retention;
	const {
	  getNextTreeStateVersion: getNextTreeStateVersion$1,
	  makeEmptyStoreState: makeEmptyStoreState$1
	} = Recoil_State; // Opaque at this surface because it's part of the public API from here.
	// However, the data-flow-graph and selector values may evolve as selector
	// evaluation functions are executed and async selectors resolve.

	class Snapshot {
	  constructor(storeState) {
	    _defineProperty(this, "_store", void 0);

	    _defineProperty(this, "_refCount", 0);

	    _defineProperty(this, "getLoadable", recoilValue => {
	      this.checkRefCount_INTERNAL();
	      return getRecoilValueAsLoadable$1(this._store, recoilValue);
	    });

	    _defineProperty(this, "getPromise", recoilValue => {
	      this.checkRefCount_INTERNAL();
	      return this.getLoadable(recoilValue).toPromise();
	    });

	    _defineProperty(this, "getNodes_UNSTABLE", opt => {
	      this.checkRefCount_INTERNAL(); // TODO Deal with modified selectors

	      if ((opt === null || opt === void 0 ? void 0 : opt.isModified) === true) {
	        if ((opt === null || opt === void 0 ? void 0 : opt.isInitialized) === false) {
	          return [];
	        }

	        const state = this._store.getState().currentTree;

	        return recoilValuesForKeys$2(state.dirtyAtoms);
	      }

	      const knownAtoms = this._store.getState().knownAtoms;

	      const knownSelectors = this._store.getState().knownSelectors;

	      return (opt === null || opt === void 0 ? void 0 : opt.isInitialized) == null ? recoilValues$1.values() : opt.isInitialized === true ? recoilValuesForKeys$2(Recoil_concatIterables([this._store.getState().knownAtoms, this._store.getState().knownSelectors])) : Recoil_filterIterable(recoilValues$1.values(), ({
	        key
	      }) => !knownAtoms.has(key) && !knownSelectors.has(key));
	    });

	    _defineProperty(this, "getInfo_UNSTABLE", ({
	      key
	    }) => {
	      this.checkRefCount_INTERNAL();
	      return peekNodeInfo$1(this._store, this._store.getState().currentTree, key);
	    });

	    _defineProperty(this, "map", mapper => {
	      this.checkRefCount_INTERNAL();
	      const mutableSnapshot = new MutableSnapshot(this, batchUpdates$1);
	      mapper(mutableSnapshot); // if removing batchUpdates from `set` add it here

	      return cloneSnapshot(mutableSnapshot.getStore_INTERNAL());
	    });

	    _defineProperty(this, "asyncMap", async mapper => {
	      this.checkRefCount_INTERNAL();
	      const mutableSnapshot = new MutableSnapshot(this, batchUpdates$1);
	      await mapper(mutableSnapshot);
	      return cloneSnapshot(mutableSnapshot.getStore_INTERNAL());
	    });

	    this._store = {
	      getState: () => storeState,
	      replaceState: replacer => {
	        storeState.currentTree = replacer(storeState.currentTree); // no batching so nextTree is never active
	      },
	      getGraph: version => {
	        const graphs = storeState.graphsByVersion;

	        if (graphs.has(version)) {
	          return Recoil_nullthrows(graphs.get(version));
	        }

	        const newGraph = graph$2();
	        graphs.set(version, newGraph);
	        return newGraph;
	      },
	      subscribeToTransactions: () => ({
	        release: () => {}
	      }),
	      addTransactionMetadata: () => {
	        throw new Error('Cannot subscribe to Snapshots');
	      }
	    }; // Initialize any nodes that are live in the parent store (primarily so that this
	    // snapshot gets counted towards the node's live stores count).

	    for (const nodeKey of this._store.getState().nodeCleanupFunctions.keys()) {
	      initializeNodeIfNewToStore$1(this._store, storeState.currentTree, nodeKey, 'get');
	      updateRetainCount$1(this._store, nodeKey, 1);
	    }

	    this.retain();
	    this.autorelease_INTERNAL();
	  }

	  retain() {
	    if (!Recoil_gkx_1('recoil_memory_managament_2020')) {
	      return () => undefined;
	    }

	    this._refCount++;
	    let released = false;
	    return () => {
	      if (!released) {
	        released = true;
	        this.release_INTERNAL();
	      }
	    };
	  }

	  autorelease_INTERNAL() {
	    if (!Recoil_gkx_1('recoil_memory_managament_2020')) {
	      return;
	    }

	    if (!isSSR$1) {
	      window.setTimeout(() => this.release_INTERNAL(), 0);
	    }
	  }

	  release_INTERNAL() {
	    if (!Recoil_gkx_1('recoil_memory_managament_2020')) {
	      return;
	    }

	    this._refCount--;
	    if (this._refCount === 0) ;
	  }

	  checkRefCount_INTERNAL() {
	    if (Recoil_gkx_1('recoil_memory_managament_2020') && this._refCount <= 0) ;
	  }

	  getStore_INTERNAL() {
	    this.checkRefCount_INTERNAL();
	    return this._store;
	  }

	  getID() {
	    this.checkRefCount_INTERNAL();
	    return this.getID_INTERNAL();
	  }

	  getID_INTERNAL() {
	    this.checkRefCount_INTERNAL();
	    return this._store.getState().currentTree.stateID;
	  } // We want to allow the methods to be destructured and used as accessors
	  // eslint-disable-next-line fb-www/extra-arrow-initializer


	}

	function cloneStoreState(store, treeState, bumpVersion = false) {
	  const storeState = store.getState();
	  const version = bumpVersion ? getNextTreeStateVersion$1() : treeState.version;
	  return {
	    currentTree: bumpVersion ? {
	      // TODO snapshots shouldn't really have versions because a new version number
	      // is always assigned when the snapshot is gone to.
	      version,
	      stateID: version,
	      transactionMetadata: { ...treeState.transactionMetadata
	      },
	      dirtyAtoms: new Set(treeState.dirtyAtoms),
	      atomValues: treeState.atomValues.clone(),
	      nonvalidatedAtoms: treeState.nonvalidatedAtoms.clone()
	    } : treeState,
	    commitDepth: 0,
	    nextTree: null,
	    previousTree: null,
	    knownAtoms: new Set(storeState.knownAtoms),
	    // FIXME here's a copy
	    knownSelectors: new Set(storeState.knownSelectors),
	    // FIXME here's a copy
	    transactionSubscriptions: new Map(),
	    nodeTransactionSubscriptions: new Map(),
	    nodeToComponentSubscriptions: new Map(),
	    queuedComponentCallbacks_DEPRECATED: [],
	    suspendedComponentResolvers: new Set(),
	    graphsByVersion: new Map().set(version, store.getGraph(treeState.version)),
	    versionsUsedByComponent: new Map(),
	    retention: {
	      referenceCounts: new Map(),
	      nodesRetainedByZone: new Map(),
	      retainablesToCheckForRelease: new Set()
	    },
	    nodeCleanupFunctions: new Map()
	  };
	} // Factory to build a fresh snapshot


	function freshSnapshot(initializeState) {
	  const snapshot = new Snapshot(makeEmptyStoreState$1());
	  return initializeState != null ? snapshot.map(initializeState) : snapshot;
	} // Factory to clone a snapahot state


	function cloneSnapshot(store, version = 'current') {
	  const storeState = store.getState();
	  const treeState = version === 'current' ? storeState.currentTree : Recoil_nullthrows(storeState.previousTree);
	  return new Snapshot(cloneStoreState(store, treeState));
	}

	class MutableSnapshot extends Snapshot {
	  constructor(snapshot, batch) {
	    super(cloneStoreState(snapshot.getStore_INTERNAL(), snapshot.getStore_INTERNAL().getState().currentTree, true));

	    _defineProperty(this, "_batch", void 0);

	    _defineProperty(this, "set", (recoilState, newValueOrUpdater) => {
	      this.checkRefCount_INTERNAL();
	      const store = this.getStore_INTERNAL(); // This batchUpdates ensures this `set` is applied immediately and you can
	      // read the written value after calling `set`. I would like to remove this
	      // behavior and only batch in `Snapshot.map`, but this would be a breaking
	      // change potentially.

	      this._batch(() => {
	        updateRetainCount$1(store, recoilState.key, 1);
	        setRecoilValue$1(this.getStore_INTERNAL(), recoilState, newValueOrUpdater);
	      });
	    });

	    _defineProperty(this, "reset", recoilState => {
	      this.checkRefCount_INTERNAL();
	      const store = this.getStore_INTERNAL(); // See note at `set` about batched updates.

	      this._batch(() => {
	        updateRetainCount$1(store, recoilState.key, 1);
	        setRecoilValue$1(this.getStore_INTERNAL(), recoilState, DEFAULT_VALUE$1);
	      });
	    });

	    _defineProperty(this, "setUnvalidatedAtomValues_DEPRECATED", values => {
	      this.checkRefCount_INTERNAL();
	      const store = this.getStore_INTERNAL(); // See note at `set` about batched updates.

	      batchUpdates$1(() => {
	        for (const [k, v] of values.entries()) {
	          updateRetainCount$1(store, k, 1);
	          setUnvalidatedRecoilValue$1(store, new AbstractRecoilValue$2(k), v);
	        }
	      });
	    });

	    this._batch = batch;
	  } // We want to allow the methods to be destructured and used as accessors
	  // eslint-disable-next-line fb-www/extra-arrow-initializer


	}

	var Recoil_Snapshot = {
	  Snapshot,
	  MutableSnapshot,
	  freshSnapshot,
	  cloneSnapshot
	};
	var Recoil_Snapshot_1 = Recoil_Snapshot.Snapshot;
	var Recoil_Snapshot_2 = Recoil_Snapshot.MutableSnapshot;
	var Recoil_Snapshot_3 = Recoil_Snapshot.freshSnapshot;
	var Recoil_Snapshot_4 = Recoil_Snapshot.cloneSnapshot;
	var Recoil_Snapshot$1 = /*#__PURE__*/Object.freeze({
	  __proto__: null,
	  Snapshot: Recoil_Snapshot_1,
	  MutableSnapshot: Recoil_Snapshot_2,
	  freshSnapshot: Recoil_Snapshot_3,
	  cloneSnapshot: Recoil_Snapshot_4
	}); // @fb-only: const RecoilusagelogEvent = require('RecoilusagelogEvent');
	// @fb-only: const RecoilUsageLogFalcoEvent = require('RecoilUsageLogFalcoEvent');
	// @fb-only: const URI = require('URI');

	const {
	  getNextTreeStateVersion: getNextTreeStateVersion$2,
	  makeEmptyStoreState: makeEmptyStoreState$2
	} = Recoil_State;
	const {
	  cleanUpNode: cleanUpNode$2,
	  getDownstreamNodes: getDownstreamNodes$2,
	  setNodeValue: setNodeValue$2,
	  setUnvalidatedAtomValue_DEPRECATED: setUnvalidatedAtomValue_DEPRECATED$1
	} = Recoil_FunctionalCore;
	const {
	  graph: graph$3
	} = Recoil_Graph;
	const {
	  cloneGraph: cloneGraph$1
	} = Recoil_Graph;
	const {
	  applyAtomValueWrites: applyAtomValueWrites$1
	} = Recoil_RecoilValueInterface;
	const {
	  releaseScheduledRetainablesNow: releaseScheduledRetainablesNow$1
	} = Recoil_Retention;
	const {
	  freshSnapshot: freshSnapshot$1
	} = Recoil_Snapshot$1;
	const {
	  useCallback,
	  useContext,
	  useEffect,
	  useMemo,
	  useRef,
	  useState
	} = react;

	function notInAContext() {
	  throw new Error('This component must be used inside a <RecoilRoot> component.');
	}

	const defaultStore = Object.freeze({
	  getState: notInAContext,
	  replaceState: notInAContext,
	  getGraph: notInAContext,
	  subscribeToTransactions: notInAContext,
	  addTransactionMetadata: notInAContext
	});
	let stateReplacerIsBeingExecuted = false;

	function startNextTreeIfNeeded(store) {
	  if (stateReplacerIsBeingExecuted) {
	    throw new Error('An atom update was triggered within the execution of a state updater function. State updater functions provided to Recoil must be pure functions.');
	  }

	  const storeState = store.getState();

	  if (storeState.nextTree === null) {
	    if (Recoil_gkx_1('recoil_memory_managament_2020') && Recoil_gkx_1('recoil_release_on_cascading_update_killswitch_2021')) {
	      // If this is a cascading update (that is, rendering due to one state change
	      // invokes a second state change), we won't have cleaned up retainables yet
	      // because this normally happens after notifying components. Do it before
	      // proceeding with the cascading update so that it remains predictable:
	      if (storeState.commitDepth > 0) {
	        releaseScheduledRetainablesNow$1(store);
	      }
	    }

	    const version = storeState.currentTree.version;
	    const nextVersion = getNextTreeStateVersion$2();
	    storeState.nextTree = { ...storeState.currentTree,
	      version: nextVersion,
	      stateID: nextVersion,
	      dirtyAtoms: new Set(),
	      transactionMetadata: {}
	    };
	    storeState.graphsByVersion.set(nextVersion, cloneGraph$1(Recoil_nullthrows(storeState.graphsByVersion.get(version))));
	  }
	}

	const AppContext = /*#__PURE__*/react.createContext({
	  current: defaultStore
	});

	const useStoreRef = () => useContext(AppContext);

	const MutableSourceContext = /*#__PURE__*/react.createContext(null); // TODO T2710559282599660

	function useRecoilMutableSource() {
	  const mutableSource = useContext(MutableSourceContext);

	  return mutableSource;
	}

	function notifyComponents(store, storeState, treeState) {
	  const dependentNodes = getDownstreamNodes$2(store, treeState, treeState.dirtyAtoms);

	  for (const key of dependentNodes) {
	    const comps = storeState.nodeToComponentSubscriptions.get(key);

	    if (comps) {
	      for (const [_subID, [_debugName, callback]] of comps) {
	        callback(treeState);
	      }
	    }
	  }
	}

	function sendEndOfBatchNotifications(store) {
	  const storeState = store.getState();
	  const treeState = storeState.currentTree; // Inform transaction subscribers of the transaction:

	  const dirtyAtoms = treeState.dirtyAtoms;

	  if (dirtyAtoms.size) {
	    // Execute Node-specific subscribers before global subscribers
	    for (const [key, subscriptions] of storeState.nodeTransactionSubscriptions) {
	      if (dirtyAtoms.has(key)) {
	        for (const [_, subscription] of subscriptions) {
	          subscription(store);
	        }
	      }
	    }

	    for (const [_, subscription] of storeState.transactionSubscriptions) {
	      subscription(store);
	    }

	    if (!Recoil_gkx_1('recoil_early_rendering_2021') || storeState.suspendedComponentResolvers.size) {
	      // Notifying components is needed to wake from suspense, even when using
	      // early rendering.
	      notifyComponents(store, storeState, treeState); // Wake all suspended components so the right one(s) can try to re-render.
	      // We need to wake up components not just when some asynchronous selector
	      // resolved, but also when changing synchronous values because this may cause
	      // a selector to change from asynchronous to synchronous, in which case there
	      // would be no follow-up asynchronous resolution to wake us up.
	      // TODO OPTIMIZATION Only wake up related downstream components

	      storeState.suspendedComponentResolvers.forEach(cb => cb());
	      storeState.suspendedComponentResolvers.clear();
	    }
	  } // Special behavior ONLY invoked by useInterface.
	  // FIXME delete queuedComponentCallbacks_DEPRECATED when deleting useInterface.


	  storeState.queuedComponentCallbacks_DEPRECATED.forEach(cb => cb(treeState));
	  storeState.queuedComponentCallbacks_DEPRECATED.splice(0, storeState.queuedComponentCallbacks_DEPRECATED.length);
	}

	function endBatch(storeRef) {
	  const storeState = storeRef.current.getState();
	  storeState.commitDepth++;

	  try {
	    const {
	      nextTree
	    } = storeState; // Ignore commits that are not because of Recoil transactions -- namely,
	    // because something above RecoilRoot re-rendered:

	    if (nextTree === null) {
	      return;
	    } // nextTree is now committed -- note that copying and reset occurs when
	    // a transaction begins, in startNextTreeIfNeeded:


	    storeState.previousTree = storeState.currentTree;
	    storeState.currentTree = nextTree;
	    storeState.nextTree = null;
	    sendEndOfBatchNotifications(storeRef.current);

	    if (storeState.previousTree != null) {
	      storeState.graphsByVersion.delete(storeState.previousTree.version);
	    } else {
	      Recoil_recoverableViolation('Ended batch with no previous state, which is unexpected', 'recoil');
	    }

	    storeState.previousTree = null;

	    if (Recoil_gkx_1('recoil_memory_managament_2020')) {
	      releaseScheduledRetainablesNow$1(storeRef.current);
	    }
	  } finally {
	    storeState.commitDepth--;
	  }
	}
	/*
	 * The purpose of the Batcher is to observe when React batches end so that
	 * Recoil state changes can be batched. Whenever Recoil state changes, we call
	 * setState on the batcher. Then we wait for that change to be committed, which
	 * signifies the end of the batch. That's when we respond to the Recoil change.
	 */


	function Batcher({
	  setNotifyBatcherOfChange
	}) {
	  const storeRef = useStoreRef();
	  const [_, setState] = useState([]);
	  setNotifyBatcherOfChange(() => setState({}));
	  useEffect(() => {
	    // enqueueExecution runs this function immediately; it is only used to
	    // manipulate the order of useEffects during tests, since React seems to
	    // call useEffect in an unpredictable order sometimes.
	    Recoil_Queue.enqueueExecution('Batcher', () => {
	      endBatch(storeRef);
	    });
	  }); // If an asynchronous selector resolves after the Batcher is unmounted,
	  // notifyBatcherOfChange will still be called. An error gets thrown whenever
	  // setState is called after a component is already unmounted, so this sets
	  // notifyBatcherOfChange to be a no-op.

	  useEffect(() => {
	    return () => {
	      setNotifyBatcherOfChange(() => {});
	    };
	  }, [setNotifyBatcherOfChange]);
	  return null;
	}
	// which will no longer be needed.


	function initialStoreState_DEPRECATED(store, initializeState) {
	  const initial = makeEmptyStoreState$2();
	  initializeState({
	    // $FlowFixMe[escaped-generic]
	    set: (atom, value) => {
	      const state = initial.currentTree;
	      const writes = setNodeValue$2(store, state, atom.key, value);
	      const writtenNodes = new Set(writes.keys());
	      const nonvalidatedAtoms = state.nonvalidatedAtoms.clone();

	      for (const n of writtenNodes) {
	        nonvalidatedAtoms.delete(n);
	      }

	      initial.currentTree = { ...state,
	        dirtyAtoms: Recoil_unionSets(state.dirtyAtoms, writtenNodes),
	        atomValues: applyAtomValueWrites$1(state.atomValues, writes),
	        // NB: PLEASE un-export applyAtomValueWrites when deleting this code
	        nonvalidatedAtoms
	      };
	    },
	    setUnvalidatedAtomValues: atomValues => {
	      // FIXME replace this with a mutative loop
	      atomValues.forEach((v, k) => {
	        initial.currentTree = setUnvalidatedAtomValue_DEPRECATED$1(initial.currentTree, k, v);
	      });
	    }
	  });
	  return initial;
	}

	function initialStoreState(initializeState) {
	  const snapshot = freshSnapshot$1().map(initializeState);
	  return snapshot.getStore_INTERNAL().getState();
	}

	let nextID = 0;

	function RecoilRoot_INTERNAL({
	  initializeState_DEPRECATED,
	  initializeState,
	  store_INTERNAL: storeProp,
	  // For use with React "context bridging"
	  children
	}) {
	  var _createMutableSource; // prettier-ignore
	  // @fb-only: useEffect(() => {
	  // @fb-only: if (gkx('recoil_usage_logging')) {
	  // @fb-only: try {
	  // @fb-only: RecoilUsageLogFalcoEvent.log(() => ({
	  // @fb-only: type: RecoilusagelogEvent.RECOIL_ROOT_MOUNTED,
	  // @fb-only: path: URI.getRequestURI().getPath(),
	  // @fb-only: }));
	  // @fb-only: } catch {
	  // @fb-only: recoverableViolation(
	  // @fb-only: 'Error when logging Recoil Usage event',
	  // @fb-only: 'recoil',
	  // @fb-only: );
	  // @fb-only: }
	  // @fb-only: }
	  // @fb-only: }, []);


	  let storeState; // eslint-disable-line prefer-const

	  const getGraph = version => {
	    const graphs = storeState.current.graphsByVersion;

	    if (graphs.has(version)) {
	      return Recoil_nullthrows(graphs.get(version));
	    }

	    const newGraph = graph$3();
	    graphs.set(version, newGraph);
	    return newGraph;
	  };

	  const subscribeToTransactions = (callback, key) => {
	    if (key == null) {
	      // Global transaction subscriptions
	      const {
	        transactionSubscriptions
	      } = storeRef.current.getState();
	      const id = nextID++;
	      transactionSubscriptions.set(id, callback);
	      return {
	        release: () => {
	          transactionSubscriptions.delete(id);
	        }
	      };
	    } else {
	      // Node-specific transaction subscriptions:
	      const {
	        nodeTransactionSubscriptions
	      } = storeRef.current.getState();

	      if (!nodeTransactionSubscriptions.has(key)) {
	        nodeTransactionSubscriptions.set(key, new Map());
	      }

	      const id = nextID++;
	      Recoil_nullthrows(nodeTransactionSubscriptions.get(key)).set(id, callback);
	      return {
	        release: () => {
	          const subs = nodeTransactionSubscriptions.get(key);

	          if (subs) {
	            subs.delete(id);

	            if (subs.size === 0) {
	              nodeTransactionSubscriptions.delete(key);
	            }
	          }
	        }
	      };
	    }
	  };

	  const addTransactionMetadata = metadata => {
	    startNextTreeIfNeeded(storeRef.current);

	    for (const k of Object.keys(metadata)) {
	      Recoil_nullthrows(storeRef.current.getState().nextTree).transactionMetadata[k] = metadata[k];
	    }
	  };

	  const replaceState = replacer => {
	    const storeState = storeRef.current.getState();
	    startNextTreeIfNeeded(storeRef.current); // Use replacer to get the next state:

	    const nextTree = Recoil_nullthrows(storeState.nextTree);
	    let replaced;

	    try {
	      stateReplacerIsBeingExecuted = true;
	      replaced = replacer(nextTree);
	    } finally {
	      stateReplacerIsBeingExecuted = false;
	    }

	    if (replaced === nextTree) {
	      return;
	    }


	    storeState.nextTree = replaced;

	    if (Recoil_gkx_1('recoil_early_rendering_2021')) {
	      notifyComponents(store, storeState, replaced);
	    }

	    Recoil_nullthrows(notifyBatcherOfChange.current)();
	  };

	  const notifyBatcherOfChange = useRef(null);
	  const setNotifyBatcherOfChange = useCallback(x => {
	    notifyBatcherOfChange.current = x;
	  }, [notifyBatcherOfChange]); // FIXME T2710559282599660

	  const createMutableSource = (_createMutableSource = react.createMutableSource) !== null && _createMutableSource !== void 0 ? _createMutableSource : // flowlint-line unclear-type:off
	  react.unstable_createMutableSource; // flowlint-line unclear-type:off

	  const store = storeProp !== null && storeProp !== void 0 ? storeProp : {
	    getState: () => storeState.current,
	    replaceState,
	    getGraph,
	    subscribeToTransactions,
	    addTransactionMetadata
	  };
	  const storeRef = useRef(store);
	  storeState = useRef(initializeState_DEPRECATED != null ? initialStoreState_DEPRECATED(store, initializeState_DEPRECATED) : initializeState != null ? initialStoreState(initializeState) : makeEmptyStoreState$2());
	  const mutableSource = useMemo(() => createMutableSource ? createMutableSource(storeState, () => storeState.current.currentTree.version) : null, [createMutableSource, storeState]); // Cleanup when the <RecoilRoot> is unmounted

	  useEffect(() => () => {
	    for (const atomKey of storeRef.current.getState().knownAtoms) {
	      cleanUpNode$2(storeRef.current, atomKey);
	    }
	  }, []);
	  return /*#__PURE__*/react.createElement(AppContext.Provider, {
	    value: storeRef
	  }, /*#__PURE__*/react.createElement(MutableSourceContext.Provider, {
	    value: mutableSource
	  }, /*#__PURE__*/react.createElement(Batcher, {
	    setNotifyBatcherOfChange: setNotifyBatcherOfChange
	  }), children));
	}

	function RecoilRoot(props) {
	  const {
	    override,
	    ...propsExceptOverride
	  } = props;
	  const ancestorStoreRef = useStoreRef();

	  if (override === false && ancestorStoreRef.current !== defaultStore) {
	    // If ancestorStoreRef.current !== defaultStore, it means that this
	    // RecoilRoot is not nested within another.
	    return props.children;
	  }

	  return /*#__PURE__*/react.createElement(RecoilRoot_INTERNAL, propsExceptOverride);
	}

	var Recoil_RecoilRoot_react = {
	  useStoreRef,
	  useRecoilMutableSource,
	  RecoilRoot,
	  notifyComponents_FOR_TESTING: notifyComponents,
	  sendEndOfBatchNotifications_FOR_TESTING: sendEndOfBatchNotifications
	};
	const {
	  loadableWithValue: loadableWithValue$1
	} = Recoil_Loadable;
	const {
	  DEFAULT_VALUE: DEFAULT_VALUE$2,
	  getNode: getNode$3
	} = Recoil_Node;
	const {
	  copyTreeState: copyTreeState$1,
	  getRecoilValueAsLoadable: getRecoilValueAsLoadable$2,
	  invalidateDownstreams: invalidateDownstreams$1,
	  writeLoadableToTreeState: writeLoadableToTreeState$1
	} = Recoil_RecoilValueInterface;

	function isAtom(recoilValue) {
	  return getNode$3(recoilValue.key).nodeType === 'atom';
	}

	class TransactionInterfaceImpl {
	  constructor(store, treeState) {
	    _defineProperty(this, "_store", void 0);

	    _defineProperty(this, "_treeState", void 0);

	    _defineProperty(this, "_changes", void 0);

	    _defineProperty(this, "get", recoilValue => {
	      if (this._changes.has(recoilValue.key)) {
	        // $FlowFixMe[incompatible-return]
	        return this._changes.get(recoilValue.key);
	      }

	      if (!isAtom(recoilValue)) {
	        throw new Error('Reading selectors within atomicUpdate is not supported');
	      }

	      const loadable = getRecoilValueAsLoadable$2(this._store, recoilValue, this._treeState);

	      if (loadable.state === 'hasValue') {
	        return loadable.contents;
	      } else if (loadable.state === 'hasError') {
	        throw loadable.contents;
	      } else {
	        throw new Error(`Expected Recoil atom ${recoilValue.key} to have a value, but it is in a loading state.`);
	      }
	    });

	    _defineProperty(this, "set", (recoilState, valueOrUpdater) => {
	      if (!isAtom(recoilState)) {
	        throw new Error('Setting selectors within atomicUpdate is not supported');
	      }

	      if (typeof valueOrUpdater === 'function') {
	        const current = this.get(recoilState);

	        this._changes.set(recoilState.key, valueOrUpdater(current)); // flowlint-line unclear-type:off

	      } else {
	        this._changes.set(recoilState.key, valueOrUpdater);
	      }
	    });

	    _defineProperty(this, "reset", recoilState => {
	      this.set(recoilState, DEFAULT_VALUE$2);
	    });

	    this._store = store;
	    this._treeState = treeState;
	    this._changes = new Map();
	  } // Allow destructing
	  // eslint-disable-next-line fb-www/extra-arrow-initializer


	  newTreeState_INTERNAL() {
	    if (this._changes.size === 0) {
	      return this._treeState;
	    }

	    const newState = copyTreeState$1(this._treeState);

	    for (const [k, v] of this._changes) {
	      writeLoadableToTreeState$1(newState, k, loadableWithValue$1(v));
	    }

	    invalidateDownstreams$1(this._store, newState);
	    return newState;
	  }

	}

	function atomicUpdater(store) {
	  return fn => {
	    store.replaceState(treeState => {
	      const changeset = new TransactionInterfaceImpl(store, treeState);
	      fn(changeset);
	      return changeset.newTreeState_INTERNAL();
	    });
	  };
	}

	var Recoil_AtomicUpdates = {
	  atomicUpdater
	};
	var Recoil_AtomicUpdates_1 = Recoil_AtomicUpdates.atomicUpdater;
	var Recoil_AtomicUpdates$1 = /*#__PURE__*/Object.freeze({
	  __proto__: null,
	  atomicUpdater: Recoil_AtomicUpdates_1
	});
	/**
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @emails oncall+recoil
	 * 
	 * @format
	 */

	/**
	 * Returns a map containing all of the keys + values from the original map where
	 * the given callback returned true.
	 */

	function filterMap(map, callback) {
	  const result = new Map();

	  for (const [key, value] of map) {
	    if (callback(value, key)) {
	      result.set(key, value);
	    }
	  }

	  return result;
	}

	var Recoil_filterMap = filterMap;
	/**
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @emails oncall+recoil
	 * 
	 * @format
	 */

	/**
	 * Returns a set containing all of the values from the original set where
	 * the given callback returned true.
	 */

	function filterSet(set, callback) {
	  const result = new Set();

	  for (const value of set) {
	    if (callback(value)) {
	      result.add(value);
	    }
	  }

	  return result;
	}

	var Recoil_filterSet = filterSet;
	/**
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @emails oncall+recoil
	 * 
	 * @format
	 */

	function invariant(condition, message) {
	  if (!condition) {
	    throw new Error(message);
	  }
	}

	var invariant_1 = invariant; // @oss-only

	var Recoil_invariant = invariant_1;
	/**
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @emails oncall+recoil
	 * 
	 * @format
	 */

	function mergeMaps(...maps) {
	  const result = new Map();

	  for (let i = 0; i < maps.length; i++) {
	    const iterator = maps[i].keys();
	    let nextKey;

	    while (!(nextKey = iterator.next()).done) {
	      // $FlowFixMe[incompatible-call] - map/iterator knows nothing about flow types
	      result.set(nextKey.value, maps[i].get(nextKey.value));
	    }
	  }
	  /* $FlowFixMe[incompatible-return] (>=0.66.0 site=www,mobile) This comment
	   * suppresses an error found when Flow v0.66 was deployed. To see the error
	   * delete this comment and run Flow. */


	  return result;
	}

	var Recoil_mergeMaps = mergeMaps;
	/**
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @emails oncall+recoil
	 * 
	 * @format
	 */

	function shallowArrayEqual(a, b) {
	  if (a === b) {
	    return true;
	  }

	  if (a.length !== b.length) {
	    return false;
	  }

	  for (let i = 0, l = a.length; i < l; i++) {
	    if (a[i] !== b[i]) {
	      return false;
	    }
	  }

	  return true;
	}

	var Recoil_shallowArrayEqual = shallowArrayEqual;
	const {
	  useRef: useRef$1
	} = react;

	function useComponentName() {
	  useRef$1();


	  return '<component name not available>'; // @oss-only
	}

	var Recoil_useComponentName = useComponentName;
	const {
	  atomicUpdater: atomicUpdater$1
	} = Recoil_AtomicUpdates$1;
	const {
	  batchUpdates: batchUpdates$2
	} = Recoil_Batching;
	const {
	  DEFAULT_VALUE: DEFAULT_VALUE$3,
	  getNode: getNode$4,
	  nodes: nodes$1
	} = Recoil_Node;
	const {
	  useRecoilMutableSource: useRecoilMutableSource$1,
	  useStoreRef: useStoreRef$1
	} = Recoil_RecoilRoot_react;
	const {
	  AbstractRecoilValue: AbstractRecoilValue$3,
	  getRecoilValueAsLoadable: getRecoilValueAsLoadable$3,
	  setRecoilValue: setRecoilValue$2,
	  setRecoilValueLoadable: setRecoilValueLoadable$1,
	  setUnvalidatedRecoilValue: setUnvalidatedRecoilValue$2,
	  subscribeToRecoilValue: subscribeToRecoilValue$1
	} = Recoil_RecoilValueInterface;
	const {
	  updateRetainCount: updateRetainCount$2
	} = Recoil_Retention;
	const {
	  RetentionZone: RetentionZone$3
	} = Recoil_RetentionZone;
	const {
	  Snapshot: Snapshot$1,
	  cloneSnapshot: cloneSnapshot$1
	} = Recoil_Snapshot$1;
	const {
	  setByAddingToSet: setByAddingToSet$2
	} = Recoil_CopyOnWrite;
	const {
	  isSSR: isSSR$2
	} = Recoil_Environment;
	const {
	  mutableSourceExists: mutableSourceExists$2,
	  useMutableSource: useMutableSource$1
	} = Recoil_mutableSource;
	const {
	  useCallback: useCallback$1,
	  useEffect: useEffect$1,
	  useMemo: useMemo$1,
	  useRef: useRef$2,
	  useState: useState$1
	} = react; // Components that aren't mounted after suspending for this long will be assumed
	// to be discarded and their resources released.

	const SUSPENSE_TIMEOUT_MS = 120000;

	function handleLoadable(loadable, recoilValue, storeRef) {
	  // We can't just throw the promise we are waiting on to Suspense.  If the
	  // upstream dependencies change it may produce a state in which the component
	  // can render, but it would still be suspended on a Promise that may never resolve.
	  if (loadable.state === 'hasValue') {
	    return loadable.contents;
	  } else if (loadable.state === 'loading') {
	    const promise = new Promise(resolve => {
	      storeRef.current.getState().suspendedComponentResolvers.add(resolve);
	    }); // $FlowFixMe Flow(prop-missing) for integrating with tools that inspect thrown promises @fb-only
	    // @fb-only: promise.displayName = `Recoil State: ${recoilValue.key}`;

	    throw promise;
	  } else if (loadable.state === 'hasError') {
	    throw loadable.contents;
	  } else {
	    const err = new Error(`Invalid value of loadable atom "${recoilValue.key}"`);
	    throw err;
	  }
	}
	/**
	 * Various things are broken with useRecoilInterface, particularly concurrent mode
	 * and memory management. They will not be fixed.
	 * */


	function useRecoilInterface_DEPRECATED() {
	  const storeRef = useStoreRef$1();
	  const [_, forceUpdate] = useState$1([]);
	  const recoilValuesUsed = useRef$2(new Set());
	  recoilValuesUsed.current = new Set(); // Track the RecoilValues used just during this render

	  const previousSubscriptions = useRef$2(new Set());
	  const subscriptions = useRef$2(new Map());
	  const unsubscribeFrom = useCallback$1(key => {
	    const sub = subscriptions.current.get(key);

	    if (sub) {
	      sub.release();
	      subscriptions.current.delete(key);
	    }
	  }, [subscriptions]);
	  const componentName = Recoil_useComponentName();
	  useEffect$1(() => {
	    const store = storeRef.current;

	    function updateState(_state, key) {
	      if (!subscriptions.current.has(key)) {
	        return;
	      }

	      forceUpdate([]);
	    }

	    Recoil_differenceSets(recoilValuesUsed.current, previousSubscriptions.current).forEach(key => {
	      if (subscriptions.current.has(key)) {
	        return;
	      }

	      const sub = subscribeToRecoilValue$1(store, new AbstractRecoilValue$3(key), state => {
	        updateState(state, key);
	      }, componentName);
	      subscriptions.current.set(key, sub);
	      /**
	       * Since we're subscribing in an effect we need to update to the latest
	       * value of the atom since it may have changed since we rendered. We can
	       * go ahead and do that now, unless we're in the middle of a batch --
	       * in which case we should do it at the end of the batch, due to the
	       * following edge case: Suppose an atom is updated in another useEffect
	       * of this same component. Then the following sequence of events occur:
	       * 1. Atom is updated and subs fired (but we may not be subscribed
	       *    yet depending on order of effects, so we miss this) Updated value
	       *    is now in nextTree, but not currentTree.
	       * 2. This effect happens. We subscribe and update.
	       * 3. From the update we re-render and read currentTree, with old value.
	       * 4. Batcher's effect sets currentTree to nextTree.
	       * In this sequence we miss the update. To avoid that, add the update
	       * to queuedComponentCallback if a batch is in progress.
	       */
	      // FIXME delete queuedComponentCallbacks_DEPRECATED when deleting useInterface.

	      const state = store.getState();

	      if (state.nextTree) {
	        store.getState().queuedComponentCallbacks_DEPRECATED.push(() => {
	          updateState(store.getState(), key);
	        });
	      } else {
	        updateState(store.getState(), key);
	      }
	    });
	    Recoil_differenceSets(previousSubscriptions.current, recoilValuesUsed.current).forEach(key => {
	      unsubscribeFrom(key);
	    });
	    previousSubscriptions.current = recoilValuesUsed.current;
	  });
	  useEffect$1(() => {
	    const subs = subscriptions.current;
	    return () => subs.forEach((_, key) => unsubscribeFrom(key));
	  }, [unsubscribeFrom]);
	  return useMemo$1(() => {
	    function useSetRecoilState(recoilState) {

	      return newValueOrUpdater => {
	        setRecoilValue$2(storeRef.current, recoilState, newValueOrUpdater);
	      };
	    }

	    function useResetRecoilState(recoilState) {

	      return () => setRecoilValue$2(storeRef.current, recoilState, DEFAULT_VALUE$3);
	    }

	    function useRecoilValueLoadable(recoilValue) {
	      var _storeState$nextTree;

	      if (!recoilValuesUsed.current.has(recoilValue.key)) {
	        recoilValuesUsed.current = setByAddingToSet$2(recoilValuesUsed.current, recoilValue.key);
	      } // TODO Restore optimization to memoize lookup


	      const storeState = storeRef.current.getState();
	      return getRecoilValueAsLoadable$3(storeRef.current, recoilValue, Recoil_gkx_1('recoil_early_rendering_2021') ? (_storeState$nextTree = storeState.nextTree) !== null && _storeState$nextTree !== void 0 ? _storeState$nextTree : storeState.currentTree : storeState.currentTree);
	    }

	    function useRecoilValue(recoilValue) {

	      const loadable = useRecoilValueLoadable(recoilValue);
	      return handleLoadable(loadable, recoilValue, storeRef);
	    }

	    function useRecoilState(recoilState) {

	      return [useRecoilValue(recoilState), useSetRecoilState(recoilState)];
	    }

	    function useRecoilStateLoadable(recoilState) {

	      return [useRecoilValueLoadable(recoilState), useSetRecoilState(recoilState)];
	    }

	    return {
	      getRecoilValue: useRecoilValue,
	      getRecoilValueLoadable: useRecoilValueLoadable,
	      getRecoilState: useRecoilState,
	      getRecoilStateLoadable: useRecoilStateLoadable,
	      getSetRecoilState: useSetRecoilState,
	      getResetRecoilState: useResetRecoilState
	    };
	  }, [recoilValuesUsed, storeRef]);
	}

	const recoilComponentGetRecoilValueCount_FOR_TESTING = {
	  current: 0
	};

	function useRecoilValueLoadable_MUTABLESOURCE(recoilValue) {

	  const storeRef = useStoreRef$1();
	  const getLoadable = useCallback$1(() => {
	    var _storeState$nextTree2;

	    const store = storeRef.current;
	    const storeState = store.getState();
	    const treeState = Recoil_gkx_1('recoil_early_rendering_2021') ? (_storeState$nextTree2 = storeState.nextTree) !== null && _storeState$nextTree2 !== void 0 ? _storeState$nextTree2 : storeState.currentTree : storeState.currentTree;
	    return getRecoilValueAsLoadable$3(store, recoilValue, treeState);
	  }, [storeRef, recoilValue]);
	  const getLoadableWithTesting = useCallback$1(() => {

	    return getLoadable();
	  }, [getLoadable]);
	  const componentName = Recoil_useComponentName();
	  const subscribe = useCallback$1((_storeState, callback) => {
	    const store = storeRef.current;
	    const subscription = subscribeToRecoilValue$1(store, recoilValue, () => {
	      if (!Recoil_gkx_1('recoil_suppress_rerender_in_callback')) {
	        return callback();
	      } // Only re-render if the value has changed.
	      // This will evaluate the atom/selector now as well as when the
	      // component renders, but that may help with prefetching.


	      const newLoadable = getLoadable();

	      if (!prevLoadableRef.current.is(newLoadable)) {
	        callback();
	      } // If the component is suspended then the effect setting prevLoadableRef
	      // will not run.  So, set the previous value here when its subscription
	      // is fired to wake it up.  We can't just rely on this, though, because
	      // this only executes when an atom/selector is dirty and the atom/selector
	      // passed to the hook can dynamically change.


	      prevLoadableRef.current = newLoadable;
	    }, componentName);
	    return subscription.release;
	  }, [storeRef, recoilValue, componentName, getLoadable]);
	  const source = useRecoilMutableSource$1();
	  const loadable = useMutableSource$1(source, getLoadableWithTesting, subscribe);
	  const prevLoadableRef = useRef$2(loadable);
	  useEffect$1(() => {
	    prevLoadableRef.current = loadable;
	  });
	  return loadable;
	}

	function useRecoilValueLoadable_LEGACY(recoilValue) {

	  const storeRef = useStoreRef$1();
	  const [_, forceUpdate] = useState$1([]);
	  const componentName = Recoil_useComponentName();
	  useEffect$1(() => {
	    const store = storeRef.current;
	    const storeState = store.getState();
	    const subscription = subscribeToRecoilValue$1(store, recoilValue, _state => {
	      var _prevLoadableRef$curr;

	      if (!Recoil_gkx_1('recoil_suppress_rerender_in_callback')) {
	        return forceUpdate([]);
	      }

	      const newLoadable = getRecoilValueAsLoadable$3(store, recoilValue, store.getState().currentTree);

	      if (!((_prevLoadableRef$curr = prevLoadableRef.current) === null || _prevLoadableRef$curr === void 0 ? void 0 : _prevLoadableRef$curr.is(newLoadable))) {
	        forceUpdate(newLoadable);
	      }

	      prevLoadableRef.current = newLoadable;
	    }, componentName);
	    /**
	     * Since we're subscribing in an effect we need to update to the latest
	     * value of the atom since it may have changed since we rendered. We can
	     * go ahead and do that now, unless we're in the middle of a batch --
	     * in which case we should do it at the end of the batch, due to the
	     * following edge case: Suppose an atom is updated in another useEffect
	     * of this same component. Then the following sequence of events occur:
	     * 1. Atom is updated and subs fired (but we may not be subscribed
	     *    yet depending on order of effects, so we miss this) Updated value
	     *    is now in nextTree, but not currentTree.
	     * 2. This effect happens. We subscribe and update.
	     * 3. From the update we re-render and read currentTree, with old value.
	     * 4. Batcher's effect sets currentTree to nextTree.
	     * In this sequence we miss the update. To avoid that, add the update
	     * to queuedComponentCallback if a batch is in progress.
	     */

	    if (storeState.nextTree) {
	      store.getState().queuedComponentCallbacks_DEPRECATED.push(() => {
	        prevLoadableRef.current = null;
	        forceUpdate([]);
	      });
	    } else {
	      var _prevLoadableRef$curr2;

	      if (!Recoil_gkx_1('recoil_suppress_rerender_in_callback')) {
	        return forceUpdate([]);
	      }

	      const newLoadable = getRecoilValueAsLoadable$3(store, recoilValue, store.getState().currentTree);

	      if (!((_prevLoadableRef$curr2 = prevLoadableRef.current) === null || _prevLoadableRef$curr2 === void 0 ? void 0 : _prevLoadableRef$curr2.is(newLoadable))) {
	        forceUpdate(newLoadable);
	      }

	      prevLoadableRef.current = newLoadable;
	    }

	    return subscription.release;
	  }, [componentName, recoilValue, storeRef]);
	  const loadable = getRecoilValueAsLoadable$3(storeRef.current, recoilValue);
	  const prevLoadableRef = useRef$2(loadable);
	  useEffect$1(() => {
	    prevLoadableRef.current = loadable;
	  });
	  return loadable;
	}
	/**
	  Like useRecoilValue(), but either returns the value if available or
	  just undefined if not available for any reason, such as pending or error.
	*/


	function useRecoilValueLoadable(recoilValue) {
	  if (Recoil_gkx_1('recoil_memory_managament_2020')) {
	    // eslint-disable-next-line fb-www/react-hooks
	    useRetain(recoilValue);
	  }

	  if (mutableSourceExists$2()) {
	    // eslint-disable-next-line fb-www/react-hooks
	    return useRecoilValueLoadable_MUTABLESOURCE(recoilValue);
	  } else {
	    // eslint-disable-next-line fb-www/react-hooks
	    return useRecoilValueLoadable_LEGACY(recoilValue);
	  }
	}
	/**
	  Returns the value represented by the RecoilValue.
	  If the value is pending, it will throw a Promise to suspend the component,
	  if the value is an error it will throw it for the nearest React error boundary.
	  This will also subscribe the component for any updates in the value.
	  */


	function useRecoilValue(recoilValue) {

	  const storeRef = useStoreRef$1();
	  const loadable = useRecoilValueLoadable(recoilValue);
	  return handleLoadable(loadable, recoilValue, storeRef);
	}
	/**
	  Returns a function that allows the value of a RecoilState to be updated, but does
	  not subscribe the component to changes to that RecoilState.
	*/


	function useSetRecoilState(recoilState) {

	  const storeRef = useStoreRef$1();
	  return useCallback$1(newValueOrUpdater => {
	    setRecoilValue$2(storeRef.current, recoilState, newValueOrUpdater);
	  }, [storeRef, recoilState]);
	}
	/**
	  Returns a function that will reset the value of a RecoilState to its default
	*/


	function useResetRecoilState(recoilState) {

	  const storeRef = useStoreRef$1();
	  return useCallback$1(() => {
	    setRecoilValue$2(storeRef.current, recoilState, DEFAULT_VALUE$3);
	  }, [storeRef, recoilState]);
	}
	/**
	  Equivalent to useState(). Allows the value of the RecoilState to be read and written.
	  Subsequent updates to the RecoilState will cause the component to re-render. If the
	  RecoilState is pending, this will suspend the component and initiate the
	  retrieval of the value. If evaluating the RecoilState resulted in an error, this will
	  throw the error so that the nearest React error boundary can catch it.
	*/


	function useRecoilState(recoilState) {

	  return [useRecoilValue(recoilState), useSetRecoilState(recoilState)];
	}
	/**
	  Like useRecoilState(), but does not cause Suspense or React error handling. Returns
	  an object that indicates whether the RecoilState is available, pending, or
	  unavailable due to an error.
	*/


	function useRecoilStateLoadable(recoilState) {

	  return [useRecoilValueLoadable(recoilState), useSetRecoilState(recoilState)];
	}

	function useTransactionSubscription(callback) {
	  const storeRef = useStoreRef$1();
	  useEffect$1(() => {
	    const sub = storeRef.current.subscribeToTransactions(callback);
	    return sub.release;
	  }, [callback, storeRef]);
	}

	function externallyVisibleAtomValuesInState(state) {
	  const atomValues = state.atomValues.toMap();
	  const persistedAtomContentsValues = Recoil_mapMap(Recoil_filterMap(atomValues, (v, k) => {
	    const node = getNode$4(k);
	    const persistence = node.persistence_UNSTABLE;
	    return persistence != null && persistence.type !== 'none' && v.state === 'hasValue';
	  }), v => v.contents); // Merge in nonvalidated atoms; we may not have defs for them but they will
	  // all have persistence on or they wouldn't be there in the first place.

	  return Recoil_mergeMaps(state.nonvalidatedAtoms.toMap(), persistedAtomContentsValues);
	}
	/**
	  Calls the given callback after any atoms have been modified and the consequent
	  component re-renders have been committed. This is intended for persisting
	  the values of the atoms to storage. The stored values can then be restored
	  using the useSetUnvalidatedAtomValues hook.

	  The callback receives the following info:

	  atomValues: The current value of every atom that is both persistable (persistence
	              type not set to 'none') and whose value is available (not in an
	              error or loading state).

	  previousAtomValues: The value of every persistable and available atom before
	               the transaction began.

	  atomInfo: A map containing the persistence settings for each atom. Every key
	            that exists in atomValues will also exist in atomInfo.

	  modifiedAtoms: The set of atoms that were written to during the transaction.

	  transactionMetadata: Arbitrary information that was added via the
	          useSetUnvalidatedAtomValues hook. Useful for ignoring the useSetUnvalidatedAtomValues
	          transaction, to avoid loops.
	*/


	function useTransactionObservation_DEPRECATED(callback) {
	  useTransactionSubscription(useCallback$1(store => {
	    let previousTree = store.getState().previousTree;
	    const currentTree = store.getState().currentTree;

	    if (!previousTree) {
	      previousTree = store.getState().currentTree; // attempt to trundle on
	    }

	    const atomValues = externallyVisibleAtomValuesInState(currentTree);
	    const previousAtomValues = externallyVisibleAtomValuesInState(previousTree);
	    const atomInfo = Recoil_mapMap(nodes$1, node => {
	      var _node$persistence_UNS, _node$persistence_UNS2, _node$persistence_UNS3, _node$persistence_UNS4;

	      return {
	        persistence_UNSTABLE: {
	          type: (_node$persistence_UNS = (_node$persistence_UNS2 = node.persistence_UNSTABLE) === null || _node$persistence_UNS2 === void 0 ? void 0 : _node$persistence_UNS2.type) !== null && _node$persistence_UNS !== void 0 ? _node$persistence_UNS : 'none',
	          backButton: (_node$persistence_UNS3 = (_node$persistence_UNS4 = node.persistence_UNSTABLE) === null || _node$persistence_UNS4 === void 0 ? void 0 : _node$persistence_UNS4.backButton) !== null && _node$persistence_UNS3 !== void 0 ? _node$persistence_UNS3 : false
	        }
	      };
	    }); // Filter on existance in atomValues so that externally-visible rules
	    // are also applied to modified atoms (specifically exclude selectors):

	    const modifiedAtoms = Recoil_filterSet(currentTree.dirtyAtoms, k => atomValues.has(k) || previousAtomValues.has(k));
	    callback({
	      atomValues,
	      previousAtomValues,
	      atomInfo,
	      modifiedAtoms,
	      transactionMetadata: { ...currentTree.transactionMetadata
	      }
	    });
	  }, [callback]));
	}

	function useRecoilTransactionObserver(callback) {
	  useTransactionSubscription(useCallback$1(store => {
	    const snapshot = cloneSnapshot$1(store, 'current');
	    const previousSnapshot = cloneSnapshot$1(store, 'previous');
	    callback({
	      snapshot,
	      previousSnapshot
	    });
	  }, [callback]));
	}

	function usePrevious(value) {
	  const ref = useRef$2();
	  useEffect$1(() => {
	    ref.current = value;
	  });
	  return ref.current;
	} // Return a snapshot of the current state and subscribe to all state changes


	function useRecoilSnapshot() {
	  const storeRef = useStoreRef$1();
	  const [snapshot, setSnapshot] = useState$1(() => cloneSnapshot$1(storeRef.current));
	  const previousSnapshot = usePrevious(snapshot);
	  const timeoutID = useRef$2();
	  useEffect$1(() => {
	    if (timeoutID.current && !isSSR$2) {
	      window.clearTimeout(timeoutID.current);
	    }

	    return snapshot.retain();
	  }, [snapshot]);
	  useTransactionSubscription(useCallback$1(store => setSnapshot(cloneSnapshot$1(store)), []));

	  if (previousSnapshot !== snapshot && !isSSR$2) {
	    if (timeoutID.current) {
	      previousSnapshot === null || previousSnapshot === void 0 ? void 0 : previousSnapshot.release_INTERNAL();
	      window.clearTimeout(timeoutID.current);
	    }

	    snapshot.retain();
	    timeoutID.current = window.setTimeout(() => {
	      snapshot.release_INTERNAL();
	      timeoutID.current = null;
	    }, SUSPENSE_TIMEOUT_MS);
	  }

	  return snapshot;
	}

	function useGotoRecoilSnapshot() {
	  const storeRef = useStoreRef$1();
	  return useCallback$1(snapshot => {
	    var _storeState$nextTree3;

	    const storeState = storeRef.current.getState();
	    const prev = (_storeState$nextTree3 = storeState.nextTree) !== null && _storeState$nextTree3 !== void 0 ? _storeState$nextTree3 : storeState.currentTree;
	    const next = snapshot.getStore_INTERNAL().getState().currentTree;
	    batchUpdates$2(() => {
	      const keysToUpdate = new Set();

	      for (const keys of [prev.atomValues.keys(), next.atomValues.keys()]) {
	        for (const key of keys) {
	          var _prev$atomValues$get, _next$atomValues$get;

	          if (((_prev$atomValues$get = prev.atomValues.get(key)) === null || _prev$atomValues$get === void 0 ? void 0 : _prev$atomValues$get.contents) !== ((_next$atomValues$get = next.atomValues.get(key)) === null || _next$atomValues$get === void 0 ? void 0 : _next$atomValues$get.contents) && getNode$4(key).shouldRestoreFromSnapshots) {
	            keysToUpdate.add(key);
	          }
	        }
	      }

	      keysToUpdate.forEach(key => {
	        setRecoilValueLoadable$1(storeRef.current, new AbstractRecoilValue$3(key), next.atomValues.has(key) ? Recoil_nullthrows(next.atomValues.get(key)) : DEFAULT_VALUE$3);
	      });
	      storeRef.current.replaceState(state => {
	        return { ...state,
	          stateID: snapshot.getID_INTERNAL()
	        };
	      });
	    });
	  }, [storeRef]);
	}

	function useSetUnvalidatedAtomValues() {
	  const storeRef = useStoreRef$1();
	  return (values, transactionMetadata = {}) => {
	    batchUpdates$2(() => {
	      storeRef.current.addTransactionMetadata(transactionMetadata);
	      values.forEach((value, key) => setUnvalidatedRecoilValue$2(storeRef.current, new AbstractRecoilValue$3(key), value));
	    });
	  };
	}

	class Sentinel {}

	const SENTINEL = new Sentinel();

	function useRecoilCallback(fn, deps) {
	  const storeRef = useStoreRef$1();
	  const gotoSnapshot = useGotoRecoilSnapshot();
	  return useCallback$1((...args) => {
	    function set(recoilState, newValueOrUpdater) {
	      setRecoilValue$2(storeRef.current, recoilState, newValueOrUpdater);
	    }

	    function reset(recoilState) {
	      setRecoilValue$2(storeRef.current, recoilState, DEFAULT_VALUE$3);
	    } // Use currentTree for the snapshot to show the currently committed state


	    const snapshot = cloneSnapshot$1(storeRef.current); // FIXME massive gains from doing this lazily

	    const atomicUpdate = atomicUpdater$1(storeRef.current);
	    let ret = SENTINEL;
	    batchUpdates$2(() => {
	      const errMsg = 'useRecoilCallback expects a function that returns a function: ' + 'it accepts a function of the type (RecoilInterface) => T = R ' + 'and returns a callback function T => R, where RecoilInterface is an ' + 'object {snapshot, set, ...} and T and R are the argument and return ' + 'types of the callback you want to create.  Please see the docs ' + 'at recoiljs.org for details.';

	      if (typeof fn !== 'function') {
	        throw new Error(errMsg);
	      } // flowlint-next-line unclear-type:off


	      const cb = fn({
	        set,
	        reset,
	        snapshot,
	        gotoSnapshot,
	        transact_UNSTABLE: atomicUpdate
	      });

	      if (typeof cb !== 'function') {
	        throw new Error(errMsg);
	      }

	      ret = cb(...args);
	    });
	    !!(ret instanceof Sentinel) ? Recoil_invariant(false) : void 0;
	    return ret;
	  }, deps != null ? [...deps, storeRef] : undefined // eslint-disable-line fb-www/react-hooks-deps
	  );
	} // I don't see a way to avoid the any type here because we want to accept readable
	// and writable values with any type parameter, but normally with writable ones
	// RecoilState<SomeT> is not a subtype of RecoilState<mixed>.
	// flowlint-line unclear-type:off


	function useRetain(toRetain) {
	  if (!Recoil_gkx_1('recoil_memory_managament_2020')) {
	    return;
	  } // eslint-disable-next-line fb-www/react-hooks


	  return useRetain_ACTUAL(toRetain);
	}

	function useRetain_ACTUAL(toRetain) {
	  const array = Array.isArray(toRetain) ? toRetain : [toRetain];
	  const retainables = array.map(a => a instanceof RetentionZone$3 ? a : a.key);
	  const storeRef = useStoreRef$1();
	  useEffect$1(() => {
	    if (!Recoil_gkx_1('recoil_memory_managament_2020')) {
	      return;
	    }

	    const store = storeRef.current;

	    if (timeoutID.current && !isSSR$2) {
	      // Already performed a temporary retain on render, simply cancel the release
	      // of that temporary retain.
	      window.clearTimeout(timeoutID.current);
	      timeoutID.current = null;
	    } else {
	      for (const r of retainables) {
	        updateRetainCount$2(store, r, 1);
	      }
	    }

	    return () => {
	      for (const r of retainables) {
	        updateRetainCount$2(store, r, -1);
	      }
	    }; // eslint-disable-next-line fb-www/react-hooks-deps
	  }, [storeRef, ...retainables]); // We want to retain if the component suspends. This is terrible but the Suspense
	  // API affords us no better option. If we suspend and never commit after some
	  // seconds, then release. The 'actual' retain/release in the effect above
	  // cancels this.

	  const timeoutID = useRef$2();
	  const previousRetainables = usePrevious(retainables);

	  if (!isSSR$2 && (previousRetainables === undefined || !Recoil_shallowArrayEqual(previousRetainables, retainables))) {
	    const store = storeRef.current;

	    for (const r of retainables) {
	      updateRetainCount$2(store, r, 1);
	    }

	    if (previousRetainables) {
	      for (const r of previousRetainables) {
	        updateRetainCount$2(store, r, -1);
	      }
	    }

	    if (timeoutID.current) {
	      window.clearTimeout(timeoutID.current);
	    }

	    timeoutID.current = window.setTimeout(() => {
	      timeoutID.current = null;

	      for (const r of retainables) {
	        updateRetainCount$2(store, r, -1);
	      }
	    }, SUSPENSE_TIMEOUT_MS);
	  }
	}

	function useRecoilTransaction(fn, deps) {
	  const storeRef = useStoreRef$1();
	  return useMemo$1(() => (...args) => {
	    const atomicUpdate = atomicUpdater$1(storeRef.current);
	    atomicUpdate(transactionInterface => {
	      fn(transactionInterface)(...args);
	    });
	  }, deps != null ? [...deps, storeRef] : undefined // eslint-disable-line fb-www/react-hooks-deps
	  );
	}

	var Recoil_Hooks = {
	  recoilComponentGetRecoilValueCount_FOR_TESTING,
	  useGotoRecoilSnapshot,
	  useRecoilCallback,
	  useRecoilInterface: useRecoilInterface_DEPRECATED,
	  useRecoilSnapshot,
	  useRecoilState,
	  useRecoilStateLoadable,
	  useRecoilTransaction,
	  useRecoilTransactionObserver,
	  useRecoilValue,
	  useRecoilValueLoadable,
	  useRetain,
	  useResetRecoilState,
	  useSetRecoilState,
	  useSetUnvalidatedAtomValues,
	  useTransactionObservation_DEPRECATED,
	  useTransactionSubscription_DEPRECATED: useTransactionSubscription
	};
	const {
	  peekNodeInfo: peekNodeInfo$2
	} = Recoil_FunctionalCore;
	const {
	  useStoreRef: useStoreRef$2
	} = Recoil_RecoilRoot_react;

	function useGetRecoilValueInfo() {
	  const storeRef = useStoreRef$2();
	  return ({
	    key
	  }) => peekNodeInfo$2(storeRef.current, storeRef.current.getState().currentTree, key);
	}

	var Recoil_useGetRecoilValueInfo = useGetRecoilValueInfo;
	const {
	  RecoilRoot: RecoilRoot$1,
	  useStoreRef: useStoreRef$3
	} = Recoil_RecoilRoot_react;
	const {
	  useMemo: useMemo$2
	} = react;

	function useRecoilBridgeAcrossReactRoots() {
	  const store = useStoreRef$3().current;
	  return useMemo$2(() => {
	    function RecoilBridge({
	      children
	    }) {
	      return /*#__PURE__*/react.createElement(RecoilRoot$1, {
	        store_INTERNAL: store
	      }, children);
	    }

	    return RecoilBridge;
	  }, [store]);
	}

	var Recoil_useRecoilBridgeAcrossReactRoots = useRecoilBridgeAcrossReactRoots;

	function stringify(x, opt, key) {
	  // A optimization to avoid the more expensive JSON.stringify() for simple strings
	  // This may lose protection for u2028 and u2029, though.
	  if (typeof x === 'string' && !x.includes('"') && !x.includes('\\')) {
	    return `"${x}"`;
	  } // Handle primitive types


	  switch (typeof x) {
	    case 'undefined':
	      return '';
	    // JSON.stringify(undefined) returns undefined, but we always want to return a string

	    case 'boolean':
	      return x ? 'true' : 'false';

	    case 'number':
	    case 'symbol':
	      // case 'bigint': // BigInt is not supported in www
	      return String(x);

	    case 'string':
	      // Add surrounding quotes and escape internal quotes
	      return JSON.stringify(x);

	    case 'function':
	      if ((opt === null || opt === void 0 ? void 0 : opt.allowFunctions) !== true) {
	        throw new Error('Attempt to serialize function in a Recoil cache key');
	      }

	      return `__FUNCTION(${x.name})__`;
	  }

	  if (x === null) {
	    return 'null';
	  } // Fallback case for unknown types


	  if (typeof x !== 'object') {
	    var _JSON$stringify;

	    return (_JSON$stringify = JSON.stringify(x)) !== null && _JSON$stringify !== void 0 ? _JSON$stringify : '';
	  } // Deal with all promises as equivalent for now.


	  if (Recoil_isPromise(x)) {
	    return '__PROMISE__';
	  } // Arrays handle recursive stringification


	  if (Array.isArray(x)) {
	    return `[${x.map((v, i) => stringify(v, opt, i.toString()))}]`;
	  } // If an object defines a toJSON() method, then use that to override the
	  // serialization.  This matches the behavior of JSON.stringify().
	  // Pass the key for compatibility.
	  // Immutable.js collections define this method to allow us to serialize them.


	  if (typeof x.toJSON === 'function') {
	    // flowlint-next-line unclear-type: off
	    return stringify(x.toJSON(key), opt, key);
	  } // For built-in Maps, sort the keys in a stable order instead of the
	  // default insertion order.  Support non-string keys.


	  if (x instanceof Map) {
	    const obj = {};

	    for (const [k, v] of x) {
	      // Stringify will escape any nested quotes
	      obj[typeof k === 'string' ? k : stringify(k, opt)] = v;
	    }

	    return stringify(obj, opt, key);
	  } // For built-in Sets, sort the keys in a stable order instead of the
	  // default insertion order.


	  if (x instanceof Set) {
	    return stringify(Array.from(x).sort((a, b) => stringify(a, opt).localeCompare(stringify(b, opt))), opt, key);
	  } // Anything else that is iterable serialize as an Array.


	  if (Symbol !== undefined && x[Symbol.iterator] != null && typeof x[Symbol.iterator] === 'function') {
	    // flowlint-next-line unclear-type: off
	    return stringify(Array.from(x), opt, key);
	  } // For all other Objects, sort the keys in a stable order.


	  return `{${Object.keys(x).filter(key => x[key] !== undefined).sort() // stringify the key to add quotes and escape any nested slashes or quotes.
  .map(key => `${stringify(key, opt)}:${stringify(x[key], opt, key)}`).join(',')}}`;
	} // Utility similar to JSON.stringify() except:
	// * Serialize built-in Sets as an Array
	// * Serialize built-in Maps as an Object.  Supports non-string keys.
	// * Serialize other iterables as arrays
	// * Sort the keys of Objects and Maps to have a stable order based on string conversion.
	//    This overrides their default insertion order.
	// * Still uses toJSON() of any object to override serialization
	// * Support Symbols (though don't guarantee uniqueness)
	// * We could support BigInt, but Flow doesn't seem to like it.
	// See Recoil_stableStringify-test.js for examples


	function stableStringify(x, opt = {
	  allowFunctions: false
	}) {

	  return stringify(x, opt);
	}

	var Recoil_stableStringify = stableStringify;

	class TreeCache {
	  constructor(options) {
	    var _options$onHit, _options$onSet, _options$mapNodeValue;

	    _defineProperty(this, "_numLeafs", void 0);

	    _defineProperty(this, "_root", void 0);

	    _defineProperty(this, "_onHit", void 0);

	    _defineProperty(this, "_onSet", void 0);

	    _defineProperty(this, "_mapNodeValue", void 0);

	    this._numLeafs = 0;
	    this._root = null;
	    this._onHit = (_options$onHit = options === null || options === void 0 ? void 0 : options.onHit) !== null && _options$onHit !== void 0 ? _options$onHit : () => {};
	    this._onSet = (_options$onSet = options === null || options === void 0 ? void 0 : options.onSet) !== null && _options$onSet !== void 0 ? _options$onSet : () => {};
	    this._mapNodeValue = (_options$mapNodeValue = options === null || options === void 0 ? void 0 : options.mapNodeValue) !== null && _options$mapNodeValue !== void 0 ? _options$mapNodeValue : val => val;
	  }

	  size() {
	    return this._numLeafs;
	  } // TODO: nodeCount(): number


	  root() {
	    return this._root;
	  }

	  get(getNodeValue, handlers) {
	    var _this$getLeafNode;

	    return (_this$getLeafNode = this.getLeafNode(getNodeValue, handlers)) === null || _this$getLeafNode === void 0 ? void 0 : _this$getLeafNode.value;
	  }

	  getLeafNode(getNodeValue, handlers) {
	    return findLeaf(this.root(), nodeKey => this._mapNodeValue(getNodeValue(nodeKey)), {
	      onNodeVisit: node => {
	        handlers === null || handlers === void 0 ? void 0 : handlers.onNodeVisit(node);

	        if (node.type === 'leaf') {
	          this._onHit(node);
	        }
	      }
	    });
	  }

	  set(route, value, handlers) {
	    let leafNode;
	    const newRoot = addLeaf(this.root(), route.map(([nodeKey, nodeValue]) => [nodeKey, this._mapNodeValue(nodeValue)]), null, value, null, {
	      onNodeVisit: node => {
	        handlers === null || handlers === void 0 ? void 0 : handlers.onNodeVisit(node);

	        if (node.type === 'leaf') {
	          leafNode = node;
	        }
	      }
	    });

	    if (!this.root()) {
	      this._root = newRoot;
	    }

	    this._numLeafs++;

	    this._onSet(Recoil_nullthrows(leafNode));
	  }

	  delete(node) {
	    if (!this.root()) {
	      return false;
	    }

	    const root = Recoil_nullthrows(this.root());
	    const existsInTree = pruneNodeFromTree(root, node, node.parent);

	    if (!existsInTree) {
	      return false;
	    }

	    if (node === root || root.type === 'branch' && !root.branches.size) {
	      this._root = null;
	      this._numLeafs = 0;
	      return true;
	    }

	    this._numLeafs -= countDownstreamLeaves(node);
	    return true;
	  }

	  clear() {
	    this._numLeafs = 0;
	    this._root = null;
	  }

	}

	const findLeaf = (root, getNodeValue, handlers) => {
	  var _handlers$onNodeVisit;

	  if (root == null) {
	    return undefined;
	  }

	  handlers === null || handlers === void 0 ? void 0 : (_handlers$onNodeVisit = handlers.onNodeVisit) === null || _handlers$onNodeVisit === void 0 ? void 0 : _handlers$onNodeVisit.call(handlers, root);

	  if (root.type === 'leaf') {
	    return root;
	  }

	  const nodeValue = getNodeValue(root.nodeKey);
	  return findLeaf(root.branches.get(nodeValue), getNodeValue, handlers);
	};

	const addLeaf = (root, route, parent, value, branchKey, handlers) => {
	  var _handlers$onNodeVisit2;

	  let node;

	  if (root == null) {
	    if (route.length === 0) {
	      node = {
	        type: 'leaf',
	        value,
	        parent,
	        branchKey
	      };
	    } else {
	      const [path, ...rest] = route;
	      const [nodeKey, nodeValue] = path;
	      node = {
	        type: 'branch',
	        nodeKey,
	        parent,
	        branches: new Map(),
	        branchKey
	      };
	      node.branches.set(nodeValue, addLeaf(null, rest, node, value, nodeValue, handlers));
	    }
	  } else {
	    node = root;

	    if (route.length) {
	      const [path, ...rest] = route;
	      const [nodeKey, nodeValue] = path;
	      !(root.type === 'branch' && root.nodeKey === nodeKey) ? Recoil_invariant(false) : void 0;
	      root.branches.set(nodeValue, addLeaf(root.branches.get(nodeValue), rest, root, value, nodeValue, handlers));
	    }
	  }

	  handlers === null || handlers === void 0 ? void 0 : (_handlers$onNodeVisit2 = handlers.onNodeVisit) === null || _handlers$onNodeVisit2 === void 0 ? void 0 : _handlers$onNodeVisit2.call(handlers, node);
	  return node;
	};

	const pruneNodeFromTree = (root, node, parent) => {
	  if (!parent) {
	    return root === node;
	  }

	  parent.branches.delete(node.branchKey);
	  return pruneUpstreamBranches(root, parent, parent.parent);
	};

	const pruneUpstreamBranches = (root, branchNode, parent) => {
	  if (!parent) {
	    return root === branchNode;
	  }

	  if (branchNode.branches.size === 0) {
	    parent.branches.delete(branchNode.branchKey);
	  }

	  return pruneUpstreamBranches(root, parent, parent.parent);
	};

	const countDownstreamLeaves = node => node.type === 'leaf' ? 1 : Array.from(node.branches.values()).reduce((sum, currNode) => sum + countDownstreamLeaves(currNode), 0);

	var Recoil_TreeCache = {
	  TreeCache
	};
	var Recoil_TreeCache_1 = Recoil_TreeCache.TreeCache;
	var Recoil_TreeCache$1 = /*#__PURE__*/Object.freeze({
	  __proto__: null,
	  TreeCache: Recoil_TreeCache_1
	});

	class LRUCache {
	  constructor(options) {
	    var _options$mapKey;

	    _defineProperty(this, "_maxSize", void 0);

	    _defineProperty(this, "_size", void 0);

	    _defineProperty(this, "_head", void 0);

	    _defineProperty(this, "_tail", void 0);

	    _defineProperty(this, "_map", void 0);

	    _defineProperty(this, "_keyMapper", void 0);

	    this._maxSize = options.maxSize;
	    this._size = 0;
	    this._head = null;
	    this._tail = null;
	    this._map = new Map();
	    this._keyMapper = (_options$mapKey = options.mapKey) !== null && _options$mapKey !== void 0 ? _options$mapKey : v => v;
	  }

	  head() {
	    return this._head;
	  }

	  tail() {
	    return this._tail;
	  }

	  size() {
	    return this._size;
	  }

	  maxSize() {
	    return this._maxSize;
	  }

	  has(key) {
	    return this._map.has(this._keyMapper(key));
	  }

	  get(key) {
	    const mappedKey = this._keyMapper(key);

	    const node = this._map.get(mappedKey);

	    if (!node) {
	      return undefined;
	    }

	    this.set(key, node.value);
	    return node.value;
	  }

	  set(key, val) {
	    const mappedKey = this._keyMapper(key);

	    const existingNode = this._map.get(mappedKey);

	    if (existingNode) {
	      this.delete(key);
	    }

	    const head = this.head();
	    const node = {
	      key,
	      right: head,
	      left: null,
	      value: val
	    };

	    if (head) {
	      head.left = node;
	    } else {
	      this._tail = node;
	    }

	    this._map.set(mappedKey, node);

	    this._head = node;
	    this._size++;

	    this._maybeDeleteLRU();
	  }

	  _maybeDeleteLRU() {
	    if (this.size() > this.maxSize()) {
	      this.deleteLru();
	    }
	  }

	  deleteLru() {
	    const tail = this.tail();

	    if (tail) {
	      this.delete(tail.key);
	    }
	  }

	  delete(key) {
	    const mappedKey = this._keyMapper(key);

	    if (!this._size || !this._map.has(mappedKey)) {
	      return;
	    }

	    const node = Recoil_nullthrows(this._map.get(mappedKey));
	    const right = node.right;
	    const left = node.left;

	    if (right) {
	      right.left = node.left;
	    }

	    if (left) {
	      left.right = node.right;
	    }

	    if (node === this.head()) {
	      this._head = right;
	    }

	    if (node === this.tail()) {
	      this._tail = left;
	    }

	    this._map.delete(mappedKey);

	    this._size--;
	  }

	  clear() {
	    this._size = 0;
	    this._head = null;
	    this._tail = null;
	    this._map = new Map();
	  }

	}

	var Recoil_LRUCache = {
	  LRUCache
	};
	var Recoil_LRUCache_1 = Recoil_LRUCache.LRUCache;
	var Recoil_LRUCache$1 = /*#__PURE__*/Object.freeze({
	  __proto__: null,
	  LRUCache: Recoil_LRUCache_1
	});
	const {
	  LRUCache: LRUCache$1
	} = Recoil_LRUCache$1;
	const {
	  TreeCache: TreeCache$1
	} = Recoil_TreeCache$1;

	function treeCacheLRU(maxSize, mapNodeValue = v => v) {
	  const lruCache = new LRUCache$1({
	    maxSize
	  });
	  const cache = new TreeCache$1({
	    mapNodeValue,
	    onHit: node => {
	      lruCache.set(node, true);
	    },
	    onSet: node => {
	      const lruNode = lruCache.tail();
	      lruCache.set(node, true);

	      if (lruNode && cache.size() > maxSize) {
	        cache.delete(lruNode.key);
	      }
	    }
	  }); // $FlowFixMe[method-unbinding]

	  return cache;
	}

	var Recoil_treeCacheLRU = treeCacheLRU;
	const {
	  TreeCache: TreeCache$2
	} = Recoil_TreeCache$1;
	const defaultPolicy = {
	  equality: 'reference',
	  eviction: 'keep-all',
	  maxSize: Infinity
	};

	function treeCacheFromPolicy({
	  equality = defaultPolicy.equality,
	  eviction = defaultPolicy.eviction,
	  maxSize = defaultPolicy.maxSize
	} = defaultPolicy) {
	  const valueMapper = getValueMapper(equality);
	  const treeCache = getTreeCache(eviction, maxSize, valueMapper);
	  return treeCache;
	}

	function getValueMapper(equality) {
	  switch (equality) {
	    case 'reference':
	      return val => val;

	    case 'value':
	      return val => Recoil_stableStringify(val);
	  }

	  throw new Error(`Unrecognized equality policy ${equality}`);
	}

	function getTreeCache(eviction, maxSize, mapNodeValue) {
	  switch (eviction) {
	    case 'keep-all':
	      // $FlowFixMe[method-unbinding]
	      return new TreeCache$2({
	        mapNodeValue
	      });

	    case 'lru':
	      return Recoil_treeCacheLRU(Recoil_nullthrows(maxSize), mapNodeValue);

	    case 'most-recent':
	      return Recoil_treeCacheLRU(1, mapNodeValue);
	  }

	  throw new Error(`Unrecognized eviction policy ${eviction}`);
	}

	var Recoil_treeCacheFromPolicy = treeCacheFromPolicy;
	/**
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @emails oncall+recoil
	 * 
	 * @format
	 *
	 * This is a stub for some integration into FB internal stuff
	 */

	function startPerfBlock(_id) {
	  return () => null;
	}

	var Recoil_PerformanceTimings = {
	  startPerfBlock
	};
	const {
	  CANCELED: CANCELED$2,
	  Canceled: Canceled$1,
	  loadableWithError: loadableWithError$1,
	  loadableWithPromise: loadableWithPromise$1,
	  loadableWithValue: loadableWithValue$2
	} = Recoil_Loadable;
	const {
	  getNodeLoadable: getNodeLoadable$2,
	  peekNodeLoadable: peekNodeLoadable$1,
	  setNodeValue: setNodeValue$3
	} = Recoil_FunctionalCore;
	const {
	  saveDependencyMapToStore: saveDependencyMapToStore$1
	} = Recoil_Graph;
	const {
	  DEFAULT_VALUE: DEFAULT_VALUE$4,
	  RecoilValueNotReady: RecoilValueNotReady$2,
	  getConfigDeletionHandler: getConfigDeletionHandler$1,
	  registerNode: registerNode$1
	} = Recoil_Node;
	const {
	  isRecoilValue: isRecoilValue$3
	} = Recoil_RecoilValue$1;
	const {
	  AbstractRecoilValue: AbstractRecoilValue$4
	} = Recoil_RecoilValue$1;
	const {
	  setRecoilValueLoadable: setRecoilValueLoadable$2
	} = Recoil_RecoilValueInterface;
	const {
	  retainedByOptionWithDefault: retainedByOptionWithDefault$1
	} = Recoil_Retention;
	const {
	  cloneSnapshot: cloneSnapshot$2
	} = Recoil_Snapshot$1;
	const {
	  startPerfBlock: startPerfBlock$1
	} = Recoil_PerformanceTimings;
	const dependencyStack = []; // for detecting circular dependencies.

	const waitingStores = new Map();
	/* eslint-disable no-redeclare */

	const getNewExecutionId = (() => {
	  let executionId = 0;
	  return () => executionId++;
	})();

	function getInitialExecutionInfo() {
	  return {
	    depValuesDiscoveredSoFarDuringAsyncWork: null,
	    latestLoadable: null,
	    latestExecutionId: null,
	    stateVersion: null
	  };
	}

	function selector(options) {
	  const {
	    key,
	    get,
	    cachePolicy_UNSTABLE: cachePolicy
	  } = options;
	  const set = options.set != null ? options.set : undefined; // flow

	  const cache = Recoil_treeCacheFromPolicy(cachePolicy !== null && cachePolicy !== void 0 ? cachePolicy : {
	    equality: 'reference',
	    eviction: 'keep-all'
	  });
	  const retainedBy = retainedByOptionWithDefault$1(options.retainedBy_UNSTABLE);
	  const executionInfoMap = new Map();
	  let liveStoresCount = 0;

	  function selectorIsLive() {
	    return !Recoil_gkx_1('recoil_memory_managament_2020') || liveStoresCount > 0;
	  }

	  function getExecutionInfo(store) {
	    if (!executionInfoMap.has(store)) {
	      executionInfoMap.set(store, getInitialExecutionInfo());
	    }

	    return Recoil_nullthrows(executionInfoMap.get(store));
	  }

	  function selectorInit(store) {
	    liveStoresCount++;
	    store.getState().knownSelectors.add(key); // FIXME remove knownSelectors?

	    return () => {
	      liveStoresCount--;
	      store.getState().knownSelectors.delete(key);
	      executionInfoMap.delete(store);
	    };
	  }

	  function selectorShouldDeleteConfigOnRelease() {
	    return getConfigDeletionHandler$1(key) !== undefined && !selectorIsLive();
	  }

	  function notifyStoreWhenAsyncSettles(store, loadable, executionId) {
	    if (loadable.state === 'loading') {
	      let stores = waitingStores.get(executionId);

	      if (stores == null) {
	        waitingStores.set(executionId, stores = new Set());
	      }

	      stores.add(store);
	    }
	  }

	  function notifyStoresOfSettledAsync(newLoadable, executionId) {
	    const stores = waitingStores.get(executionId);

	    if (stores !== undefined) {
	      for (const store of stores) {
	        setRecoilValueLoadable$2(store, new AbstractRecoilValue$4(key), newLoadable);
	      }

	      waitingStores.delete(executionId);
	    }
	  }

	  function getCachedNodeLoadable(store, state, key) {
	    const isKeyPointingToSelector = store.getState().knownSelectors.has(key);
	    /**
	     * It's important that we don't bypass calling getNodeLoadable for atoms
	     * as getNodeLoadable has side effects in state
	     */

	    if (isKeyPointingToSelector && state.atomValues.has(key)) {
	      return Recoil_nullthrows(state.atomValues.get(key));
	    }

	    const loadable = getNodeLoadable$2(store, state, key);

	    if (loadable.state !== 'loading' && isKeyPointingToSelector) {
	      state.atomValues.set(key, loadable);
	    }

	    return loadable;
	  }
	  /**
	   * This function attaches a then() and a catch() to a promise that was
	   * returned from a selector's get() (either explicitly or implicitly by
	   * running a function that uses the "async" keyword). If a selector's get()
	   * returns a promise, we have two possibilities:
	   *
	   * 1. The promise will resolve, in which case it will have completely finished
	   *    executing without any remaining pending dependencies. No more retries
	   *    are needed and we can proceed with updating the cache and notifying
	   *    subscribers (if it is the latest execution, otherwise only the cache
	   *    will be updated and subscriptions will not be fired). This is the case
	   *    handled by the attached then() handler.
	   *
	   * 2. The promise will throw because it either has an error or it came across
	   *    an async dependency that has not yet resolved, in which case we will
	   *    call wrapDepdencyPromise(), whose responsibility is to handle dependency
	   *    promises. This case is handled by the attached catch() handler.
	   *
	   * Both branches will eventually resolve to the final result of the selector
	   * (or an error if a real error occurred).
	   *
	   * The execution will run to completion even if it is stale, and its value
	   * will be cached. But stale executions will not update global state or update
	   * executionInfo as that is the responsibility of the 'latest' execution.
	   *
	   * Note this function should not be passed a promise that was thrown--AKA a
	   * dependency promise. Dependency promises should be passed to
	   * wrapPendingDependencyPromise()).
	   */


	  function wrapPendingPromise(store, promise, state, depValues, executionId) {
	    return promise.then(value => {
	      if (!selectorIsLive()) {
	        // The selector was released since the request began; ignore the response.
	        clearExecutionInfo(store, executionId);
	        return CANCELED$2;
	      }

	      const loadable = loadableWithValue$2(value);
	      setCache(state, depValuesToDepRoute(depValues), loadable);
	      setDepsInStore(store, state, new Set(depValues.keys()), executionId);
	      setLoadableInStoreToNotifyDeps(store, loadable, executionId);
	      return {
	        __value: value,
	        __key: key
	      };
	    }).catch(errorOrPromise => {
	      if (!selectorIsLive()) {
	        // The selector was released since the request began; ignore the response.
	        clearExecutionInfo(store, executionId);
	        return CANCELED$2;
	      }

	      if (isLatestExecution(store, executionId)) {
	        updateExecutionInfoDepValues(depValues, store, executionId);
	      }

	      if (Recoil_isPromise(errorOrPromise)) {
	        return wrapPendingDependencyPromise(store, errorOrPromise, state, depValues, executionId);
	      }

	      const loadable = loadableWithError$1(errorOrPromise);
	      setCache(state, depValuesToDepRoute(depValues), loadable);
	      setDepsInStore(store, state, new Set(depValues.keys()), executionId);
	      setLoadableInStoreToNotifyDeps(store, loadable, executionId);
	      throw errorOrPromise;
	    });
	  }
	  /**
	   * This function attaches a then() and a catch() to a promise that was
	   * thrown from a selector's get(). If a selector's get() throws a promise,
	   * we have two possibilities:
	   *
	   * 1. The promise will resolve, meaning one of our selector's dependencies is
	   *    now available and we should "retry" our get() by running it again. This
	   *    is the case handled by the attached then() handler.
	   *
	   * 2. The promise will throw because something went wrong with the dependency
	   *    promise (in other words a real error occurred). This case is handled by
	   *    the attached catch() handler. If the dependency promise throws, it is
	   *    _always_ a real error and not another dependency promise (any dependency
	   *    promises would have been handled upstream).
	   *
	   * The then() branch will eventually resolve to the final result of the
	   * selector (or an error if a real error occurs), and the catch() will always
	   * resolve to an error because the dependency promise is a promise that was
	   * wrapped upstream, meaning it will only resolve to its real value or to a
	   * real error.
	   *
	   * The execution will run to completion even if it is stale, and its value
	   * will be cached. But stale executions will not update global state or update
	   * executionInfo as that is the responsibility of the 'latest' execution.
	   *
	   * Note this function should not be passed a promise that was returned from
	   * get(). The intention is that this function is only passed promises that
	   * were thrown due to a pending dependency. Promises returned by get() should
	   * be passed to wrapPendingPromise() instead.
	   */


	  function wrapPendingDependencyPromise(store, promise, state, existingDeps, executionId) {
	    return promise.then(resolvedDep => {
	      if (!selectorIsLive()) {
	        // The selector was released since the request began; ignore the response.
	        clearExecutionInfo(store, executionId);
	        return CANCELED$2;
	      }

	      if (resolvedDep instanceof Canceled$1) {
	        return CANCELED$2;
	      }

	      const {
	        __key: resolvedDepKey,
	        __value: depValue
	      } = resolvedDep !== null && resolvedDep !== void 0 ? resolvedDep : {};
	      /**
	       * We need to bypass the selector dep cache if the resolved dep was a
	       * user-thrown promise because the selector dep cache will contain the
	       * stale values of dependencies, causing an infinite evaluation loop.
	       */

	      let bypassSelectorDepCacheOnReevaluation = true;

	      if (resolvedDepKey != null) {
	        /**
	         * Note for async atoms, this means we are changing the atom's value
	         * in the store for the given version. This should be alright because
	         * the version of state is now stale and a new version will have
	         * already been triggered by the atom being resolved (see this logic
	         * in Recoil_atom.js)
	         */
	        state.atomValues.set(resolvedDepKey, loadableWithValue$2(depValue));
	        /**
	         * We've added the resolved dependency to the selector dep cache, so
	         * there's no need to bypass the cache
	         */

	        bypassSelectorDepCacheOnReevaluation = false;
	      }
	      /**
	       * Optimization: Now that the dependency has resolved, let's try hitting
	       * the cache in case the dep resolved to a value we have previously seen.
	       *
	       * TODO:
	       * Note this optimization is not perfect because it only prevents re-executions
	       * _after_ the point where an async dependency is found. Any code leading
	       * up to the async dependency may have run unnecessarily. The ideal case
	       * would be to wait for the async dependency to resolve first, check the
	       * cache, and prevent _any_ execution of the selector if the resulting
	       * value of the dependency leads to a path that is found in the cache.
	       * The ideal case is more difficult to implement as it would require that
	       * we capture and wait for the the async dependency right after checking
	       * the cache. The current approach takes advantage of the fact that running
	       * the selector already has a code path that lets use exit early when
	       * an async dep resolves.
	       */


	      const cachedLoadable = getValFromCacheAndUpdatedDownstreamDeps(store, state);

	      if (cachedLoadable && cachedLoadable.state === 'hasValue') {
	        setExecutionInfo(cachedLoadable, store);
	        return {
	          __value: cachedLoadable.contents,
	          __key: key
	        };
	      }
	      /**
	       * If this execution is stale, let's check to see if there is some in
	       * progress execution with a matching state. If we find a match, then
	       * we can take the value from that in-progress execution. Note this may
	       * sound like an edge case, but may be very common in cases where a
	       * loading dependency resolves from loading to having a value (thus
	       * possibly triggering a re-render), and React re-renders before the
	       * chained .then() functions run, thus starting a new execution as the
	       * dep has changed value. Without this check we will run the selector
	       * twice (once in the new execution and once again in this .then(), so
	       * this check is necessary to keep unnecessary re-executions to a
	       * minimum).
	       *
	       * Also note this code does not check across all executions that may be
	       * running. It only optimizes for the _latest_ execution per store as
	       * we currently do not maintain a list of all currently running executions.
	       * This means in some cases we may run selectors more than strictly
	       * necessary when there are multiple executions running for the same
	       * selector. This may be a valid tradeoff as checking for dep changes
	       * across all in-progress executions may take longer than just
	       * re-running the selector. This will be app-dependent, and maybe in the
	       * future we can make the behavior configurable. An ideal fix may be
	       * to extend the tree cache to support caching loading states.
	       */


	      if (!isLatestExecution(store, executionId)) {
	        var _executionInfo$latest;

	        const executionInfo = getExecutionInfoOfInProgressExecution(state);

	        if ((executionInfo === null || executionInfo === void 0 ? void 0 : (_executionInfo$latest = executionInfo.latestLoadable) === null || _executionInfo$latest === void 0 ? void 0 : _executionInfo$latest.state) === 'loading') {
	          /**
	           * Returning promise here without wrapping as the wrapper logic was
	           * already done upstream when this promise was generated.
	           */
	          return executionInfo.latestLoadable.contents;
	        }
	      }

	      const [loadable, depValues] = evaluateSelectorGetter(store, state, executionId, bypassSelectorDepCacheOnReevaluation);

	      if (isLatestExecution(store, executionId)) {
	        updateExecutionInfoDepValues(depValues, store, executionId);
	      }

	      maybeFreezeLoadableContents(loadable);

	      if (loadable.state !== 'loading') {
	        setCache(state, depValuesToDepRoute(depValues), loadable);
	        setDepsInStore(store, state, new Set(depValues.keys()), executionId);
	        setLoadableInStoreToNotifyDeps(store, loadable, executionId);
	      }

	      if (loadable.state === 'hasError') {
	        throw loadable.contents;
	      }

	      if (loadable.state === 'hasValue') {
	        return {
	          __value: loadable.contents,
	          __key: key
	        };
	      }
	      /**
	       * Returning promise here without wrapping as the wrapepr logic was
	       * already done when we called evaluateSelectorGetter() to get this
	       * loadable
	       */


	      return loadable.contents;
	    }).catch(error => {
	      if (!selectorIsLive()) {
	        // The selector was released since the request began; ignore the response.
	        clearExecutionInfo(store, executionId);
	        return CANCELED$2;
	      }

	      const loadable = loadableWithError$1(error);
	      setCache(state, depValuesToDepRoute(existingDeps), loadableWithError$1(error));
	      setDepsInStore(store, state, new Set(existingDeps.keys()), executionId);
	      setLoadableInStoreToNotifyDeps(store, loadable, executionId);
	      throw error;
	    });
	  }

	  function setLoadableInStoreToNotifyDeps(store, loadable, executionId) {
	    if (isLatestExecution(store, executionId)) {
	      setExecutionInfo(loadable, store);
	      notifyStoresOfSettledAsync(loadable, executionId);
	    }
	  }

	  function setDepsInStore(store, state, deps, executionId) {
	    var _store$getState, _store$getState$curre, _store$getState2, _store$getState2$next;

	    if (isLatestExecution(store, executionId) || state.version === ((_store$getState = store.getState()) === null || _store$getState === void 0 ? void 0 : (_store$getState$curre = _store$getState.currentTree) === null || _store$getState$curre === void 0 ? void 0 : _store$getState$curre.version) || state.version === ((_store$getState2 = store.getState()) === null || _store$getState2 === void 0 ? void 0 : (_store$getState2$next = _store$getState2.nextTree) === null || _store$getState2$next === void 0 ? void 0 : _store$getState2$next.version)) {
	      var _store$getState$nextT, _store$getState3, _store$getState3$next;

	      saveDependencyMapToStore$1(new Map([[key, deps]]), store, (_store$getState$nextT = (_store$getState3 = store.getState()) === null || _store$getState3 === void 0 ? void 0 : (_store$getState3$next = _store$getState3.nextTree) === null || _store$getState3$next === void 0 ? void 0 : _store$getState3$next.version) !== null && _store$getState$nextT !== void 0 ? _store$getState$nextT : store.getState().currentTree.version);
	    }
	  }

	  function setNewDepInStore(store, state, deps, newDepKey, executionId) {
	    deps.add(newDepKey);
	    setDepsInStore(store, state, deps, executionId);
	  }

	  function evaluateSelectorGetter(store, state, executionId, bypassSelectorDepCache = false) {
	    const endPerfBlock = startPerfBlock$1(key); // TODO T63965866: use execution ID here

	    let result;
	    let resultIsError = false;
	    let loadable;
	    const depValues = new Map();
	    /**
	     * Starting a fresh set of deps that we'll be using to update state. We're
	     * starting a new set versus adding it in existing state deps because
	     * the version of state that we update deps for may be a more recent version
	     * than the version the selector was called with. This is because the latest
	     * execution will update the deps of the current/latest version of state (
	     * this is safe to do because the fact that the selector is the latest
	     * execution means the deps we discover below are our best guess at the
	     * deps for the current/latest state in the store)
	     */

	    const deps = new Set();
	    setDepsInStore(store, state, deps, executionId);

	    function getRecoilValue(recoilValue) {
	      const {
	        key: depKey
	      } = recoilValue;
	      setNewDepInStore(store, state, deps, depKey, executionId);
	      const depLoadable = bypassSelectorDepCache ? getNodeLoadable$2(store, state, depKey) : getCachedNodeLoadable(store, state, depKey);
	      maybeFreezeLoadableContents(depLoadable);
	      depValues.set(depKey, depLoadable);

	      if (depLoadable.state === 'hasValue') {
	        return depLoadable.contents;
	      }

	      throw depLoadable.contents;
	    }

	    let gateCallback = false;

	    const getCallback = fn => {
	      return (...args) => {
	        if (!gateCallback) {
	          throw new Error('getCallback() should only be called asynchronously after the selector is evalutated.  It can be used for selectors to return objects with callbacks that can obtain the current Recoil state without a subscription.');
	        }

	        const snapshot = cloneSnapshot$2(store);
	        const cb = fn({
	          snapshot
	        });

	        if (typeof cb !== 'function') {
	          throw new Error('getCallback() expects a function that returns a function.');
	        }

	        return cb(...args);
	      };
	    };

	    try {
	      result = get({
	        get: getRecoilValue,
	        getCallback
	      });
	      result = isRecoilValue$3(result) ? getRecoilValue(result) : result;
	      gateCallback = true;

	      if (Recoil_isPromise(result)) {
	        result = wrapPendingPromise(store, result, state, depValues, executionId).finally(endPerfBlock);
	      } else {
	        endPerfBlock();
	      }
	    } catch (errorOrDepPromise) {
	      result = errorOrDepPromise;

	      if (Recoil_isPromise(result)) {
	        result = wrapPendingDependencyPromise(store, result, state, depValues, executionId).finally(endPerfBlock);
	      } else {
	        resultIsError = true;
	        endPerfBlock();
	      }
	    }

	    if (resultIsError) {
	      loadable = loadableWithError$1(result);
	    } else if (Recoil_isPromise(result)) {
	      loadable = loadableWithPromise$1(result);
	    } else {
	      loadable = loadableWithValue$2(result);
	    }

	    maybeFreezeLoadableContents(loadable);
	    return [loadable, depValues];
	  }

	  function getValFromCacheAndUpdatedDownstreamDeps(store, state) {
	    const depsAfterCacheDone = new Set();
	    const executionInfo = getExecutionInfo(store);
	    const cachedVal = cache.get(nodeKey => {
	      !(typeof nodeKey === 'string') ? Recoil_invariant(false) : void 0;
	      const loadable = getCachedNodeLoadable(store, state, nodeKey);
	      return loadable.contents;
	    }, {
	      onNodeVisit: node => {
	        if (node.type === 'branch' && node.nodeKey !== key && typeof node.nodeKey === 'string') {
	          depsAfterCacheDone.add(node.nodeKey);
	        }
	      }
	    });
	    /**
	     * Ensure store contains correct dependencies if we hit the cache so that
	     * the store deps and cache are in sync for a given state. This is important
	     * because store deps are normally updated when new executions are created,
	     * but cache hits don't trigger new executions but they still _may_ signifiy
	     * a change in deps in the store if the store deps for this state are empty
	     * or stale.
	     */

	    if (cachedVal) {
	      setDepsInStore(store, state, depsAfterCacheDone, executionInfo.latestExecutionId);
	    }

	    return cachedVal;
	  }
	  /**
	   * FIXME: dep keys should take into account the state of the loadable to
	   * prevent the edge case where a loadable with an error and a loadable with
	   * an error as a value are treated as the same thing incorrectly. For example
	   * these two should be treated differently:
	   *
	   * selector({key: '', get: () => new Error('hi')});
	   * selector({key: '', get () => {throw new Error('hi')}});
	   *
	   * With current implementation they are treated the same
	   */


	  function depValuesToDepRoute(depValues) {
	    return Array.from(depValues.entries()).map(([key, valLoadable]) => [key, valLoadable.contents]);
	  }

	  function getValFromRunningNewExecutionAndUpdatedDeps(store, state) {
	    const newExecutionId = getNewExecutionId();
	    const [loadable, newDepValues] = evaluateSelectorGetter(store, state, newExecutionId);
	    setExecutionInfo(loadable, store, newDepValues, newExecutionId, state);
	    maybeSetCacheWithLoadable(state, depValuesToDepRoute(newDepValues), loadable);
	    notifyStoreWhenAsyncSettles(store, loadable, newExecutionId);
	    return loadable;
	  }
	  /**
	   * Given a tree state, this function returns the "selector result", which is
	   * defined as a size-2 tuple of [DependencyMap, Loadable<T>].
	   *
	   * The selector's get() function will only be re-evaluated if _both_ of the
	   * following statements are true:
	   *
	   * 1. The current dep values from the given state produced a cache key that
	   *    was not found in the cache.
	   * 2. There is no currently running async execution OR there is an
	   *    async execution that is running, but after comparing the dep values in
	   *    the given state with the dep values that the execution has discovered so
	   *    far we find that at least one dep value has changed, in which case we
	   *    start a new execution (the previously running execution will continue to
	   *    run to completion, but only the new execution will be deemed the
	   *    'latest' execution, meaning it will be the only execution that will
	   *    update global state when it is finished. Any non-latest executions will
	   *    run to completion and update the selector cache but not global state).
	   */


	  function getSelectorValAndUpdatedDeps(store, state) {
	    const cachedVal = getValFromCacheAndUpdatedDownstreamDeps(store, state);

	    if (cachedVal != null) {
	      setExecutionInfo(cachedVal, store);
	      return cachedVal;
	    }

	    const inProgressExecutionInfo = getExecutionInfoOfInProgressExecution(state); // FIXME: this won't work with custom caching b/c it uses separate cache

	    if (inProgressExecutionInfo) {
	      const executionInfo = inProgressExecutionInfo;
	      notifyStoreWhenAsyncSettles(store, Recoil_nullthrows(executionInfo.latestLoadable), Recoil_nullthrows(executionInfo.latestExecutionId)); // FIXME: check after the fact to see if we made the right choice by waiting

	      return Recoil_nullthrows(executionInfo.latestLoadable);
	    }

	    return getValFromRunningNewExecutionAndUpdatedDeps(store, state);
	  }
	  /**
	   * Searches execution info across all stores to see if there is an in-progress
	   * execution whose dependency values match the values of the requesting store.
	   */


	  function getExecutionInfoOfInProgressExecution(state) {
	    var _Array$from$find;

	    const [, executionInfo] = (_Array$from$find = Array.from(executionInfoMap.entries()).find(([store, executionInfo]) => {
	      return executionInfo.latestLoadable != null && executionInfo.latestExecutionId != null && !haveAsyncDepsChanged(store, state);
	    })) !== null && _Array$from$find !== void 0 ? _Array$from$find : [];
	    return executionInfo;
	  }

	  const mapOfCheckedVersions = new Map();

	  function haveAsyncDepsChanged(store, state) {
	    var _executionInfo$depVal, _mapOfCheckedVersions;

	    const executionInfo = getExecutionInfo(store);
	    const oldDepValues = (_executionInfo$depVal = executionInfo.depValuesDiscoveredSoFarDuringAsyncWork) !== null && _executionInfo$depVal !== void 0 ? _executionInfo$depVal : new Map();
	    const cachedDepValuesCheckedForThisVersion = Array(((_mapOfCheckedVersions = mapOfCheckedVersions.get(state.version)) !== null && _mapOfCheckedVersions !== void 0 ? _mapOfCheckedVersions : new Map()).entries());
	    const isCachedVersionSame = mapOfCheckedVersions.has(state.version) && cachedDepValuesCheckedForThisVersion.length === oldDepValues.size && cachedDepValuesCheckedForThisVersion.every(([nodeKey, nodeVal]) => {
	      return oldDepValues.get(nodeKey) === nodeVal;
	    });

	    if (oldDepValues == null || state.version === executionInfo.stateVersion || isCachedVersionSame) {
	      return false;
	    }

	    mapOfCheckedVersions.set(state.version, new Map(oldDepValues));
	    return Array.from(oldDepValues).some(([nodeKey, oldVal]) => {
	      const loadable = getCachedNodeLoadable(store, state, nodeKey);
	      return loadable.contents !== oldVal.contents;
	    });
	  }
	  /**
	   * This function will update the selector's execution info when the selector
	   * has either finished running an execution or has started a new execution. If
	   * the given loadable is in a 'loading' state, the intention is that a new
	   * execution has started. Otherwise, the intention is that an execution has
	   * just finished.
	   */


	  function setExecutionInfo(loadable, store, depValues, newExecutionId, state) {
	    const executionInfo = getExecutionInfo(store);

	    if (loadable.state === 'loading') {
	      executionInfo.depValuesDiscoveredSoFarDuringAsyncWork = depValues;
	      executionInfo.latestExecutionId = newExecutionId;
	      executionInfo.latestLoadable = loadable;
	      executionInfo.stateVersion = state === null || state === void 0 ? void 0 : state.version;
	    } else {
	      executionInfo.depValuesDiscoveredSoFarDuringAsyncWork = null;
	      executionInfo.latestExecutionId = null;
	      executionInfo.latestLoadable = null;
	      executionInfo.stateVersion = null;
	    }
	  }
	  /**
	   * Conditionally updates the cache with a given loadable.
	   *
	   * We only cache loadables that are not loading because our cache keys are
	   * based on dep values, which are in an unfinished state for loadables that
	   * have a 'loading' state (new deps may be discovered while the selector
	   * runs its async code). We never want to cache partial dependencies b/c it
	   * could lead to errors, such as prematurely returning the result based on a
	   * partial list of deps-- we need the full list of deps to ensure that we
	   * are returning the correct result from cache.
	   */


	  function maybeSetCacheWithLoadable(state, depRoute, loadable) {
	    if (loadable.state !== 'loading') {
	      setCache(state, depRoute, loadable);
	    }
	  }

	  function updateExecutionInfoDepValues(depValues, store, executionId) {
	    const executionInfo = getExecutionInfo(store);

	    if (isLatestExecution(store, executionId)) {
	      executionInfo.depValuesDiscoveredSoFarDuringAsyncWork = depValues;
	    }
	  }

	  function clearExecutionInfo(store, executionId) {
	    if (isLatestExecution(store, executionId)) {
	      executionInfoMap.delete(store);
	    }
	  }

	  function isLatestExecution(store, executionId) {
	    const executionInfo = getExecutionInfo(store);
	    return executionId === executionInfo.latestExecutionId;
	  }

	  function maybeFreezeLoadableContents(loadable) {
	    if (loadable.state !== 'loading') {
	      maybeFreezeValue(loadable.contents);
	    }
	  }

	  function maybeFreezeValue(val) {
	  }

	  function setCache(state, cacheRoute, loadable) {
	    state.atomValues.set(key, loadable);
	    cache.set(cacheRoute, loadable);
	  }

	  function detectCircularDependencies(fn) {
	    if (dependencyStack.includes(key)) {
	      const message = `Recoil selector has circular dependencies: ${dependencyStack.slice(dependencyStack.indexOf(key)).join(' \u2192 ')}`;
	      return loadableWithError$1(new Error(message));
	    }

	    dependencyStack.push(key);

	    try {
	      return fn();
	    } finally {
	      dependencyStack.pop();
	    }
	  }

	  function selectorPeek(store, state) {
	    const cacheVal = cache.get(nodeKey => {
	      !(typeof nodeKey === 'string') ? Recoil_invariant(false) : void 0;
	      const peek = peekNodeLoadable$1(store, state, nodeKey);
	      return peek === null || peek === void 0 ? void 0 : peek.contents;
	    });
	    return cacheVal;
	  }

	  function selectorGet(store, state) {
	    return detectCircularDependencies(() => getSelectorValAndUpdatedDeps(store, state));
	  }

	  function invalidateSelector(state) {
	    state.atomValues.delete(key);
	  }

	  if (set != null) {
	    /**
	     * ES5 strict mode prohibits defining non-top-level function declarations,
	     * so don't use function declaration syntax here
	     */
	    const selectorSet = (store, state, newValue) => {
	      let syncSelectorSetFinished = false;
	      const writes = new Map();

	      function getRecoilValue({
	        key
	      }) {
	        if (syncSelectorSetFinished) {
	          throw new Error('Recoil: Async selector sets are not currently supported.');
	        }

	        const loadable = getCachedNodeLoadable(store, state, key);
	        maybeFreezeLoadableContents(loadable);

	        if (loadable.state === 'hasValue') {
	          return loadable.contents;
	        } else if (loadable.state === 'loading') {
	          throw new RecoilValueNotReady$2(key);
	        } else {
	          throw loadable.contents;
	        }
	      }

	      function setRecoilState(recoilState, valueOrUpdater) {
	        if (syncSelectorSetFinished) {
	          throw new Error('Recoil: Async selector sets are not currently supported.');
	        }

	        const newValue = typeof valueOrUpdater === 'function' ? // cast to any because we can't restrict type S from being a function itself without losing support for opaque types
	        // flowlint-next-line unclear-type:off
	        valueOrUpdater(getRecoilValue(recoilState)) : valueOrUpdater;
	        const upstreamWrites = setNodeValue$3(store, state, recoilState.key, newValue);
	        upstreamWrites.forEach((v, k) => writes.set(k, v));
	      }

	      function resetRecoilState(recoilState) {
	        setRecoilState(recoilState, DEFAULT_VALUE$4);
	      }

	      const ret = set({
	        set: setRecoilState,
	        get: getRecoilValue,
	        reset: resetRecoilState
	      }, newValue); // set should be a void method, but if the user makes it `async`, then it
	      // will return a Promise, which we don't currently support.

	      if (ret !== undefined) {
	        throw Recoil_isPromise(ret) ? new Error('Recoil: Async selector sets are not currently supported.') : new Error('Recoil: selector set should be a void function.');
	      }

	      syncSelectorSetFinished = true;
	      return writes;
	    };

	    return registerNode$1({
	      key,
	      nodeType: 'selector',
	      peek: selectorPeek,
	      get: selectorGet,
	      set: selectorSet,
	      init: selectorInit,
	      invalidate: invalidateSelector,
	      shouldDeleteConfigOnRelease: selectorShouldDeleteConfigOnRelease,
	      dangerouslyAllowMutability: options.dangerouslyAllowMutability,
	      shouldRestoreFromSnapshots: false,
	      retainedBy
	    });
	  } else {
	    return registerNode$1({
	      key,
	      nodeType: 'selector',
	      peek: selectorPeek,
	      get: selectorGet,
	      init: selectorInit,
	      invalidate: invalidateSelector,
	      shouldDeleteConfigOnRelease: selectorShouldDeleteConfigOnRelease,
	      dangerouslyAllowMutability: options.dangerouslyAllowMutability,
	      shouldRestoreFromSnapshots: false,
	      retainedBy
	    });
	  }
	}
	/* eslint-enable no-redeclare */


	var Recoil_selector = selector; // @fb-only: const {scopedAtom} = require('Recoil_ScopedAtom');

	const {
	  loadableWithError: loadableWithError$2,
	  loadableWithPromise: loadableWithPromise$2,
	  loadableWithValue: loadableWithValue$3
	} = Recoil_Loadable;
	const {
	  DEFAULT_VALUE: DEFAULT_VALUE$5,
	  DefaultValue: DefaultValue$2,
	  getConfigDeletionHandler: getConfigDeletionHandler$2,
	  registerNode: registerNode$2,
	  setConfigDeletionHandler: setConfigDeletionHandler$1
	} = Recoil_Node;
	const {
	  isRecoilValue: isRecoilValue$4
	} = Recoil_RecoilValue$1;
	const {
	  markRecoilValueModified: markRecoilValueModified$1,
	  setRecoilValue: setRecoilValue$3,
	  setRecoilValueLoadable: setRecoilValueLoadable$3
	} = Recoil_RecoilValueInterface;
	const {
	  retainedByOptionWithDefault: retainedByOptionWithDefault$2
	} = Recoil_Retention;

	function baseAtom(options) {
	  const {
	    key,
	    persistence_UNSTABLE: persistence
	  } = options;
	  const retainedBy = retainedByOptionWithDefault$2(options.retainedBy_UNSTABLE);
	  let liveStoresCount = 0;
	  let defaultLoadable = Recoil_isPromise(options.default) ? loadableWithPromise$2(options.default.then(value => {
	    defaultLoadable = loadableWithValue$3(value); // TODO Temporary disable Flow due to pending selector_NEW refactor

	    const promiseInfo = {
	      __key: key,
	      __value: value
	    };
	    return promiseInfo;
	  }).catch(error => {
	    defaultLoadable = loadableWithError$2(error);
	    throw error;
	  })) : loadableWithValue$3(options.default);
	  let cachedAnswerForUnvalidatedValue = undefined; // Cleanup handlers for this atom
	  // Rely on stable reference equality of the store to use it as a key per <RecoilRoot>

	  const cleanupEffectsByStore = new Map();

	  function wrapPendingPromise(store, promise) {
	    const wrappedPromise = promise.then(value => {
	      var _store$getState$nextT, _state$atomValues$get;

	      const state = (_store$getState$nextT = store.getState().nextTree) !== null && _store$getState$nextT !== void 0 ? _store$getState$nextT : store.getState().currentTree;

	      if (((_state$atomValues$get = state.atomValues.get(key)) === null || _state$atomValues$get === void 0 ? void 0 : _state$atomValues$get.contents) === wrappedPromise) {
	        setRecoilValue$3(store, node, value);
	      }

	      return {
	        __key: key,
	        __value: value
	      };
	    }).catch(error => {
	      var _store$getState$nextT2, _state$atomValues$get2;

	      const state = (_store$getState$nextT2 = store.getState().nextTree) !== null && _store$getState$nextT2 !== void 0 ? _store$getState$nextT2 : store.getState().currentTree;

	      if (((_state$atomValues$get2 = state.atomValues.get(key)) === null || _state$atomValues$get2 === void 0 ? void 0 : _state$atomValues$get2.contents) === wrappedPromise) {
	        setRecoilValueLoadable$3(store, node, loadableWithError$2(error));
	      }

	      throw error;
	    });
	    return wrappedPromise;
	  }

	  function initAtom(store, initState, trigger) {
	    liveStoresCount++;
	    const alreadyKnown = store.getState().knownAtoms.has(key);
	    store.getState().knownAtoms.add(key); // Setup async defaults to notify subscribers when they resolve

	    if (defaultLoadable.state === 'loading') {
	      const notifyDefaultSubscribers = () => {
	        var _store$getState$nextT3;

	        const state = (_store$getState$nextT3 = store.getState().nextTree) !== null && _store$getState$nextT3 !== void 0 ? _store$getState$nextT3 : store.getState().currentTree;

	        if (!state.atomValues.has(key)) {
	          markRecoilValueModified$1(store, node);
	        }
	      };

	      defaultLoadable.contents.then(notifyDefaultSubscribers).catch(notifyDefaultSubscribers);
	    } // Run Atom Effects
	    // This state is scoped by Store, since this is in the initAtom() closure


	    let initValue = DEFAULT_VALUE$5;
	    let pendingSetSelf = null;

	    if (options.effects_UNSTABLE != null && !alreadyKnown) {
	      let duringInit = true;

	      const setSelf = effect => valueOrUpdater => {
	        if (duringInit) {
	          const currentValue = initValue instanceof DefaultValue$2 || Recoil_isPromise(initValue) ? defaultLoadable.state === 'hasValue' ? defaultLoadable.contents : DEFAULT_VALUE$5 : initValue;
	          initValue = typeof valueOrUpdater === 'function' ? // cast to any because we can't restrict T from being a function without losing support for opaque types
	          valueOrUpdater(currentValue) // flowlint-line unclear-type:off
	          : valueOrUpdater; // Avoid calling onSet() when setSelf() initializes with a Promise

	          if (Recoil_isPromise(initValue)) {
	            initValue = initValue.then(value => {
	              pendingSetSelf = {
	                effect,
	                value
	              };
	              return value;
	            });
	          }
	        } else {
	          if (Recoil_isPromise(valueOrUpdater)) {
	            throw new Error('Setting atoms to async values is not implemented.');
	          }

	          if (typeof valueOrUpdater !== 'function') {
	            pendingSetSelf = {
	              effect,
	              value: valueOrUpdater
	            };
	          }

	          setRecoilValue$3(store, node, typeof valueOrUpdater === 'function' ? currentValue => {
	            const newValue = // cast to any because we can't restrict T from being a function without losing support for opaque types
	            valueOrUpdater(currentValue); // flowlint-line unclear-type:off

	            pendingSetSelf = {
	              effect,
	              value: newValue
	            };
	            return newValue;
	          } : valueOrUpdater);
	        }
	      };

	      const resetSelf = effect => () => setSelf(effect)(DEFAULT_VALUE$5);

	      const onSet = effect => handler => {
	        store.subscribeToTransactions(currentStore => {
	          var _currentTree$atomValu; // eslint-disable-next-line prefer-const


	          let {
	            currentTree,
	            previousTree
	          } = currentStore.getState();

	          if (!previousTree) {
	            previousTree = currentTree; // attempt to trundle on
	          }

	          const newLoadable = (_currentTree$atomValu = currentTree.atomValues.get(key)) !== null && _currentTree$atomValu !== void 0 ? _currentTree$atomValu : defaultLoadable;

	          if (newLoadable.state === 'hasValue') {
	            var _previousTree$atomVal, _pendingSetSelf, _pendingSetSelf2, _pendingSetSelf3;

	            const newValue = newLoadable.contents;
	            const oldLoadable = (_previousTree$atomVal = previousTree.atomValues.get(key)) !== null && _previousTree$atomVal !== void 0 ? _previousTree$atomVal : defaultLoadable;
	            const oldValue = oldLoadable.state === 'hasValue' ? oldLoadable.contents : DEFAULT_VALUE$5; // TODO This isn't actually valid, use as a placeholder for now.
	            // Ignore atom value changes that were set via setSelf() in the same effect.
	            // We will still properly call the handler if there was a subsequent
	            // set from something other than an atom effect which was batched
	            // with the `setSelf()` call.  However, we may incorrectly ignore
	            // the handler if the subsequent batched call happens to set the
	            // atom to the exact same value as the `setSelf()`.   But, in that
	            // case, it was kind of a noop, so the semantics are debatable..

	            if (((_pendingSetSelf = pendingSetSelf) === null || _pendingSetSelf === void 0 ? void 0 : _pendingSetSelf.effect) !== effect || ((_pendingSetSelf2 = pendingSetSelf) === null || _pendingSetSelf2 === void 0 ? void 0 : _pendingSetSelf2.value) !== newValue) {
	              handler(newValue, oldValue);
	            } else if (((_pendingSetSelf3 = pendingSetSelf) === null || _pendingSetSelf3 === void 0 ? void 0 : _pendingSetSelf3.effect) === effect) {
	              pendingSetSelf = null;
	            }
	          }
	        }, key);
	      };

	      for (const effect of (_options$effects_UNST = options.effects_UNSTABLE) !== null && _options$effects_UNST !== void 0 ? _options$effects_UNST : []) {
	        var _options$effects_UNST;

	        const cleanup = effect({
	          node,
	          trigger,
	          setSelf: setSelf(effect),
	          resetSelf: resetSelf(effect),
	          onSet: onSet(effect)
	        });

	        if (cleanup != null) {
	          var _cleanupEffectsByStor;

	          cleanupEffectsByStore.set(store, [...((_cleanupEffectsByStor = cleanupEffectsByStore.get(store)) !== null && _cleanupEffectsByStor !== void 0 ? _cleanupEffectsByStor : []), cleanup]);
	        }
	      }

	      duringInit = false;
	    } // Mutate initial state in place since we know there are no other subscribers
	    // since we are the ones initializing on first use.


	    if (!(initValue instanceof DefaultValue$2)) {
	      var _store$getState$nextT4;

	      const initLoadable = Recoil_isPromise(initValue) ? loadableWithPromise$2(wrapPendingPromise(store, initValue)) : loadableWithValue$3(initValue);
	      initState.atomValues.set(key, initLoadable); // If there is a pending transaction, then also mutate the next state tree.
	      // This could happen if the atom was first initialized in an action that
	      // also updated some other atom's state.

	      (_store$getState$nextT4 = store.getState().nextTree) === null || _store$getState$nextT4 === void 0 ? void 0 : _store$getState$nextT4.atomValues.set(key, initLoadable);
	    }

	    return () => {
	      var _cleanupEffectsByStor2;

	      liveStoresCount--;
	      (_cleanupEffectsByStor2 = cleanupEffectsByStore.get(store)) === null || _cleanupEffectsByStor2 === void 0 ? void 0 : _cleanupEffectsByStor2.forEach(cleanup => cleanup());
	      cleanupEffectsByStore.delete(store);
	      store.getState().knownAtoms.delete(key); // FIXME remove knownAtoms?
	    };
	  }

	  function peekAtom(_store, state) {
	    var _ref, _state$atomValues$get3, _cachedAnswerForUnval;

	    return (_ref = (_state$atomValues$get3 = state.atomValues.get(key)) !== null && _state$atomValues$get3 !== void 0 ? _state$atomValues$get3 : (_cachedAnswerForUnval = cachedAnswerForUnvalidatedValue) === null || _cachedAnswerForUnval === void 0 ? void 0 : _cachedAnswerForUnval[1]) !== null && _ref !== void 0 ? _ref : defaultLoadable;
	  }

	  function getAtom(_store, state) {
	    if (state.atomValues.has(key)) {
	      // Atom value is stored in state:
	      return Recoil_nullthrows(state.atomValues.get(key));
	    } else if (state.nonvalidatedAtoms.has(key)) {
	      // Atom value is stored but needs validation before use.
	      // We might have already validated it and have a cached validated value:
	      if (cachedAnswerForUnvalidatedValue != null) {
	        return cachedAnswerForUnvalidatedValue;
	      }

	      if (persistence == null) {
	        return defaultLoadable;
	      }

	      const nonvalidatedValue = state.nonvalidatedAtoms.get(key);
	      const validatorResult = persistence.validator(nonvalidatedValue, DEFAULT_VALUE$5);
	      const validatedValueLoadable = validatorResult instanceof DefaultValue$2 ? defaultLoadable : loadableWithValue$3(validatorResult);
	      cachedAnswerForUnvalidatedValue = validatedValueLoadable;
	      return cachedAnswerForUnvalidatedValue;
	    } else {
	      return defaultLoadable;
	    }
	  }

	  function invalidateAtom() {
	    cachedAnswerForUnvalidatedValue = undefined;
	  }

	  function setAtom(_store, state, newValue) {
	    // Bail out if we're being set to the existing value, or if we're being
	    // reset but have no stored value (validated or unvalidated) to reset from:
	    if (state.atomValues.has(key)) {
	      const existing = Recoil_nullthrows(state.atomValues.get(key));

	      if (existing.state === 'hasValue' && newValue === existing.contents) {
	        return new Map();
	      }
	    } else if (!state.nonvalidatedAtoms.has(key) && newValue instanceof DefaultValue$2) {
	      return new Map();
	    }

	    cachedAnswerForUnvalidatedValue = undefined; // can be released now if it was previously in use

	    return new Map().set(key, loadableWithValue$3(newValue));
	  }

	  function shouldDeleteConfigOnReleaseAtom() {
	    return getConfigDeletionHandler$2(key) !== undefined && liveStoresCount <= 0;
	  }

	  const node = registerNode$2({
	    key,
	    nodeType: 'atom',
	    peek: peekAtom,
	    get: getAtom,
	    set: setAtom,
	    init: initAtom,
	    invalidate: invalidateAtom,
	    shouldDeleteConfigOnRelease: shouldDeleteConfigOnReleaseAtom,
	    dangerouslyAllowMutability: options.dangerouslyAllowMutability,
	    persistence_UNSTABLE: options.persistence_UNSTABLE ? {
	      type: options.persistence_UNSTABLE.type,
	      backButton: options.persistence_UNSTABLE.backButton
	    } : undefined,
	    shouldRestoreFromSnapshots: true,
	    retainedBy
	  });
	  return node;
	} // prettier-ignore


	function atom(options) {
	  const {
	    default: optionsDefault,
	    // @fb-only: scopeRules_APPEND_ONLY_READ_THE_DOCS,
	    ...restOptions
	  } = options;

	  if (isRecoilValue$4(optionsDefault) // Continue to use atomWithFallback for promise defaults for scoped atoms
	  // for now, since scoped atoms don't support async defaults
	  // @fb-only: || (isPromise(optionsDefault) && scopeRules_APPEND_ONLY_READ_THE_DOCS)
	  ) {
	    return atomWithFallback({ ...restOptions,
	      default: optionsDefault // @fb-only: scopeRules_APPEND_ONLY_READ_THE_DOCS,

	    }); // @fb-only: } else if (scopeRules_APPEND_ONLY_READ_THE_DOCS && !isPromise(optionsDefault)) {
	    // @fb-only: return scopedAtom<T>({
	    // @fb-only: ...restOptions,
	    // @fb-only: default: optionsDefault,
	    // @fb-only: scopeRules_APPEND_ONLY_READ_THE_DOCS,
	    // @fb-only: });
	  } else {
	    return baseAtom({ ...restOptions,
	      default: optionsDefault
	    });
	  }
	}

	function atomWithFallback(options) {
	  const base = atom({ ...options,
	    default: DEFAULT_VALUE$5,
	    persistence_UNSTABLE: options.persistence_UNSTABLE === undefined ? undefined : { ...options.persistence_UNSTABLE,
	      validator: storedValue => storedValue instanceof DefaultValue$2 ? storedValue : Recoil_nullthrows(options.persistence_UNSTABLE).validator(storedValue, DEFAULT_VALUE$5)
	    },
	    // TODO Hack for now.
	    // flowlint-next-line unclear-type: off
	    effects_UNSTABLE: options.effects_UNSTABLE
	  });
	  const sel = Recoil_selector({
	    key: `${options.key}__withFallback`,
	    get: ({
	      get
	    }) => {
	      const baseValue = get(base);
	      return baseValue instanceof DefaultValue$2 ? options.default : baseValue;
	    },
	    set: ({
	      set
	    }, newValue) => set(base, newValue),
	    dangerouslyAllowMutability: options.dangerouslyAllowMutability
	  });
	  setConfigDeletionHandler$1(sel.key, getConfigDeletionHandler$2(options.key));
	  return sel;
	}

	var Recoil_atom = atom;
	/**
	 * (c) Facebook, Inc. and its affiliates. Confidential and proprietary.
	 *
	 * @emails oncall+recoil
	 * 
	 * @format
	 */

	class MapCache {
	  constructor(options) {
	    var _options$mapKey;

	    _defineProperty(this, "_map", void 0);

	    _defineProperty(this, "_keyMapper", void 0);

	    this._map = new Map();
	    this._keyMapper = (_options$mapKey = options === null || options === void 0 ? void 0 : options.mapKey) !== null && _options$mapKey !== void 0 ? _options$mapKey : v => v;
	  }

	  size() {
	    return this._map.size;
	  }

	  has(key) {
	    return this._map.has(this._keyMapper(key));
	  }

	  get(key) {
	    return this._map.get(this._keyMapper(key));
	  }

	  set(key, val) {
	    this._map.set(this._keyMapper(key), val);
	  }

	  delete(key) {
	    this._map.delete(this._keyMapper(key));
	  }

	  clear() {
	    this._map.clear();
	  }

	}

	var Recoil_MapCache = {
	  MapCache
	};
	var Recoil_MapCache_1 = Recoil_MapCache.MapCache;
	var Recoil_MapCache$1 = /*#__PURE__*/Object.freeze({
	  __proto__: null,
	  MapCache: Recoil_MapCache_1
	});
	const {
	  LRUCache: LRUCache$2
	} = Recoil_LRUCache$1;
	const {
	  MapCache: MapCache$1
	} = Recoil_MapCache$1;
	const defaultPolicy$1 = {
	  equality: 'reference',
	  eviction: 'none',
	  maxSize: Infinity
	};

	function cacheFromPolicy({
	  equality = defaultPolicy$1.equality,
	  eviction = defaultPolicy$1.eviction,
	  maxSize = defaultPolicy$1.maxSize
	} = defaultPolicy$1) {
	  const valueMapper = getValueMapper$1(equality);
	  const cache = getCache(eviction, maxSize, valueMapper);
	  return cache;
	}

	function getValueMapper$1(equality) {
	  switch (equality) {
	    case 'reference':
	      return val => val;

	    case 'value':
	      return val => Recoil_stableStringify(val);
	  }

	  throw new Error(`Unrecognized equality policy ${equality}`);
	}

	function getCache(eviction, maxSize, mapKey) {
	  switch (eviction) {
	    case 'keep-all':
	      // $FlowFixMe[method-unbinding]
	      return new MapCache$1({
	        mapKey
	      });

	    case 'lru':
	      // $FlowFixMe[method-unbinding]
	      return new LRUCache$2({
	        mapKey,
	        maxSize: Recoil_nullthrows(maxSize)
	      });

	    case 'most-recent':
	      // $FlowFixMe[method-unbinding]
	      return new LRUCache$2({
	        mapKey,
	        maxSize: 1
	      });
	  }

	  throw new Error(`Unrecognized eviction policy ${eviction}`);
	}

	var Recoil_cacheFromPolicy = cacheFromPolicy;
	const {
	  setConfigDeletionHandler: setConfigDeletionHandler$2
	} = Recoil_Node;
	/*
	A function which returns an atom based on the input parameter.

	Each unique parameter returns a unique atom. E.g.,

	  const f = atomFamily(...);
	  f({a: 1}) => an atom
	  f({a: 2}) => a different atom

	This allows components to persist local, private state using atoms.  Each
	instance of the component may have a different key, which it uses as the
	parameter for a family of atoms; in this way, each component will have
	its own atom not shared by other instances.  These state keys may be composed
	into children's state keys as well.
	*/

	function atomFamily(options) {
	  var _options$cachePolicyF, _options$cachePolicyF2;

	  const atomCache = Recoil_cacheFromPolicy({
	    equality: (_options$cachePolicyF = (_options$cachePolicyF2 = options.cachePolicyForParams_UNSTABLE) === null || _options$cachePolicyF2 === void 0 ? void 0 : _options$cachePolicyF2.equality) !== null && _options$cachePolicyF !== void 0 ? _options$cachePolicyF : 'value',
	    eviction: 'keep-all'
	  }); // Simple atomFamily implementation to cache individual atoms based
	  // on the parameter value equality.

	  return params => {
	    var _stableStringify;

	    const cachedAtom = atomCache.get(params);

	    if (cachedAtom != null) {
	      return cachedAtom;
	    }

	    const {
	      cachePolicyForParams_UNSTABLE,
	      ...atomOptions
	    } = options;
	    const newAtom = Recoil_atom({ ...atomOptions,
	      key: `${options.key}__${(_stableStringify = Recoil_stableStringify(params)) !== null && _stableStringify !== void 0 ? _stableStringify : 'void'}`,
	      default: typeof options.default === 'function' ? // The default was parameterized
	      // Flow doesn't know that T isn't a function, so we need to case to any
	      options.default(params) // flowlint-line unclear-type:off
	      : // Default may be a static value, promise, or RecoilValue
	      options.default,
	      retainedBy_UNSTABLE: typeof options.retainedBy_UNSTABLE === 'function' ? options.retainedBy_UNSTABLE(params) : options.retainedBy_UNSTABLE,
	      effects_UNSTABLE: typeof options.effects_UNSTABLE === 'function' ? options.effects_UNSTABLE(params) : options.effects_UNSTABLE // prettier-ignore
	      // @fb-only: scopeRules_APPEND_ONLY_READ_THE_DOCS: mapScopeRules(
	      // @fb-only: options.scopeRules_APPEND_ONLY_READ_THE_DOCS,
	      // @fb-only: params,
	      // @fb-only: ),

	    });
	    atomCache.set(params, newAtom);
	    setConfigDeletionHandler$2(newAtom.key, () => {
	      atomCache.delete(params);
	    });
	    return newAtom;
	  };
	}

	var Recoil_atomFamily = atomFamily;
	const {
	  setConfigDeletionHandler: setConfigDeletionHandler$3
	} = Recoil_Node; // Keep in mind the parameter needs to be serializable as a cahche key
	// using Recoil_stableStringify
	// Add a unique index to each selector in case the cache implementation allows
	// duplicate keys based on equivalent stringified parameters

	let nextIndex = 0;
	/* eslint-disable no-redeclare */
	// Return a function that returns members of a family of selectors of the same type
	// E.g.,
	//
	// const s = selectorFamily(...);
	// s({a: 1}) => a selector
	// s({a: 2}) => a different selector
	//
	// By default, the selectors are distinguished by distinct values of the
	// parameter based on value equality, not reference equality.  This allows using
	// object literals or other equivalent objects at callsites to not create
	// duplicate cache entries.  This behavior may be overridden with the
	// cacheImplementationForParams option.

	function selectorFamily(options) {
	  var _options$cachePolicyF, _options$cachePolicyF2;

	  const selectorCache = Recoil_cacheFromPolicy({
	    equality: (_options$cachePolicyF = (_options$cachePolicyF2 = options.cachePolicyForParams_UNSTABLE) === null || _options$cachePolicyF2 === void 0 ? void 0 : _options$cachePolicyF2.equality) !== null && _options$cachePolicyF !== void 0 ? _options$cachePolicyF : 'value',
	    eviction: 'keep-all'
	  });
	  return params => {
	    var _stableStringify;

	    const cachedSelector = selectorCache.get(params);

	    if (cachedSelector != null) {
	      return cachedSelector;
	    }

	    const myKey = `${options.key}__selectorFamily/${(_stableStringify = Recoil_stableStringify(params, {
      // It is possible to use functions in parameters if the user uses
      // a cache with reference equality thanks to the incrementing index.
      allowFunctions: true
    })) !== null && _stableStringify !== void 0 ? _stableStringify : 'void'}/${nextIndex++}`; // Append index in case values serialize to the same key string

	    const myGet = callbacks => options.get(params)(callbacks);

	    const myCachePolicy = options.cachePolicy_UNSTABLE;
	    const retainedBy = typeof options.retainedBy_UNSTABLE === 'function' ? options.retainedBy_UNSTABLE(params) : options.retainedBy_UNSTABLE;
	    let newSelector;

	    if (options.set != null) {
	      const set = options.set;

	      const mySet = (callbacks, newValue) => set(params)(callbacks, newValue);

	      newSelector = Recoil_selector({
	        key: myKey,
	        get: myGet,
	        set: mySet,
	        cachePolicy_UNSTABLE: myCachePolicy,
	        dangerouslyAllowMutability: options.dangerouslyAllowMutability,
	        retainedBy_UNSTABLE: retainedBy
	      });
	    } else {
	      newSelector = Recoil_selector({
	        key: myKey,
	        get: myGet,
	        cachePolicy_UNSTABLE: myCachePolicy,
	        dangerouslyAllowMutability: options.dangerouslyAllowMutability,
	        retainedBy_UNSTABLE: retainedBy
	      });
	    }

	    selectorCache.set(params, newSelector);
	    setConfigDeletionHandler$3(newSelector.key, () => {
	      selectorCache.delete(params);
	    });
	    return newSelector;
	  };
	}
	/* eslint-enable no-redeclare */


	var Recoil_selectorFamily = selectorFamily; // flowlint-next-line unclear-type:off

	const constantSelector = Recoil_selectorFamily({
	  key: '__constant',
	  get: constant => () => constant,
	  cachePolicyForParams_UNSTABLE: {
	    equality: 'reference'
	  }
	}); // Function that returns a selector which always produces the
	// same constant value.  It may be called multiple times with the
	// same value, based on reference equality, and will provide the
	// same selector.

	function constSelector(constant) {
	  return constantSelector(constant);
	}

	var Recoil_constSelector = constSelector; // flowlint-next-line unclear-type:off

	const throwingSelector = Recoil_selectorFamily({
	  key: '__error',
	  get: message => () => {
	    throw new Error(message);
	  },
	  cachePolicyForParams_UNSTABLE: {
	    equality: 'reference'
	  }
	}); // Function that returns a selector which always throws an error
	// with the provided message.

	function errorSelector(message) {
	  return throwingSelector(message);
	}

	var Recoil_errorSelector = errorSelector;
	/**
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Wraps another recoil value and prevents writing to it.
	 *
	 * @emails oncall+recoil
	 * 
	 * @format
	 */

	function readOnlySelector(atom) {
	  // flowlint-next-line unclear-type: off
	  return atom;
	}

	var Recoil_readOnlySelector = readOnlySelector;
	const {
	  loadableWithError: loadableWithError$3,
	  loadableWithPromise: loadableWithPromise$3,
	  loadableWithValue: loadableWithValue$4
	} = Recoil_Loadable; /////////////////
	//  TRUTH TABLE
	/////////////////
	// Dependencies        waitForNone         waitForAny        waitForAll       waitForAllSettled
	//  [loading, loading]  [Promise, Promise]  Promise           Promise         Promise
	//  [value, loading]    [value, Promise]    [value, Promise]  Promise         Promise
	//  [value, value]      [value, value]      [value, value]    [value, value]  [value, value]
	//
	//  [error, loading]    [Error, Promise]    [Error, Promise]  Error           Promise
	//  [error, error]      [Error, Error]      [Error, Error]    Error           [error, error]
	//  [value, error]      [value, Error]      [value, Error]    Error           [value, error]
	// Issue parallel requests for all dependencies and return the current
	// status if they have results, have some error, or are still pending.

	function concurrentRequests(getRecoilValue, deps) {
	  const results = Array(deps.length).fill(undefined);
	  const exceptions = Array(deps.length).fill(undefined);

	  for (const [i, dep] of deps.entries()) {
	    try {
	      results[i] = getRecoilValue(dep);
	    } catch (e) {
	      // exceptions can either be Promises of pending results or real errors
	      exceptions[i] = e;
	    }
	  }

	  return [results, exceptions];
	}

	function isError(exp) {
	  return exp != null && !Recoil_isPromise(exp);
	}

	function unwrapDependencies(dependencies) {
	  return Array.isArray(dependencies) ? dependencies : Object.getOwnPropertyNames(dependencies).map(key => dependencies[key]);
	}

	function getValueFromLoadablePromiseResult(result) {
	  if (result != null && typeof result === 'object' && result.hasOwnProperty('__value')) {
	    return result.__value;
	  }

	  return result;
	}

	function wrapResults(dependencies, results) {
	  return Array.isArray(dependencies) ? results : // Object.getOwnPropertyNames() has consistent key ordering with ES6
	  Object.getOwnPropertyNames(dependencies).reduce((out, key, idx) => ({ ...out,
	    [key]: results[idx]
	  }), {});
	}

	function wrapLoadables(dependencies, results, exceptions) {
	  const output = exceptions.map((exception, idx) => exception == null ? loadableWithValue$4(results[idx]) : Recoil_isPromise(exception) ? loadableWithPromise$3(exception) : loadableWithError$3(exception));
	  return wrapResults(dependencies, output);
	}

	function combineAsyncResultsWithSyncResults(syncResults, asyncResults) {
	  return asyncResults.map((result, idx) =>
	  /**
	   * it's important we use === undefined as opposed to == null, because the
	   * resolved value of the async promise could be `null`, in which case we
	   * don't want to use syncResults[idx], which would be undefined. If async
	   * promise resolves to `undefined`, that's ok because `syncResults[idx]`
	   * will also be `undefined`. That's a little hacky, but it works.
	   */
	  result === undefined ? syncResults[idx] : result);
	} // Selector that requests all dependencies in parallel and immediately returns
	// current results without waiting.


	const waitForNone = Recoil_selectorFamily({
	  key: '__waitForNone',
	  get: dependencies => ({
	    get
	  }) => {
	    // Issue requests for all dependencies in parallel.
	    const deps = unwrapDependencies(dependencies);
	    const [results, exceptions] = concurrentRequests(get, deps); // Always return the current status of the results; never block.

	    return wrapLoadables(dependencies, results, exceptions);
	  },
	  dangerouslyAllowMutability: true
	}); // Selector that requests all dependencies in parallel and waits for at least
	// one to be available before returning results.  It will only error if all
	// dependencies have errors.

	const waitForAny = Recoil_selectorFamily({
	  key: '__waitForAny',
	  get: dependencies => ({
	    get
	  }) => {
	    // Issue requests for all dependencies in parallel.
	    // Exceptions can either be Promises of pending results or real errors
	    const deps = unwrapDependencies(dependencies);
	    const [results, exceptions] = concurrentRequests(get, deps); // If any results are available, value or error, return the current status

	    if (exceptions.some(exp => !Recoil_isPromise(exp))) {
	      return wrapLoadables(dependencies, results, exceptions);
	    } // Otherwise, return a promise that will resolve when the next result is
	    // available, whichever one happens to be next.  But, if all pending
	    // dependencies end up with errors, then reject the promise.


	    return new Promise(resolve => {
	      for (const [i, exp] of exceptions.entries()) {
	        if (Recoil_isPromise(exp)) {
	          exp.then(result => {
	            results[i] = getValueFromLoadablePromiseResult(result);
	            exceptions[i] = undefined;
	            resolve(wrapLoadables(dependencies, results, exceptions));
	          }).catch(error => {
	            exceptions[i] = error;
	            resolve(wrapLoadables(dependencies, results, exceptions));
	          });
	        }
	      }
	    });
	  },
	  dangerouslyAllowMutability: true
	}); // Selector that requests all dependencies in parallel and waits for all to be
	// available before returning a value.  It will error if any dependencies error.

	const waitForAll = Recoil_selectorFamily({
	  key: '__waitForAll',
	  get: dependencies => ({
	    get
	  }) => {
	    // Issue requests for all dependencies in parallel.
	    // Exceptions can either be Promises of pending results or real errors
	    const deps = unwrapDependencies(dependencies);
	    const [results, exceptions] = concurrentRequests(get, deps); // If all results are available, return the results

	    if (exceptions.every(exp => exp == null)) {
	      return wrapResults(dependencies, results);
	    } // If we have any errors, throw the first error


	    const error = exceptions.find(isError);

	    if (error != null) {
	      throw error;
	    } // Otherwise, return a promise that will resolve when all results are available


	    return Promise.all(exceptions).then(exceptionResults => wrapResults(dependencies, combineAsyncResultsWithSyncResults(results, exceptionResults).map(getValueFromLoadablePromiseResult)));
	  },
	  dangerouslyAllowMutability: true
	});
	const waitForAllSettled = Recoil_selectorFamily({
	  key: '__waitForAllSettled',
	  get: dependencies => ({
	    get
	  }) => {
	    // Issue requests for all dependencies in parallel.
	    // Exceptions can either be Promises of pending results or real errors
	    const deps = unwrapDependencies(dependencies);
	    const [results, exceptions] = concurrentRequests(get, deps); // If all results are available, return the results

	    if (exceptions.every(exp => !Recoil_isPromise(exp))) {
	      return wrapLoadables(dependencies, results, exceptions);
	    } // Wait for all results to settle


	    return Promise.all(exceptions.map((exp, i) => Recoil_isPromise(exp) ? exp.then(result => {
	      results[i] = getValueFromLoadablePromiseResult(result);
	      exceptions[i] = undefined;
	    }).catch(error => {
	      results[i] = undefined;
	      exceptions[i] = error;
	    }) : null)) // Then wrap them as loadables
	    .then(() => wrapLoadables(dependencies, results, exceptions));
	  },
	  dangerouslyAllowMutability: true
	});
	const noWait = Recoil_selectorFamily({
	  key: '__noWait',
	  get: dependency => ({
	    get
	  }) => {
	    try {
	      return loadableWithValue$4(get(dependency));
	    } catch (exception) {
	      return Recoil_isPromise(exception) ? loadableWithPromise$3(exception) : loadableWithError$3(exception);
	    }
	  },
	  dangerouslyAllowMutability: true
	});
	var Recoil_WaitFor = {
	  waitForNone,
	  waitForAny,
	  waitForAll,
	  waitForAllSettled,
	  noWait
	};
	const {
	  batchUpdates: batchUpdates$3,
	  setBatcher: setBatcher$1
	} = Recoil_Batching;
	const {
	  DefaultValue: DefaultValue$3
	} = Recoil_Node;
	const {
	  RecoilRoot: RecoilRoot$2
	} = Recoil_RecoilRoot_react;
	const {
	  isRecoilValue: isRecoilValue$5
	} = Recoil_RecoilValue$1;
	const {
	  retentionZone: retentionZone$1
	} = Recoil_RetentionZone;
	const {
	  freshSnapshot: freshSnapshot$2
	} = Recoil_Snapshot$1;
	const {
	  useGotoRecoilSnapshot: useGotoRecoilSnapshot$1,
	  useRecoilCallback: useRecoilCallback$1,
	  useRecoilSnapshot: useRecoilSnapshot$1,
	  useRecoilState: useRecoilState$1,
	  useRecoilStateLoadable: useRecoilStateLoadable$1,
	  useRecoilTransaction: useRecoilTransaction$1,
	  useRecoilTransactionObserver: useRecoilTransactionObserver$1,
	  useRecoilValue: useRecoilValue$1,
	  useRecoilValueLoadable: useRecoilValueLoadable$1,
	  useResetRecoilState: useResetRecoilState$1,
	  useRetain: useRetain$1,
	  useSetRecoilState: useSetRecoilState$1,
	  useSetUnvalidatedAtomValues: useSetUnvalidatedAtomValues$1,
	  useTransactionObservation_DEPRECATED: useTransactionObservation_DEPRECATED$1
	} = Recoil_Hooks;
	const {
	  noWait: noWait$1,
	  waitForAll: waitForAll$1,
	  waitForAllSettled: waitForAllSettled$1,
	  waitForAny: waitForAny$1,
	  waitForNone: waitForNone$1
	} = Recoil_WaitFor;
	var Recoil_index = {
	  // Types
	  DefaultValue: DefaultValue$3,
	  // Components
	  RecoilRoot: RecoilRoot$2,
	  useRecoilBridgeAcrossReactRoots_UNSTABLE: Recoil_useRecoilBridgeAcrossReactRoots,
	  // RecoilValues
	  atom: Recoil_atom,
	  selector: Recoil_selector,
	  // Other factories
	  retentionZone: retentionZone$1,
	  // Convenience RecoilValues
	  atomFamily: Recoil_atomFamily,
	  selectorFamily: Recoil_selectorFamily,
	  constSelector: Recoil_constSelector,
	  errorSelector: Recoil_errorSelector,
	  readOnlySelector: Recoil_readOnlySelector,
	  // Hooks that accept RecoilValues
	  useRecoilValue: useRecoilValue$1,
	  useRecoilValueLoadable: useRecoilValueLoadable$1,
	  useRecoilState: useRecoilState$1,
	  useRecoilStateLoadable: useRecoilStateLoadable$1,
	  useSetRecoilState: useSetRecoilState$1,
	  useResetRecoilState: useResetRecoilState$1,
	  useGetRecoilValueInfo_UNSTABLE: Recoil_useGetRecoilValueInfo,
	  useRetain: useRetain$1,
	  // Hooks for complex operations with RecoilValues
	  useRecoilCallback: useRecoilCallback$1,
	  useRecoilTransaction_UNSTABLE: useRecoilTransaction$1,
	  // Hooks for Snapshots
	  useGotoRecoilSnapshot: useGotoRecoilSnapshot$1,
	  useRecoilSnapshot: useRecoilSnapshot$1,
	  useRecoilTransactionObserver_UNSTABLE: useRecoilTransactionObserver$1,
	  useTransactionObservation_UNSTABLE: useTransactionObservation_DEPRECATED$1,
	  useSetUnvalidatedAtomValues_UNSTABLE: useSetUnvalidatedAtomValues$1,
	  // Concurrency Helpers
	  noWait: noWait$1,
	  waitForNone: waitForNone$1,
	  waitForAny: waitForAny$1,
	  waitForAll: waitForAll$1,
	  waitForAllSettled: waitForAllSettled$1,
	  // Other functions
	  isRecoilValue: isRecoilValue$5,
	  // Batching
	  batchUpdates: batchUpdates$3,
	  setBatcher: setBatcher$1,
	  // Snapshot Utils
	  snapshot_UNSTABLE: freshSnapshot$2
	};
	var Recoil_index_2 = Recoil_index.RecoilRoot;

	var bind = function bind(fn, thisArg) {
	  return function wrap() {
	    var args = new Array(arguments.length);

	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }

	    return fn.apply(thisArg, args);
	  };
	};

	// utils is a library of generic helper functions non-specific to axios


	var toString = Object.prototype.toString;
	/**
	 * Determine if a value is an Array
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Array, otherwise false
	 */

	function isArray(val) {
	  return toString.call(val) === '[object Array]';
	}
	/**
	 * Determine if a value is undefined
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if the value is undefined, otherwise false
	 */


	function isUndefined(val) {
	  return typeof val === 'undefined';
	}
	/**
	 * Determine if a value is a Buffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Buffer, otherwise false
	 */


	function isBuffer(val) {
	  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
	}
	/**
	 * Determine if a value is an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
	 */


	function isArrayBuffer(val) {
	  return toString.call(val) === '[object ArrayBuffer]';
	}
	/**
	 * Determine if a value is a FormData
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an FormData, otherwise false
	 */


	function isFormData(val) {
	  return typeof FormData !== 'undefined' && val instanceof FormData;
	}
	/**
	 * Determine if a value is a view on an ArrayBuffer
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
	 */


	function isArrayBufferView(val) {
	  var result;

	  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
	    result = ArrayBuffer.isView(val);
	  } else {
	    result = val && val.buffer && val.buffer instanceof ArrayBuffer;
	  }

	  return result;
	}
	/**
	 * Determine if a value is a String
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a String, otherwise false
	 */


	function isString(val) {
	  return typeof val === 'string';
	}
	/**
	 * Determine if a value is a Number
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Number, otherwise false
	 */


	function isNumber(val) {
	  return typeof val === 'number';
	}
	/**
	 * Determine if a value is an Object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is an Object, otherwise false
	 */


	function isObject(val) {
	  return val !== null && typeof val === 'object';
	}
	/**
	 * Determine if a value is a plain Object
	 *
	 * @param {Object} val The value to test
	 * @return {boolean} True if value is a plain Object, otherwise false
	 */


	function isPlainObject(val) {
	  if (toString.call(val) !== '[object Object]') {
	    return false;
	  }

	  var prototype = Object.getPrototypeOf(val);
	  return prototype === null || prototype === Object.prototype;
	}
	/**
	 * Determine if a value is a Date
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Date, otherwise false
	 */


	function isDate(val) {
	  return toString.call(val) === '[object Date]';
	}
	/**
	 * Determine if a value is a File
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a File, otherwise false
	 */


	function isFile(val) {
	  return toString.call(val) === '[object File]';
	}
	/**
	 * Determine if a value is a Blob
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Blob, otherwise false
	 */


	function isBlob(val) {
	  return toString.call(val) === '[object Blob]';
	}
	/**
	 * Determine if a value is a Function
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Function, otherwise false
	 */


	function isFunction(val) {
	  return toString.call(val) === '[object Function]';
	}
	/**
	 * Determine if a value is a Stream
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a Stream, otherwise false
	 */


	function isStream(val) {
	  return isObject(val) && isFunction(val.pipe);
	}
	/**
	 * Determine if a value is a URLSearchParams object
	 *
	 * @param {Object} val The value to test
	 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
	 */


	function isURLSearchParams(val) {
	  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
	}
	/**
	 * Trim excess whitespace off the beginning and end of a string
	 *
	 * @param {String} str The String to trim
	 * @returns {String} The String freed of excess whitespace
	 */


	function trim(str) {
	  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
	}
	/**
	 * Determine if we're running in a standard browser environment
	 *
	 * This allows axios to run in a web worker, and react-native.
	 * Both environments support XMLHttpRequest, but not fully standard globals.
	 *
	 * web workers:
	 *  typeof window -> undefined
	 *  typeof document -> undefined
	 *
	 * react-native:
	 *  navigator.product -> 'ReactNative'
	 * nativescript
	 *  navigator.product -> 'NativeScript' or 'NS'
	 */


	function isStandardBrowserEnv() {
	  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' || navigator.product === 'NativeScript' || navigator.product === 'NS')) {
	    return false;
	  }

	  return typeof window !== 'undefined' && typeof document !== 'undefined';
	}
	/**
	 * Iterate over an Array or an Object invoking a function for each item.
	 *
	 * If `obj` is an Array callback will be called passing
	 * the value, index, and complete array for each item.
	 *
	 * If 'obj' is an Object callback will be called passing
	 * the value, key, and complete object for each property.
	 *
	 * @param {Object|Array} obj The object to iterate
	 * @param {Function} fn The callback to invoke for each item
	 */


	function forEach(obj, fn) {
	  // Don't bother if no value provided
	  if (obj === null || typeof obj === 'undefined') {
	    return;
	  } // Force an array if not already something iterable


	  if (typeof obj !== 'object') {
	    /*eslint no-param-reassign:0*/
	    obj = [obj];
	  }

	  if (isArray(obj)) {
	    // Iterate over array values
	    for (var i = 0, l = obj.length; i < l; i++) {
	      fn.call(null, obj[i], i, obj);
	    }
	  } else {
	    // Iterate over object keys
	    for (var key in obj) {
	      if (Object.prototype.hasOwnProperty.call(obj, key)) {
	        fn.call(null, obj[key], key, obj);
	      }
	    }
	  }
	}
	/**
	 * Accepts varargs expecting each argument to be an object, then
	 * immutably merges the properties of each object and returns result.
	 *
	 * When multiple objects contain the same key the later object in
	 * the arguments list will take precedence.
	 *
	 * Example:
	 *
	 * ```js
	 * var result = merge({foo: 123}, {foo: 456});
	 * console.log(result.foo); // outputs 456
	 * ```
	 *
	 * @param {Object} obj1 Object to merge
	 * @returns {Object} Result of all merge properties
	 */


	function
	  /* obj1, obj2, obj3, ... */
	merge() {
	  var result = {};

	  function assignValue(val, key) {
	    if (isPlainObject(result[key]) && isPlainObject(val)) {
	      result[key] = merge(result[key], val);
	    } else if (isPlainObject(val)) {
	      result[key] = merge({}, val);
	    } else if (isArray(val)) {
	      result[key] = val.slice();
	    } else {
	      result[key] = val;
	    }
	  }

	  for (var i = 0, l = arguments.length; i < l; i++) {
	    forEach(arguments[i], assignValue);
	  }

	  return result;
	}
	/**
	 * Extends object a by mutably adding to it the properties of object b.
	 *
	 * @param {Object} a The object to be extended
	 * @param {Object} b The object to copy properties from
	 * @param {Object} thisArg The object to bind function to
	 * @return {Object} The resulting value of object a
	 */


	function extend(a, b, thisArg) {
	  forEach(b, function assignValue(val, key) {
	    if (thisArg && typeof val === 'function') {
	      a[key] = bind(val, thisArg);
	    } else {
	      a[key] = val;
	    }
	  });
	  return a;
	}
	/**
	 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
	 *
	 * @param {string} content with BOM
	 * @return {string} content value without BOM
	 */


	function stripBOM(content) {
	  if (content.charCodeAt(0) === 0xFEFF) {
	    content = content.slice(1);
	  }

	  return content;
	}

	var utils = {
	  isArray: isArray,
	  isArrayBuffer: isArrayBuffer,
	  isBuffer: isBuffer,
	  isFormData: isFormData,
	  isArrayBufferView: isArrayBufferView,
	  isString: isString,
	  isNumber: isNumber,
	  isObject: isObject,
	  isPlainObject: isPlainObject,
	  isUndefined: isUndefined,
	  isDate: isDate,
	  isFile: isFile,
	  isBlob: isBlob,
	  isFunction: isFunction,
	  isStream: isStream,
	  isURLSearchParams: isURLSearchParams,
	  isStandardBrowserEnv: isStandardBrowserEnv,
	  forEach: forEach,
	  merge: merge,
	  extend: extend,
	  trim: trim,
	  stripBOM: stripBOM
	};

	function encode(val) {
	  return encodeURIComponent(val).replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
	}
	/**
	 * Build a URL by appending params to the end
	 *
	 * @param {string} url The base of the url (e.g., http://www.google.com)
	 * @param {object} [params] The params to be appended
	 * @returns {string} The formatted url
	 */


	var buildURL = function buildURL(url, params, paramsSerializer) {
	  /*eslint no-param-reassign:0*/
	  if (!params) {
	    return url;
	  }

	  var serializedParams;

	  if (paramsSerializer) {
	    serializedParams = paramsSerializer(params);
	  } else if (utils.isURLSearchParams(params)) {
	    serializedParams = params.toString();
	  } else {
	    var parts = [];
	    utils.forEach(params, function serialize(val, key) {
	      if (val === null || typeof val === 'undefined') {
	        return;
	      }

	      if (utils.isArray(val)) {
	        key = key + '[]';
	      } else {
	        val = [val];
	      }

	      utils.forEach(val, function parseValue(v) {
	        if (utils.isDate(v)) {
	          v = v.toISOString();
	        } else if (utils.isObject(v)) {
	          v = JSON.stringify(v);
	        }

	        parts.push(encode(key) + '=' + encode(v));
	      });
	    });
	    serializedParams = parts.join('&');
	  }

	  if (serializedParams) {
	    var hashmarkIndex = url.indexOf('#');

	    if (hashmarkIndex !== -1) {
	      url = url.slice(0, hashmarkIndex);
	    }

	    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
	  }

	  return url;
	};

	function InterceptorManager() {
	  this.handlers = [];
	}
	/**
	 * Add a new interceptor to the stack
	 *
	 * @param {Function} fulfilled The function to handle `then` for a `Promise`
	 * @param {Function} rejected The function to handle `reject` for a `Promise`
	 *
	 * @return {Number} An ID used to remove interceptor later
	 */


	InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
	  this.handlers.push({
	    fulfilled: fulfilled,
	    rejected: rejected,
	    synchronous: options ? options.synchronous : false,
	    runWhen: options ? options.runWhen : null
	  });
	  return this.handlers.length - 1;
	};
	/**
	 * Remove an interceptor from the stack
	 *
	 * @param {Number} id The ID that was returned by `use`
	 */


	InterceptorManager.prototype.eject = function eject(id) {
	  if (this.handlers[id]) {
	    this.handlers[id] = null;
	  }
	};
	/**
	 * Iterate over all the registered interceptors
	 *
	 * This method is particularly useful for skipping over any
	 * interceptors that may have become `null` calling `eject`.
	 *
	 * @param {Function} fn The function to call for each interceptor
	 */


	InterceptorManager.prototype.forEach = function forEach(fn) {
	  utils.forEach(this.handlers, function forEachHandler(h) {
	    if (h !== null) {
	      fn(h);
	    }
	  });
	};

	var InterceptorManager_1 = InterceptorManager;

	var normalizeHeaderName = function normalizeHeaderName(headers, normalizedName) {
	  utils.forEach(headers, function processHeader(value, name) {
	    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
	      headers[normalizedName] = value;
	      delete headers[name];
	    }
	  });
	};

	/**
	 * Update an Error with the specified config, error code, and response.
	 *
	 * @param {Error} error The error to update.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 * @returns {Error} The error.
	 */

	var enhanceError = function enhanceError(error, config, code, request, response) {
	  error.config = config;

	  if (code) {
	    error.code = code;
	  }

	  error.request = request;
	  error.response = response;
	  error.isAxiosError = true;

	  error.toJSON = function toJSON() {
	    return {
	      // Standard
	      message: this.message,
	      name: this.name,
	      // Microsoft
	      description: this.description,
	      number: this.number,
	      // Mozilla
	      fileName: this.fileName,
	      lineNumber: this.lineNumber,
	      columnNumber: this.columnNumber,
	      stack: this.stack,
	      // Axios
	      config: this.config,
	      code: this.code
	    };
	  };

	  return error;
	};

	/**
	 * Create an Error with the specified message, config, error code, request and response.
	 *
	 * @param {string} message The error message.
	 * @param {Object} config The config.
	 * @param {string} [code] The error code (for example, 'ECONNABORTED').
	 * @param {Object} [request] The request.
	 * @param {Object} [response] The response.
	 * @returns {Error} The created error.
	 */


	var createError = function createError(message, config, code, request, response) {
	  var error = new Error(message);
	  return enhanceError(error, config, code, request, response);
	};

	/**
	 * Resolve or reject a Promise based on response status.
	 *
	 * @param {Function} resolve A function that resolves the promise.
	 * @param {Function} reject A function that rejects the promise.
	 * @param {object} response The response.
	 */


	var settle = function settle(resolve, reject, response) {
	  var validateStatus = response.config.validateStatus;

	  if (!response.status || !validateStatus || validateStatus(response.status)) {
	    resolve(response);
	  } else {
	    reject(createError('Request failed with status code ' + response.status, response.config, null, response.request, response));
	  }
	};

	var cookies = utils.isStandardBrowserEnv() ? // Standard browser envs support document.cookie
	function standardBrowserEnv() {
	  return {
	    write: function write(name, value, expires, path, domain, secure) {
	      var cookie = [];
	      cookie.push(name + '=' + encodeURIComponent(value));

	      if (utils.isNumber(expires)) {
	        cookie.push('expires=' + new Date(expires).toGMTString());
	      }

	      if (utils.isString(path)) {
	        cookie.push('path=' + path);
	      }

	      if (utils.isString(domain)) {
	        cookie.push('domain=' + domain);
	      }

	      if (secure === true) {
	        cookie.push('secure');
	      }

	      document.cookie = cookie.join('; ');
	    },
	    read: function read(name) {
	      var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
	      return match ? decodeURIComponent(match[3]) : null;
	    },
	    remove: function remove(name) {
	      this.write(name, '', Date.now() - 86400000);
	    }
	  };
	}() : // Non standard browser env (web workers, react-native) lack needed support.
	function nonStandardBrowserEnv() {
	  return {
	    write: function write() {},
	    read: function read() {
	      return null;
	    },
	    remove: function remove() {}
	  };
	}();

	/**
	 * Determines whether the specified URL is absolute
	 *
	 * @param {string} url The URL to test
	 * @returns {boolean} True if the specified URL is absolute, otherwise false
	 */

	var isAbsoluteURL = function isAbsoluteURL(url) {
	  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
	  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
	  // by any combination of letters, digits, plus, period, or hyphen.
	  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
	};

	/**
	 * Creates a new URL by combining the specified URLs
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} relativeURL The relative URL
	 * @returns {string} The combined URL
	 */

	var combineURLs = function combineURLs(baseURL, relativeURL) {
	  return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
	};

	/**
	 * Creates a new URL by combining the baseURL with the requestedURL,
	 * only when the requestedURL is not already an absolute URL.
	 * If the requestURL is absolute, this function returns the requestedURL untouched.
	 *
	 * @param {string} baseURL The base URL
	 * @param {string} requestedURL Absolute or relative URL to combine
	 * @returns {string} The combined full path
	 */


	var buildFullPath = function buildFullPath(baseURL, requestedURL) {
	  if (baseURL && !isAbsoluteURL(requestedURL)) {
	    return combineURLs(baseURL, requestedURL);
	  }

	  return requestedURL;
	};

	// Headers whose duplicates are ignored by node
	// c.f. https://nodejs.org/api/http.html#http_message_headers


	var ignoreDuplicateOf = ['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent'];
	/**
	 * Parse headers into an object
	 *
	 * ```
	 * Date: Wed, 27 Aug 2014 08:58:49 GMT
	 * Content-Type: application/json
	 * Connection: keep-alive
	 * Transfer-Encoding: chunked
	 * ```
	 *
	 * @param {String} headers Headers needing to be parsed
	 * @returns {Object} Headers parsed into an object
	 */

	var parseHeaders = function parseHeaders(headers) {
	  var parsed = {};
	  var key;
	  var val;
	  var i;

	  if (!headers) {
	    return parsed;
	  }

	  utils.forEach(headers.split('\n'), function parser(line) {
	    i = line.indexOf(':');
	    key = utils.trim(line.substr(0, i)).toLowerCase();
	    val = utils.trim(line.substr(i + 1));

	    if (key) {
	      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
	        return;
	      }

	      if (key === 'set-cookie') {
	        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
	      } else {
	        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	      }
	    }
	  });
	  return parsed;
	};

	var isURLSameOrigin = utils.isStandardBrowserEnv() ? // Standard browser envs have full support of the APIs needed to test
	// whether the request URL is of the same origin as current location.
	function standardBrowserEnv() {
	  var msie = /(msie|trident)/i.test(navigator.userAgent);
	  var urlParsingNode = document.createElement('a');
	  var originURL;
	  /**
	  * Parse a URL to discover it's components
	  *
	  * @param {String} url The URL to be parsed
	  * @returns {Object}
	  */

	  function resolveURL(url) {
	    var href = url;

	    if (msie) {
	      // IE needs attribute set twice to normalize properties
	      urlParsingNode.setAttribute('href', href);
	      href = urlParsingNode.href;
	    }

	    urlParsingNode.setAttribute('href', href); // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils

	    return {
	      href: urlParsingNode.href,
	      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	      host: urlParsingNode.host,
	      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	      hostname: urlParsingNode.hostname,
	      port: urlParsingNode.port,
	      pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
	    };
	  }

	  originURL = resolveURL(window.location.href);
	  /**
	  * Determine if a URL shares the same origin as the current location
	  *
	  * @param {String} requestURL The URL to test
	  * @returns {boolean} True if URL shares the same origin, otherwise false
	  */

	  return function isURLSameOrigin(requestURL) {
	    var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
	    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
	  };
	}() : // Non standard browser envs (web workers, react-native) lack needed support.
	function nonStandardBrowserEnv() {
	  return function isURLSameOrigin() {
	    return true;
	  };
	}();

	var xhr = function xhrAdapter(config) {
	  return new Promise(function dispatchXhrRequest(resolve, reject) {
	    var requestData = config.data;
	    var requestHeaders = config.headers;
	    var responseType = config.responseType;

	    if (utils.isFormData(requestData)) {
	      delete requestHeaders['Content-Type']; // Let the browser set it
	    }

	    var request = new XMLHttpRequest(); // HTTP basic authentication

	    if (config.auth) {
	      var username = config.auth.username || '';
	      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
	      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
	    }

	    var fullPath = buildFullPath(config.baseURL, config.url);
	    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true); // Set the request timeout in MS

	    request.timeout = config.timeout;

	    function onloadend() {
	      if (!request) {
	        return;
	      } // Prepare the response


	      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
	      var responseData = !responseType || responseType === 'text' || responseType === 'json' ? request.responseText : request.response;
	      var response = {
	        data: responseData,
	        status: request.status,
	        statusText: request.statusText,
	        headers: responseHeaders,
	        config: config,
	        request: request
	      };
	      settle(resolve, reject, response); // Clean up request

	      request = null;
	    }

	    if ('onloadend' in request) {
	      // Use onloadend if available
	      request.onloadend = onloadend;
	    } else {
	      // Listen for ready state to emulate onloadend
	      request.onreadystatechange = function handleLoad() {
	        if (!request || request.readyState !== 4) {
	          return;
	        } // The request errored out and we didn't get a response, this will be
	        // handled by onerror instead
	        // With one exception: request that using file: protocol, most browsers
	        // will return status as 0 even though it's a successful request


	        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
	          return;
	        } // readystate handler is calling before onerror or ontimeout handlers,
	        // so we should call onloadend on the next 'tick'


	        setTimeout(onloadend);
	      };
	    } // Handle browser request cancellation (as opposed to a manual cancellation)


	    request.onabort = function handleAbort() {
	      if (!request) {
	        return;
	      }

	      reject(createError('Request aborted', config, 'ECONNABORTED', request)); // Clean up request

	      request = null;
	    }; // Handle low level network errors


	    request.onerror = function handleError() {
	      // Real errors are hidden from us by the browser
	      // onerror should only fire if it's a network error
	      reject(createError('Network Error', config, null, request)); // Clean up request

	      request = null;
	    }; // Handle timeout


	    request.ontimeout = function handleTimeout() {
	      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';

	      if (config.timeoutErrorMessage) {
	        timeoutErrorMessage = config.timeoutErrorMessage;
	      }

	      reject(createError(timeoutErrorMessage, config, config.transitional && config.transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED', request)); // Clean up request

	      request = null;
	    }; // Add xsrf header
	    // This is only done if running in a standard browser environment.
	    // Specifically not if we're in a web worker, or react-native.


	    if (utils.isStandardBrowserEnv()) {
	      // Add xsrf header
	      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;

	      if (xsrfValue) {
	        requestHeaders[config.xsrfHeaderName] = xsrfValue;
	      }
	    } // Add headers to the request


	    if ('setRequestHeader' in request) {
	      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
	        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
	          // Remove Content-Type if data is undefined
	          delete requestHeaders[key];
	        } else {
	          // Otherwise add header to the request
	          request.setRequestHeader(key, val);
	        }
	      });
	    } // Add withCredentials to request if needed


	    if (!utils.isUndefined(config.withCredentials)) {
	      request.withCredentials = !!config.withCredentials;
	    } // Add responseType to request if needed


	    if (responseType && responseType !== 'json') {
	      request.responseType = config.responseType;
	    } // Handle progress if needed


	    if (typeof config.onDownloadProgress === 'function') {
	      request.addEventListener('progress', config.onDownloadProgress);
	    } // Not all browsers support upload events


	    if (typeof config.onUploadProgress === 'function' && request.upload) {
	      request.upload.addEventListener('progress', config.onUploadProgress);
	    }

	    if (config.cancelToken) {
	      // Handle cancellation
	      config.cancelToken.promise.then(function onCanceled(cancel) {
	        if (!request) {
	          return;
	        }

	        request.abort();
	        reject(cancel); // Clean up request

	        request = null;
	      });
	    }

	    if (!requestData) {
	      requestData = null;
	    } // Send the request


	    request.send(requestData);
	  });
	};

	var DEFAULT_CONTENT_TYPE = {
	  'Content-Type': 'application/x-www-form-urlencoded'
	};

	function setContentTypeIfUnset(headers, value) {
	  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
	    headers['Content-Type'] = value;
	  }
	}

	function getDefaultAdapter() {
	  var adapter;

	  if (typeof XMLHttpRequest !== 'undefined') {
	    // For browsers use XHR adapter
	    adapter = xhr;
	  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
	    // For node use HTTP adapter
	    adapter = xhr;
	  }

	  return adapter;
	}

	function stringifySafely(rawValue, parser, encoder) {
	  if (utils.isString(rawValue)) {
	    try {
	      (parser || JSON.parse)(rawValue);
	      return utils.trim(rawValue);
	    } catch (e) {
	      if (e.name !== 'SyntaxError') {
	        throw e;
	      }
	    }
	  }

	  return (encoder || JSON.stringify)(rawValue);
	}

	var defaults = {
	  transitional: {
	    silentJSONParsing: true,
	    forcedJSONParsing: true,
	    clarifyTimeoutError: false
	  },
	  adapter: getDefaultAdapter(),
	  transformRequest: [function transformRequest(data, headers) {
	    normalizeHeaderName(headers, 'Accept');
	    normalizeHeaderName(headers, 'Content-Type');

	    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
	      return data;
	    }

	    if (utils.isArrayBufferView(data)) {
	      return data.buffer;
	    }

	    if (utils.isURLSearchParams(data)) {
	      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
	      return data.toString();
	    }

	    if (utils.isObject(data) || headers && headers['Content-Type'] === 'application/json') {
	      setContentTypeIfUnset(headers, 'application/json');
	      return stringifySafely(data);
	    }

	    return data;
	  }],
	  transformResponse: [function transformResponse(data) {
	    var transitional = this.transitional;
	    var silentJSONParsing = transitional && transitional.silentJSONParsing;
	    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
	    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

	    if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
	      try {
	        return JSON.parse(data);
	      } catch (e) {
	        if (strictJSONParsing) {
	          if (e.name === 'SyntaxError') {
	            throw enhanceError(e, this, 'E_JSON_PARSE');
	          }

	          throw e;
	        }
	      }
	    }

	    return data;
	  }],

	  /**
	   * A timeout in milliseconds to abort a request. If set to 0 (default) a
	   * timeout is not created.
	   */
	  timeout: 0,
	  xsrfCookieName: 'XSRF-TOKEN',
	  xsrfHeaderName: 'X-XSRF-TOKEN',
	  maxContentLength: -1,
	  maxBodyLength: -1,
	  validateStatus: function validateStatus(status) {
	    return status >= 200 && status < 300;
	  }
	};
	defaults.headers = {
	  common: {
	    'Accept': 'application/json, text/plain, */*'
	  }
	};
	utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
	  defaults.headers[method] = {};
	});
	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
	});
	var defaults_1 = defaults;

	/**
	 * Transform the data for a request or a response
	 *
	 * @param {Object|String} data The data to be transformed
	 * @param {Array} headers The headers for the request or response
	 * @param {Array|Function} fns A single function or Array of functions
	 * @returns {*} The resulting transformed data
	 */


	var transformData = function transformData(data, headers, fns) {
	  var context = this || defaults_1;
	  /*eslint no-param-reassign:0*/

	  utils.forEach(fns, function transform(fn) {
	    data = fn.call(context, data, headers);
	  });
	  return data;
	};

	var isCancel = function isCancel(value) {
	  return !!(value && value.__CANCEL__);
	};

	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */


	function throwIfCancellationRequested(config) {
	  if (config.cancelToken) {
	    config.cancelToken.throwIfRequested();
	  }
	}
	/**
	 * Dispatch a request to the server using the configured adapter.
	 *
	 * @param {object} config The config that is to be used for the request
	 * @returns {Promise} The Promise to be fulfilled
	 */


	var dispatchRequest = function dispatchRequest(config) {
	  throwIfCancellationRequested(config); // Ensure headers exist

	  config.headers = config.headers || {}; // Transform request data

	  config.data = transformData.call(config, config.data, config.headers, config.transformRequest); // Flatten headers

	  config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
	  utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {
	    delete config.headers[method];
	  });
	  var adapter = config.adapter || defaults_1.adapter;
	  return adapter(config).then(function onAdapterResolution(response) {
	    throwIfCancellationRequested(config); // Transform response data

	    response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
	    return response;
	  }, function onAdapterRejection(reason) {
	    if (!isCancel(reason)) {
	      throwIfCancellationRequested(config); // Transform response data

	      if (reason && reason.response) {
	        reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
	      }
	    }

	    return Promise.reject(reason);
	  });
	};

	/**
	 * Config-specific merge-function which creates a new config-object
	 * by merging two configuration objects together.
	 *
	 * @param {Object} config1
	 * @param {Object} config2
	 * @returns {Object} New object resulting from merging config2 to config1
	 */


	var mergeConfig = function mergeConfig(config1, config2) {
	  // eslint-disable-next-line no-param-reassign
	  config2 = config2 || {};
	  var config = {};
	  var valueFromConfig2Keys = ['url', 'method', 'data'];
	  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];
	  var defaultToConfig2Keys = ['baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer', 'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName', 'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress', 'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent', 'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'];
	  var directMergeKeys = ['validateStatus'];

	  function getMergedValue(target, source) {
	    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
	      return utils.merge(target, source);
	    } else if (utils.isPlainObject(source)) {
	      return utils.merge({}, source);
	    } else if (utils.isArray(source)) {
	      return source.slice();
	    }

	    return source;
	  }

	  function mergeDeepProperties(prop) {
	    if (!utils.isUndefined(config2[prop])) {
	      config[prop] = getMergedValue(config1[prop], config2[prop]);
	    } else if (!utils.isUndefined(config1[prop])) {
	      config[prop] = getMergedValue(undefined, config1[prop]);
	    }
	  }

	  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
	    if (!utils.isUndefined(config2[prop])) {
	      config[prop] = getMergedValue(undefined, config2[prop]);
	    }
	  });
	  utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);
	  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
	    if (!utils.isUndefined(config2[prop])) {
	      config[prop] = getMergedValue(undefined, config2[prop]);
	    } else if (!utils.isUndefined(config1[prop])) {
	      config[prop] = getMergedValue(undefined, config1[prop]);
	    }
	  });
	  utils.forEach(directMergeKeys, function merge(prop) {
	    if (prop in config2) {
	      config[prop] = getMergedValue(config1[prop], config2[prop]);
	    } else if (prop in config1) {
	      config[prop] = getMergedValue(undefined, config1[prop]);
	    }
	  });
	  var axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys).concat(directMergeKeys);
	  var otherKeys = Object.keys(config1).concat(Object.keys(config2)).filter(function filterAxiosKeys(key) {
	    return axiosKeys.indexOf(key) === -1;
	  });
	  utils.forEach(otherKeys, mergeDeepProperties);
	  return config;
	};

	var name = "axios";
	var version = "0.21.4";
	var description = "Promise based HTTP client for the browser and node.js";
	var main = "index.js";
	var scripts = {
		test: "grunt test",
		start: "node ./sandbox/server.js",
		build: "NODE_ENV=production grunt build",
		preversion: "npm test",
		version: "npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json",
		postversion: "git push && git push --tags",
		examples: "node ./examples/server.js",
		coveralls: "cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js",
		fix: "eslint --fix lib/**/*.js"
	};
	var repository = {
		type: "git",
		url: "https://github.com/axios/axios.git"
	};
	var keywords = [
		"xhr",
		"http",
		"ajax",
		"promise",
		"node"
	];
	var author = "Matt Zabriskie";
	var license = "MIT";
	var bugs = {
		url: "https://github.com/axios/axios/issues"
	};
	var homepage = "https://axios-http.com";
	var devDependencies = {
		coveralls: "^3.0.0",
		"es6-promise": "^4.2.4",
		grunt: "^1.3.0",
		"grunt-banner": "^0.6.0",
		"grunt-cli": "^1.2.0",
		"grunt-contrib-clean": "^1.1.0",
		"grunt-contrib-watch": "^1.0.0",
		"grunt-eslint": "^23.0.0",
		"grunt-karma": "^4.0.0",
		"grunt-mocha-test": "^0.13.3",
		"grunt-ts": "^6.0.0-beta.19",
		"grunt-webpack": "^4.0.2",
		"istanbul-instrumenter-loader": "^1.0.0",
		"jasmine-core": "^2.4.1",
		karma: "^6.3.2",
		"karma-chrome-launcher": "^3.1.0",
		"karma-firefox-launcher": "^2.1.0",
		"karma-jasmine": "^1.1.1",
		"karma-jasmine-ajax": "^0.1.13",
		"karma-safari-launcher": "^1.0.0",
		"karma-sauce-launcher": "^4.3.6",
		"karma-sinon": "^1.0.5",
		"karma-sourcemap-loader": "^0.3.8",
		"karma-webpack": "^4.0.2",
		"load-grunt-tasks": "^3.5.2",
		minimist: "^1.2.0",
		mocha: "^8.2.1",
		sinon: "^4.5.0",
		"terser-webpack-plugin": "^4.2.3",
		typescript: "^4.0.5",
		"url-search-params": "^0.10.0",
		webpack: "^4.44.2",
		"webpack-dev-server": "^3.11.0"
	};
	var browser = {
		"./lib/adapters/http.js": "./lib/adapters/xhr.js"
	};
	var jsdelivr = "dist/axios.min.js";
	var unpkg = "dist/axios.min.js";
	var typings = "./index.d.ts";
	var dependencies = {
		"follow-redirects": "^1.14.0"
	};
	var bundlesize = [
		{
			path: "./dist/axios.min.js",
			threshold: "5kB"
		}
	];
	var pkg = {
		name: name,
		version: version,
		description: description,
		main: main,
		scripts: scripts,
		repository: repository,
		keywords: keywords,
		author: author,
		license: license,
		bugs: bugs,
		homepage: homepage,
		devDependencies: devDependencies,
		browser: browser,
		jsdelivr: jsdelivr,
		unpkg: unpkg,
		typings: typings,
		dependencies: dependencies,
		bundlesize: bundlesize
	};

	var validators$1 = {}; // eslint-disable-next-line func-names

	['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function (type, i) {
	  validators$1[type] = function validator(thing) {
	    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
	  };
	});
	var deprecatedWarnings = {};
	var currentVerArr = pkg.version.split('.');
	/**
	 * Compare package versions
	 * @param {string} version
	 * @param {string?} thanVersion
	 * @returns {boolean}
	 */

	function isOlderVersion(version, thanVersion) {
	  var pkgVersionArr = thanVersion ? thanVersion.split('.') : currentVerArr;
	  var destVer = version.split('.');

	  for (var i = 0; i < 3; i++) {
	    if (pkgVersionArr[i] > destVer[i]) {
	      return true;
	    } else if (pkgVersionArr[i] < destVer[i]) {
	      return false;
	    }
	  }

	  return false;
	}
	/**
	 * Transitional option validator
	 * @param {function|boolean?} validator
	 * @param {string?} version
	 * @param {string} message
	 * @returns {function}
	 */


	validators$1.transitional = function transitional(validator, version, message) {
	  var isDeprecated = version && isOlderVersion(version);

	  function formatMessage(opt, desc) {
	    return '[Axios v' + pkg.version + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
	  } // eslint-disable-next-line func-names


	  return function (value, opt, opts) {
	    if (validator === false) {
	      throw new Error(formatMessage(opt, ' has been removed in ' + version));
	    }

	    if (isDeprecated && !deprecatedWarnings[opt]) {
	      deprecatedWarnings[opt] = true; // eslint-disable-next-line no-console

	      console.warn(formatMessage(opt, ' has been deprecated since v' + version + ' and will be removed in the near future'));
	    }

	    return validator ? validator(value, opt, opts) : true;
	  };
	};
	/**
	 * Assert object's properties type
	 * @param {object} options
	 * @param {object} schema
	 * @param {boolean?} allowUnknown
	 */


	function assertOptions(options, schema, allowUnknown) {
	  if (typeof options !== 'object') {
	    throw new TypeError('options must be an object');
	  }

	  var keys = Object.keys(options);
	  var i = keys.length;

	  while (i-- > 0) {
	    var opt = keys[i];
	    var validator = schema[opt];

	    if (validator) {
	      var value = options[opt];
	      var result = value === undefined || validator(value, opt, options);

	      if (result !== true) {
	        throw new TypeError('option ' + opt + ' must be ' + result);
	      }

	      continue;
	    }

	    if (allowUnknown !== true) {
	      throw Error('Unknown option ' + opt);
	    }
	  }
	}

	var validator = {
	  isOlderVersion: isOlderVersion,
	  assertOptions: assertOptions,
	  validators: validators$1
	};

	var validators = validator.validators;
	/**
	 * Create a new instance of Axios
	 *
	 * @param {Object} instanceConfig The default config for the instance
	 */

	function Axios(instanceConfig) {
	  this.defaults = instanceConfig;
	  this.interceptors = {
	    request: new InterceptorManager_1(),
	    response: new InterceptorManager_1()
	  };
	}
	/**
	 * Dispatch a request
	 *
	 * @param {Object} config The config specific for this request (merged with this.defaults)
	 */


	Axios.prototype.request = function request(config) {
	  /*eslint no-param-reassign:0*/
	  // Allow for axios('example/url'[, config]) a la fetch API
	  if (typeof config === 'string') {
	    config = arguments[1] || {};
	    config.url = arguments[0];
	  } else {
	    config = config || {};
	  }

	  config = mergeConfig(this.defaults, config); // Set config.method

	  if (config.method) {
	    config.method = config.method.toLowerCase();
	  } else if (this.defaults.method) {
	    config.method = this.defaults.method.toLowerCase();
	  } else {
	    config.method = 'get';
	  }

	  var transitional = config.transitional;

	  if (transitional !== undefined) {
	    validator.assertOptions(transitional, {
	      silentJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
	      forcedJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
	      clarifyTimeoutError: validators.transitional(validators.boolean, '1.0.0')
	    }, false);
	  } // filter out skipped interceptors


	  var requestInterceptorChain = [];
	  var synchronousRequestInterceptors = true;
	  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
	    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
	      return;
	    }

	    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
	    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
	  });
	  var responseInterceptorChain = [];
	  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
	    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
	  });
	  var promise;

	  if (!synchronousRequestInterceptors) {
	    var chain = [dispatchRequest, undefined];
	    Array.prototype.unshift.apply(chain, requestInterceptorChain);
	    chain = chain.concat(responseInterceptorChain);
	    promise = Promise.resolve(config);

	    while (chain.length) {
	      promise = promise.then(chain.shift(), chain.shift());
	    }

	    return promise;
	  }

	  var newConfig = config;

	  while (requestInterceptorChain.length) {
	    var onFulfilled = requestInterceptorChain.shift();
	    var onRejected = requestInterceptorChain.shift();

	    try {
	      newConfig = onFulfilled(newConfig);
	    } catch (error) {
	      onRejected(error);
	      break;
	    }
	  }

	  try {
	    promise = dispatchRequest(newConfig);
	  } catch (error) {
	    return Promise.reject(error);
	  }

	  while (responseInterceptorChain.length) {
	    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
	  }

	  return promise;
	};

	Axios.prototype.getUri = function getUri(config) {
	  config = mergeConfig(this.defaults, config);
	  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
	}; // Provide aliases for supported request methods


	utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function (url, config) {
	    return this.request(mergeConfig(config || {}, {
	      method: method,
	      url: url,
	      data: (config || {}).data
	    }));
	  };
	});
	utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
	  /*eslint func-names:0*/
	  Axios.prototype[method] = function (url, data, config) {
	    return this.request(mergeConfig(config || {}, {
	      method: method,
	      url: url,
	      data: data
	    }));
	  };
	});
	var Axios_1 = Axios;

	/**
	 * A `Cancel` is an object that is thrown when an operation is canceled.
	 *
	 * @class
	 * @param {string=} message The message.
	 */

	function Cancel(message) {
	  this.message = message;
	}

	Cancel.prototype.toString = function toString() {
	  return 'Cancel' + (this.message ? ': ' + this.message : '');
	};

	Cancel.prototype.__CANCEL__ = true;
	var Cancel_1 = Cancel;

	/**
	 * A `CancelToken` is an object that can be used to request cancellation of an operation.
	 *
	 * @class
	 * @param {Function} executor The executor function.
	 */


	function CancelToken(executor) {
	  if (typeof executor !== 'function') {
	    throw new TypeError('executor must be a function.');
	  }

	  var resolvePromise;
	  this.promise = new Promise(function promiseExecutor(resolve) {
	    resolvePromise = resolve;
	  });
	  var token = this;
	  executor(function cancel(message) {
	    if (token.reason) {
	      // Cancellation has already been requested
	      return;
	    }

	    token.reason = new Cancel_1(message);
	    resolvePromise(token.reason);
	  });
	}
	/**
	 * Throws a `Cancel` if cancellation has been requested.
	 */


	CancelToken.prototype.throwIfRequested = function throwIfRequested() {
	  if (this.reason) {
	    throw this.reason;
	  }
	};
	/**
	 * Returns an object that contains a new `CancelToken` and a function that, when called,
	 * cancels the `CancelToken`.
	 */


	CancelToken.source = function source() {
	  var cancel;
	  var token = new CancelToken(function executor(c) {
	    cancel = c;
	  });
	  return {
	    token: token,
	    cancel: cancel
	  };
	};

	var CancelToken_1 = CancelToken;

	/**
	 * Syntactic sugar for invoking a function and expanding an array for arguments.
	 *
	 * Common use case would be to use `Function.prototype.apply`.
	 *
	 *  ```js
	 *  function f(x, y, z) {}
	 *  var args = [1, 2, 3];
	 *  f.apply(null, args);
	 *  ```
	 *
	 * With `spread` this example can be re-written.
	 *
	 *  ```js
	 *  spread(function(x, y, z) {})([1, 2, 3]);
	 *  ```
	 *
	 * @param {Function} callback
	 * @returns {Function}
	 */

	var spread = function spread(callback) {
	  return function wrap(arr) {
	    return callback.apply(null, arr);
	  };
	};

	/**
	 * Determines whether the payload is an error thrown by Axios
	 *
	 * @param {*} payload The value to test
	 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
	 */

	var isAxiosError = function isAxiosError(payload) {
	  return typeof payload === 'object' && payload.isAxiosError === true;
	};

	/**
	 * Create an instance of Axios
	 *
	 * @param {Object} defaultConfig The default config for the instance
	 * @return {Axios} A new instance of Axios
	 */


	function createInstance(defaultConfig) {
	  var context = new Axios_1(defaultConfig);
	  var instance = bind(Axios_1.prototype.request, context); // Copy axios.prototype to instance

	  utils.extend(instance, Axios_1.prototype, context); // Copy context to instance

	  utils.extend(instance, context);
	  return instance;
	} // Create the default instance to be exported


	var axios$1 = createInstance(defaults_1); // Expose Axios class to allow class inheritance

	axios$1.Axios = Axios_1; // Factory for creating new instances

	axios$1.create = function create(instanceConfig) {
	  return createInstance(mergeConfig(axios$1.defaults, instanceConfig));
	}; // Expose Cancel & CancelToken


	axios$1.Cancel = Cancel_1;
	axios$1.CancelToken = CancelToken_1;
	axios$1.isCancel = isCancel; // Expose all/spread

	axios$1.all = function all(promises) {
	  return Promise.all(promises);
	};

	axios$1.spread = spread; // Expose isAxiosError

	axios$1.isAxiosError = isAxiosError;
	var axios_1 = axios$1; // Allow use of default import syntax in TypeScript

	var _default = axios$1;
	axios_1.default = _default;

	var axios = axios_1;

	/**
	 * Created by jacob.mendt@pikobytes.de on 10.11.21.
	 *
	 * This file is subject to the terms and conditions defined in
	 * file 'LICENSE.txt', which is part of this source code package.
	 */

	function checkIfIndexIsMissing() {
	  if (settingsProvider.getSettings().API_SEARCH === undefined) {
	    throw new Error("There is no search index defined.");
	  }
	}
	/**
	 * The function queries the search index for a specific document id and returns the json body.
	 * @param {int|string} documentId
	 * @returns {Promise<AxiosResponse<any>>}
	 */


	async function queryDocument(documentId) {
	  checkIfIndexIsMissing(); // Build url and query it

	  const response = await axios.get(`${settingsProvider.getSettings().API_SEARCH}/_doc/${documentId}`);

	  if (response.status === 200) {
	    return response.data._source;
	  } else {
	    console.error("Something went wrong while trying to fetch search document.");
	    return undefined;
	  }
	}

	/**
	 * Created by jacob.mendt@pikobytes.de on 10.11.21.
	 *
	 * This file is subject to the terms and conditions defined in
	 * file 'LICENSE.txt', which is part of this source code package.
	 */
	const ControllerGeoreferencer = () => {
	  // Effects which should be triggered on mount
	  react.useEffect(async () => {
	    const mapDocument = await queryDocument("oai:de:slub-dresden:vk:id-10009482");

	    if (mapDocument !== undefined) {
	      console.log(mapDocument);
	    }
	  }, []);
	  return /*#__PURE__*/react.createElement("div", {
	    style: {
	      display: "none"
	    }
	  });
	};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	var ReactPropTypesSecret_1 = ReactPropTypesSecret;

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */



	function emptyFunction() {}

	function emptyFunctionWithReset() {}

	emptyFunctionWithReset.resetWarningCache = emptyFunction;

	var factoryWithThrowingShims = function () {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret_1) {
	      // It is still safe when called from React.
	      return;
	    }

	    var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
	    err.name = 'Invariant Violation';
	    throw err;
	  }
	  shim.isRequired = shim;

	  function getShim() {
	    return shim;
	  }
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

	  var ReactPropTypes = {
	    array: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,
	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    elementType: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim,
	    exact: getShim,
	    checkPropTypes: emptyFunctionWithReset,
	    resetWarningCache: emptyFunction
	  };
	  ReactPropTypes.PropTypes = ReactPropTypes;
	  return ReactPropTypes;
	};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var propTypes = createCommonjsModule$1(function (module) {
	{
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  module.exports = factoryWithThrowingShims();
	}
	});

	/**
	 * Created by jacob.mendt@pikobytes.de on 10.11.21.
	 *
	 * This file is subject to the terms and conditions defined in
	 * file 'LICENSE.txt', which is part of this source code package.
	 */
	const Header = props => {
	  const {
	    children
	  } = props;
	  return /*#__PURE__*/react.createElement("div", {
	    className: "vk-header-app-georeference"
	  }, /*#__PURE__*/react.createElement("h1", null, /*#__PURE__*/react.createElement("span", {
	    className: "logo"
	  }, "VK20 Georeferenzierung"), " Neue Georeferenzierung"), /*#__PURE__*/react.createElement("div", {
	    className: "menu-controls"
	  }, children));
	};
	Header.propTypes = {
	  children: propTypes.node
	};

	/**
	 * Created by jacob.mendt@pikobytes.de on 10.11.21.
	 *
	 * This file is subject to the terms and conditions defined in
	 * file 'LICENSE.txt', which is part of this source code package.
	 */
	// @TODO Click on the link to the faq not working yet

	const SelectTransform = () => {
	  return /*#__PURE__*/react.createElement("div", {
	    class: "vk-select-transform"
	  }, /*#__PURE__*/react.createElement("a", {
	    "data-classes": "faq",
	    class: "vk2-modal-anchor",
	    title: "Frequently Asked Questions (FAQ)",
	    href: "/vkviewer/static/faq/#georeferencing-of-maps-algorithm"
	  }, /*#__PURE__*/react.createElement("span", {
	    class: "glyphicon glyphicon-info-sign",
	    "aria-hidden": "true"
	  })), /*#__PURE__*/react.createElement("div", {
	    class: "dropdown"
	  }, /*#__PURE__*/react.createElement("select", {
	    id: "transformation-chooser",
	    class: "form-control"
	  }, /*#__PURE__*/react.createElement("option", null, "Affine"), /*#__PURE__*/react.createElement("option", null, "Polynom"), /*#__PURE__*/react.createElement("option", null, "TPS"))));
	};

	/**
	 * Created by jacob.mendt@pikobytes.de on 10.11.21.
	 *
	 * This file is subject to the terms and conditions defined in
	 * file 'LICENSE.txt', which is part of this source code package.
	 */
	const GeoreferencerApp = () => {
	  return /*#__PURE__*/react.createElement(Recoil_index_2, null, /*#__PURE__*/react.createElement(ControllerGeoreferencer, null), /*#__PURE__*/react.createElement("div", {
	    className: "vk-app-georeferencer"
	  }, /*#__PURE__*/react.createElement(Header, null, /*#__PURE__*/react.createElement(SelectTransform, null))));
	};

	/**
	 * Created by nicolas.looschen@pikobytes.de on 16.09.21.
	 *
	 * This file is subject to the terms and conditions defined in
	 * file 'LICENSE.txt', which is part of this source code package.
	 */
	const SettingsProvider = settingsProvider;
	function renderGeoreferenceApp(element) {
	  reactDom.render( /*#__PURE__*/react.createElement(GeoreferencerApp, null), element);
	}

	exports.SettingsProvider = SettingsProvider;
	exports.renderGeoreferenceApp = renderGeoreferenceApp;

	Object.defineProperty(exports, '__esModule', { value: true });

	return exports;

})({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
